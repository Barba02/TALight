%YAML 1.2
---
public_folder: public
services:
  check:
    evaluator: [python, services/check_driver.py]
    description: "given a set of objects, each one with its value and weight, and a total budget (Knapsack_Capacity), the Knapsack Problem asks to find a maximum value subset of the objects not exceeding the budget. This service checks and gives full (or partial, during exams or training for non-superusers) feedback to answers of the problem solver/trainee/student to alleged solutions to the knapsack problem and possible variations of the original questions. These didactic variations also suitable for exams or a test, to assess the competences, are triggered by resorting on the arguments exposed by the API of this TALight service. For example, it is possible to impose further constraints on the feasible solutions. It is also possible to check/validate the correctness of dynamic programming tables. In this case, the service also supports giving contextual feedback in case partially pre-filled DP tables were supplied to the student/trainee to avoid him being overwhelmed by their size (expecially useful to realistically allow a compilation by hand of the tables on interesting enough instances)."
    args:
      # section with the instance data assigned to the problem-solver/student:
      elementi:
        regex: ^(.*)$
        default: "['A', 'B', 'C', 'D', 'E']"
        explain: nomi degli oggetti
      pesi:
        regex: ^(.*)$
        default: "[2, 3, 4, 29, 50]"
        explain: pesi degli oggetti
      valori:
        regex: ^(.*)$
        default: "[13, 17, 19, 11, 15]"
        explain: valori degli oggetti
      Knapsack_Capacity:
        regex: ^(0|[1-9][0-9]*)$
        default: 5
        explain: una soluzione (un sottoinsieme degli oggetti) è ammissibile se la somma complessiva dei pesi non eccede Knapsack_Capacity
      elementi_proibiti:
        regex: ^(.*)$
        default: "[]"
        explain: la soluzione è tenuta ad evitare questi oggetti
      elementi_obbligati:
        regex: ^(.*)$
        default: "[]"
        explain: la soluzione è tenuta ad includere questi oggetti
      partialDPtable:
        regex: ^(.*)$
        default: "[]"
        explain: "a partial DP table where some entries have been concealed (overwriting a -1 on top of them). For example: [ [ 0, 0, 0, 0, 0], [ 0, 0, 13, 13, 13], [ 0, 0, 13, 17, 17], [ 0, 0, 13, 17, -1] ]."
      instance_dict:
        regex: ^(.*)$
        default: "{}"
        example: "-a instance_dict=\"{'elementi':['A','B','C'],'pesi':[3,5,7],'valori':[2,4,5], 'Knapsack_Capacity':30}\""
        explain: "There are two options for passing to this TALight service the assigned underlying instance for the problem. Either you use a separate argument for each possible object type comprising your instance, or you callect them all within one single dictionary that you pass through this one argument (`instance_dict`). The second option is the way to go when calling the service from another software, through its API. When this argument is left to its default value (the empty dictionary, as encoded by the string '{}') then the first option is assumed, which may be more convenient when experiencing the service from the CLI. Otherwise, the string passed through `instance_dict` is read as yaml to obtain the dictionary containing the instance faced by the the student. The full description of the instance may comprise more parts/objects (out from a finite set designed by the problem maker) each one with its own type and standard name attached to it (e.g., like `pesi` or `valori`). These standard names are the same as the names of the arguments to be used when following the first option (hence you can see the whole list of possible instance objects, and their names, by inspecting the complete list of arguments to this service)."

      # section with the answer of the problem-solver/student to be evaluated and provided a feedback with:
      opt_sol:
        regex: ^(.*)$
        default: "['A', 'B']"
        explain: 'an optimal solution, i.e., a subset of objects of maximum total value among those whose total weight does not exceed `Knapsack_Capacity`'
      opt_val:
        regex: ^(0|[1-9][0-9]*)$
        default: 30
        explain: 'the maximum total value of a feasible solution (set of objects whose total weight does not exceed `Knapsack_Capacity`)'
      num_opt_sols:
        regex: ^(0|[1-9][0-9]*)$
        default: 30
        explain: the number of different optimal solutions
      list_opt_sols:
        regex: ^(.*)$
        default: "[ ['A', 'B'], ['A', 'C']]"
        explain: the list of all optimal solutions
      DPtable_opt_val:
        regex: ^(.*)$
        default: "[[0, 0, 0, 0, 0, 0], [0, 0, 13, 13, 13, 13], [0, 0, 13, 17, 17, 30], [0, 0, 13, 17, 19, 30] ]"
        explain: 'the DP table meant to tell the optimal value for any prefix of the available objects and for any possible value of the knapsack capacity up to `Knapsack_Capacity`'
      DPtable_num_opts:
        regex: ^(.*)$
        default: "[[0, 0, 0, 0, 0, 0], [0, 0, 13, 13, 13, 13], [0, 0, 13, 17, 17, 30], [0, 0, 13, 17, 19, 30] ]"
        explain: 'the DP table meant to tell the number of optimal solutions for any prefix of the available objects and for any possible value of the knapsack capacity up to `Knapsack_Capacity`'
      answer_dict:
        regex: ^(.*)$
        default: ""
        example1: "-a answer_dict=\"{'opt_sol':['A', 'B'], 'opt_val':30}\""
        example2: "-a answer_dict=\"{'opt_sol1':['A', 'B'], 'opt_val1':30}\""
        explain: "There are two options for passing to this TALight service the anwer to be evaluated and provided a feedback with. Either you use a separate argument for each possible object type comprising your answer, or you callect them all within one single dictionary that you pass through this one argument (`answer_dict`). The second option is the way to go when calling the service from another software, through its API. When this argument is left to its default value (the empty string) then the first option is assumed, which may be better when experiencing the service from the CLI. Otherwise, the string passed through `answer_dict` is read as yaml to obtain the dictionary containing the answer of the student. An answer may comprise more objects (out from a finite set designed by the problem maker) each one with its type represented by the standard name attached to it (e.g., like `opt_sol` or `opt_val`). These standard names are the same as the names of the arguments to be used when following the first option (hence you can see the whole list of possible answer objects, and their names, by inspecting the complete list of arguments to this service). You can use these standard names as the keys of the dictionary `answer_dict`, so that each object in the answer of the student is clearly tagged with its type. However, the companion argument `alias_dict` allows for more freedom: it allows you to introduce custom names, defined in terms of the standard ones (just an aliasing) and to attach them to the objects comprising your answer, using them as keys in your `answer_dict` dictionary. In this way the feedback provided by the service will be closer to the context faced by the student. Therefore, the argument `answer_dict` expects a dictionary whose keys are either standard names of supported objects or one of the keys in the dictionary `alias_dict`. Moreover, for every key-value pair in `answer_dict`, the value is an object of the type indicated either directly by the key (if key is a standard name) or by the value associate to key by the dictionary `alias_dict`"

      # section with the request that was posed to the problem-solver/student:
      alias_dict:
        regex: ^(.*)$
        default: "{}"
        explain: 'this argument (a string to be read as yaml) is a dictionary of the objects comprising the solution that the instructor has asked from the problem solver on a given exercise/task/request. The keys are the names that the instructor has assigned to the standard object types involved in the request, the corresponding values should be among the following:'
        explain1: '[opt_sol] an optimal solution, i.e., a subset of objects of maximum total value among those whose total weight does not exceed `Knapsack_Capacity`'
        explain2: '[opt_val] the maximum total value of a feasible solution (set of objects whose total weight does not exceed `Knapsack_Capacity`)'
        explain3: '[num_opt_sols] the number of different optimal solutions'
        explain4: '[list_opt_sols] the list of all optimal solutions'
        explain5: '[DPtable_opt_val] the DP table meant to tell the optimal value for any prefix of the available objects and for any possible value of the knapsack capacity up to `Knapsack_Capacity`'
        explain6: '[DPtable_num_opts] the DP table meant to tell the number of optimal solutions for any prefix of the available objects and for any possible value of the knapsack capacity up to `Knapsack_Capacity`'
        explain7: ''
        note: 'the values associated to the keys are the names that have been attached to these objects. It is assumed that not only the keys but also the values of this dictionary are all different.\nIf the name you are attaching to an object is the standard one, then you do not need to report its name in the `alias_dict` dictionary (but of course, your `alias_dict` dictionary can not then attach that very same same to another object).\n'
        example1: "-a alias_dict=\"{'opt_sol': 'opt_sol', 'opt_val': 'opt_val'}\""
        example2: "-a alias_dict=\"{'opt_sol1': 'opt_sol', 'opt_val1': 'opt_val'}\""
        example3: "In particular, you can leave the default value (the empty dictionary {}) is you stick to the original keys for all possible objects in the answer/solution, like in Example 1\n"

      # section with the arguments that specify the format of the feedback string and the forms of the outputs, either direct, or on output file (certificates sent to the local machine), or on logs (on the server for full evaluation)
      color_implementation:
        regex: ^(ANSI|html|None)$
        default: ANSI
      as_yaml_with_points:
        regex: ^(0|1)$
        default: 0
      yield_certificate_in_output_file:
        regex: ^(0|1)$
        default: 0
      recall_instance:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0

      # section with the points assigned to a single task of an exercise in the context of an exam or exam simulation:
      pt_formato_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
      pt_feasibility_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 1
      pt_tot:
        regex: ^(0|[1-9][0-9]*)$
        default: 10
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1

  oracle:
    evaluator: [python, services/oracle_driver.py]
    description: "given a set of objects, each one with its weight and cost, and a total budget (Knapsack_Capacity), this service computes and returns an optimal solution to the knapsack problem: a maximum value subset of the objects not exceeding the budget. Using the arguments of the service it is possible to impose further constraints on the feasible solutions and to pose several didactic variations of the challenge, as suitable both for training sessions and exams. The service can also be asked to return dynamic programming tables."
    args:
      pwd:
        regex: ^(.*)$
        explain: this service should not be let available to students at least during the exams. Set a private password in order to prevent unauthorized access.

      # section with a possible instance to the problem:
      elementi:
        regex: ^(.*)$
        default: "['A', 'B', 'C']"
      pesi:
        regex: ^(.*)$
        default: "[2, 3, 4]"
      valori:
        regex: ^(.*)$
        default: "[13, 17, 19]"
      Knapsack_Capacity:
        regex: ^(0|[1-9][0-9]*)$
        default: 5
      elementi_proibiti:
        regex: ^(.*)$
        default: "[]"
      elementi_obbligati:
        regex: ^(.*)$
        default: "[]"
      instance_dict:
        regex: ^(.*)$
        default: "{}"
        example: "-a instance_dict=\"{'elementi':['A','B','C'],'pesi':[3,5,7],'valori':[2,4,5], 'Knapsack_Capacity':30}\""
        explain: "There are two options for passing to this TALight service the assigned underlying instance for the problem. Either you use a separate argument for each possible object type comprising your instance, or you callect them all within one single dictionary that you pass through this one argument (`instance_dict`). The second option is the way to go when calling the service from another software, through its API. When this argument is left to its default value (the empty dictionary, as encoded by the string '{}') then the first option is assumed, which may be more convenient when experiencing the service from the CLI. Otherwise, the string passed through `instance_dict` is read as yaml to obtain the dictionary containing the instance faced by the the student. The full description of the instance may comprise more parts/objects (out from a finite set designed by the problem maker) each one with its own type and standard name attached to it (e.g., like `pesi` or `valori`). These standard names are the same as the names of the arguments to be used when following the first option (hence you can see the whole list of possible instance objects, and their names, by inspecting the complete list of arguments to this service)."

      # section characterizing the seeked for answer and the naming for its variables:
      request_dict:
        regex: ^(.*)$
        default: "{}"
        explain: 'this argument (a string to be read as yaml) is a dictionary describing the solution requested to the oracle. For every `key`-`value` pair in this dictionary, the oracle service will compute an object whose standard name is `value` (e.g., "opt_sol") and refer to it by the name `key` as prescribed by the caller. The possible `vlues` are the following:'
        explain1: '[opt_sol] an optimal solution, i.e., a subset of objects of maximum total value among those whose total weight does not exceed the knapsack capacity'
        explain2: '[opt_val] the maximum total value of a feasible solution (set of objects whose total weight does not exceed the knapsack capacity)'
        explain3: '[num_opt_sols] the number of different optimal solutions'
        explain4: '[list_opt_sols] the list of all optimal solutions'
        explain5: '[DPtable_opt_val] the DP table meant to tell the optimal value for any prefix of the available objects and for any possible value of the knapsack capacity up to `Knapsack_Capacity`'
        explain6: '[DPtable_num_opts] the DP table meant to tell the number of optimal solutions for any prefix of the available objects and for any possible value of the knapsack capacity up to `Knapsack_Capacity`'
        explain7: ''
        note: 'the values associated to the keys are the names that have been attached to these objects. It is assumed that not only the keys but also the values of this dictionary are all different.'
        example1: "-a request_dict=\"{'opt_sol': 'opt_sol', 'opt_val': 'opt_val'}\""
        example2: "-a request_dict=\"{'opt_sol': 'opt_sol1', 'opt_val': 'opt_val1'}\""
        example3: "if you can leave the default value (the empty dictionary {}) then you get the answers to all possible questions. In this case the keys for each object are the original keys like those in Example 1\n"

      # section with arguments that specify the formats of the outputs, either direct or on logs (on the server for full evaluation) in the context of an exam or exam simulation:
      as_yaml:
        regex: ^(0|1)$
        default: 0
      recall_instance:
        regex: ^(0|1)$
        default: 0
      recall_request:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0
      with_output_files:
        regex: ^(0|1)$
        default: 0
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    description: "the service synopsis is used by the problem solver to explore the services of a TALight problem, including synopsis itself (like you are doing right now). The information about each service is taken from the meta.yaml file defining the problem interface. This is the same file that stipulates the contract between the rtal client and the rtald server, or also the contract between a problem maker designing the problem and a problem maker that implements its services. Actually, `meta.yaml` is a symlink pointing to the metafile set as default by whom has deployed the problem on the server you are receiving this information from; however, using the argument `metafile` you can ask for other metafiles, possibly offering the same information in other languages. Instead, the argument `lang` only affects the language used when formatting this problem specific information into this sheet. At the bottom of this help sheet for the service synopsis itself, as well as for any other service sheet, you find an handy list of all the services available for the given problem (currenty, {problem}): if you want to know more about one of them, specify its name in the argument `service` in your next call to the service synopsis." 
    args:
      service:
        regex: ^(synopsis|check|oracle|[a-zA-Z0-9_]+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      metafile:
        regex: ^(default|en|it|[a-zA-Z0-9_]+)$
        default: default
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it|[a-zA-Z0-9_]+)$
        default: en
...
