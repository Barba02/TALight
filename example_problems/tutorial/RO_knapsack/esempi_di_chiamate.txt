Note:
- installare termcolor, tabulate e ansi2html
- avviare il daemon rtald con:
      rtald -a exam_RO_test.yaml -d /home/romeo/TALight/example_problems/tutorial
      da un folder dove si sia creato il file  lanciando:
      echo -e "%YAML 1.2\n---\ntokens:\n  - id123456_VR123456_123456789012345_nominativo_studente\n  - _0123456789_nickname_docente\nsave_directory: log_RO_exam\n..." > exam_RO_test.yaml

- chiamate con DPtable hanno output None (ATTUALMENTE NON IMPLEMENTATO)
- invio di file (submission_filehandler) attualmente non supportato nè da Jupyter

CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack check -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a alias_dict="{'opt_sol_MIA': 'opt_sol'}" -a answer_dict="{'opt_sol_MIA':['A', 'B']}"

rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack check -a alias_dict="{'opt_sol_MIA': 'opt_sol'}" -a answer_dict="{'opt_sol_MIA':['A', 'B'], 'opt_val':'-1'}" -awith_opening_message  -a instance_dict="{'Knapsack_Capacity': 5, 'elementi': ['A', 'B', 'C'], 'pesi': [2, 3, 4], 'valori': [13, 17, 19]}"

rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack check -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a alias_dict="{'opt_sol_MIA': 'opt_sol'}" -a answer_dict="{'opt_sol_MIA':['A', 'B'], 'opt_val':'-1'}" -aas_yaml_with_points=1

rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack check -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a alias_dict="{'opt_sol_MIA': 'opt_sol'}" -a answer_dict="{'opt_sol_MIA':['A', 'B']}"  -a color_implementation='html'


Esempio di chiamate al servizio dal long file yaml:

verify_submission(task_number=1,pt_tot=40,pt_formato_OK=0,pt_feasibility_OK=1, elements=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N'],weights=[12, 16, 17, 11, 13, 6, 7, 3, 1, 12, 9, 8],vals=[50, 53, 55, 39, 45, 17, 18, 7, 8, 42, 30, 25],Capacity=36,elementi_proibiti=[],elementi_obbligati=[],partialDPtable=[], long_answer_dict={'opt_sol':(opt_sol1,'opt_sol1'),'opt_val':(opt_val1,'opt_val1'),})

Dal Jupyter Notebook (funzione chiamata da verify_submission del longyaml):

    "def verify_submission(task_number:int,pt_tot:int,pt_formato
_OK:int,pt_feasibility_OK:int, elements:List[str],weights:List[i
nt],vals:List[int],Capacity:int,elementi_proibiti:List[str],elem
enti_obbligati:List[str],partialDPtable:List[List[int]], long_answer_dict:Dict):\n",
    "\n",
    "    print(\"Here is what the TALight checker thinks (and has stored on the server) about your submission:\")\n",
    "    answer_dict = { val[1]:val[0] for val in long_answer_dict.values() }\n",
    "    alias_dict = { val[1]:key for key, val in long_answer_dict.items() }\n",
    "    feedback_dict_TAL = rtal_connect(RTAL_URL, 'RO_knapsack', 'check', rtalargs_dict={'elementi':elements, 'pesi':weights, 'valori':vals, 'Knapsack_Capacity':Capacity, 'elementi_proibiti':elementi_proibiti, 'elementi_obbligati':elementi_obbligati,'partialDPtable':partialDPtable, 'alias_dict':alias_dict, 'answer_dict':answer_dict, 'as_yaml_with_points':'1', 'color_implementation':'html', 'with_output_files':'0', 'pt_tot':pt_tot,'pt_formato_OK':pt_formato_OK,'pt_feasibility_OK':pt_feasibility_OK, 'task':task_number}, output_files_local_folder='output_files_TALight', rtaltoken=RTAL_PRIVATE_ACCESS_TOKEN)\n",
    "    if feedback_dict_TAL != None:\n",
    "        display(feedback_dict_TAL['feedback_string'])\n",

Esempio concreto da foglio Jupyther:
rtal_connect(RTAL_URL, 'RO_knapsack', 'check', {'elementi':['A', 'B', 'C'], 'pesi':[2, 3 ,4], 'valori':[13, 17, 19], 'Knapsack_Capacity':5, 'alias_dict':alias_dict={'opt_sol1':'opt_sol','opt_val1':'opt_val'}, 'answer_dict'={'opt_sol1':{'A','B'},'17'}:, 'color_implementation':'html', 'with_output_files':'0'}, rtaltoken=RTAL_PRIVATE_ACCESS_TOKEN)


# Con richiesta di ottenimento di un certificato di soluzione su un file in locale:
CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack check -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a sol_type=opt_sol -a opt_sol="['A', 'B']"  -awith_output_files
Jupyter: adapt correspondingly the above 

rtal_connect(RTAL, 'RO_knapsack', 'check', '"elementi": "[\'A\', \'B\', \'C\']", "pesi": "[2, 3 ,4]", "valori": "[13, 17, 19]", "Knapsack_Capacity": "5", "sol_type": "opt_sol", "opt_sol": "[\'A\', \'B\']", "with_output_files": "1"', '', '')

# Lettura da file dei parametri della sottoposizione al server TALight, invece che loro trasmissione come argomenti della chiamata di servizio. Può essere impiegato per verificare la validità della sottoposizione corrente:
ATTUALMENTE NON SUPPORTATO - ALMENO PER ORA NON SERVE
CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack check -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a sol_type=opt_sol -a opt_sol="['A', 'B']"  -f submission_filehandler=my_answer_to_problem_knapsack_task_1.txt
Jupyter: adapt correspondingly the above 



# SERVIZIO ORACLE
CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a instance_dict="{'Knapsack_Capacity': 5, 'elementi': ['A', 'B', 'C'], 'pesi': [2, 3, 4], 'valori': [13, 17, 19]}"

rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5
Jupyter: adapt correspondingly the above 

rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a request_dict="{'opt_sol': 'opt_sol_MIA', 'opt_val': 'opt_val_TUO'}" -awith_opening_message

rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a instance_dict="{'Knapsack_Capacity': 5, 'elementi': ['A', 'B', 'C'], 'pesi': [2, 3, 4], 'valori': [13, 17, 19]}"

CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a request_dict="{'opt_sol': 'opt_sol1', 'opt_val': 'opt_val1'}"
Jupyter: adapt correspondingly the above 

CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a request_dict="{'opt_val': 'opt_val1'}"
Jupyter: adapt correspondingly the above 

CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5
Jupyter: adapt correspondingly the above 

CLI:
rtal connect -x id123456_VR123456_123456789012345_nominativo_studente  RO_knapsack oracle -a pwd=tmppwd -a elementi="['A', 'B', 'C']" -a pesi="[2, 3, 4]" -a valori="[13, 17, 19]" -a Knapsack_Capacity=5 -a request_dict="{'opt_sol': 'opt_sol2', 'opt_val': 'opt_val2', 'DPtable_opt_val': 'DPtable_opt_val2'}" -a with_opening_message -a with_output_files
Jupyter: adapt correspondingly the above 

