%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: This service provides you with a pseudo-random ANN instance, i.e., an oriented graph with (1,...,n) input nodes, (1,...m) hidden layer/s, and a final output layer, each composed by (1,...,k) node/s. You can also specify whether you want to get only the random seed for the instance or also the instance file downloaded and/or its display on the screen.
    evaluator: [python,services/gimme_instance_server.py]
    args:
      input_mode:
        regex: ^(random|seed|instance_id)$
        default: random
        explain: 'choose the way to input your ANN among:' 
        explain1: '[random] the service generates a seed at random and then returns it as well as the pseudo-random instance <nodes_il,nodes_hl,nodes_out,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <nodes_il,nodes_hl,nodes_out,seed>.'
        explain3: '[instance_id] the service get the instance selected generated with make'
      nodes_il:
        regex: ^([1-9][0-9]{0,1})$
        default: 2
        explain: 'Number of nodes of the input layer.'
      nodes_hl:
        regex: ^([1-9]{1,3}|,{0,1}){1,5}$
        default: 4
        explain: Number of nodes for each hidden layer of the ANN.
        example: 2,1,3 --> this ANN will have three hidden layers; the first one composed by two nodes the second one of 3 nodes, and similarly the last one composed by three nodes.
      nodes_out:
        regex: ^([1-9][0-9]{0,1})$
        default: 1
        explain: 'Number of nodes of the output layer.'
      seed:
        explain: 'This argument is used when you hold the instance descriptor of a specific instance and want to get that instance either downloaded in local as a file and/or displayed on your terminal screen. By a \''descriptor\'' we mean a triple <m,n,seed> that you hold from previous calls to this or other services for this problem.'
        regex: ^[1-9][0-9]{5,5}$
        default: 123456
      instance_id:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: 'This argument is taken into account when input_mode=instance_id. It is used to identify a particular instance within the catalogue of hardcoded instances.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      display:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded in the \''download\'' sub-folder of the folder from which this TALight service call has been issued.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  gimme_sol_forward_prop:
    description: 'This service provides you with a solution of a forward propagation for an instance of ANN (either provided by you or generated at random). You can even call this service on an already encountered instance (also met with other services): a random instance can be reconstructed from nodes_il, nodes_hl, nodes_out and its random seed.'
    evaluator: [python, services/gimme_sol_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        default: random
        explain: 'choose the way to input your pirellone among:' 
        explain1: '[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain3: '[terminal] you enter your instance (pirellone) directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance (pirellone) encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the model_pirellone/bots/ directory. Call the service with: rtal connect model_pirellone compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_pirellone.txt.'
      nodes_il:
        regex: ^([1-9][0-9]{0,1})$
        default: 2
        explain: 'Number of nodes of the input layer.'
      nodes_hl:
        regex: ^([1-9]{1,3}|,{0,1}){1,5}$
        default: 4
        explain: Number of nodes for each hidden layer of the ANN.
        example: 2,1,3 --> this ANN will have three hidden layers; the first one composed by two nodes the second one of 3 nodes, and similarly the last one composed by three nodes.
      nodes_out:
        regex: ^([1-9][0-9]{0,1})$
        default: 1
        explain: 'Number of nodes of the output layer.'
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_sol_forward_prop:
    description: 'This service checks your solution for a single forward propagation on an instance of ANN (either provided by you or generated at random).You can even call this service on an already encountered instance (also met with other services): a random instance can be reconstructed from nodes_il, nodes_hl, nodes_out and its random seed.'
    evaluator: [python, services/check_sol_server.py]
    args:
      input_mode:
        regex: ^(random|seed|instance_id)$
        default: random
        explain: 'choose the way to input your ANN among:' 
         explain1: '[random] the service generates a seed at random and then returns it as well as the pseudo-random instance <nodes_il,nodes_hl,nodes_out,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <nodes_il,nodes_hl,nodes_out,seed>.'
        explain3: '[instance_id] the service get the instance selected generated with make'
      nodes_il:
        regex: ^([1-9][0-9]{0,1})$
        default: 2
        explain: 'Number of nodes of the input layer.'
      nodes_hl:
        regex: ^([1-9]{1,3}|,{0,1}){1,5}$
        default: 4
        explain: Number of nodes for each hidden layer of the ANN.
        example: 2,1,3 --> this ANN will have three hidden layers; the first one composed by two nodes the second one of 3 nodes, and similarly the last one composed by three nodes.
      nodes_out:
        regex: ^([1-9][0-9]{0,1})$
        default: 1
        explain: 'Number of nodes of the output layer.'
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
