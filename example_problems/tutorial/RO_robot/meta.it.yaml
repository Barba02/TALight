%YAML 1.2
---
public_folder: public
services:
  check:
    evaluator: [python, services/check_driver.py]
    description: "l'input al problem solver è una griglia rettangolare mxn dove un robot parte dalla cella (1,'A') in alto a sinistra e deve portarsi nella cella (m,'A'+(n-1)) in basso a destra evitando di passare per le celle proibite, denotate da un numero negativo nella griglia (di fatto, una matrice di interi). Le celle di valore zero non hanno alcun effetto sul robot mentre le celle di valore positivo rappresentano premi da accumulare (si sommano). Ad ogni passo il robot può spostarsi alla cella immediatamente sottostante oppure alla immediata destra di quella dove si trova attualmente. Se l'argomento `diag` del servizio è settato ad 1 allora il robot può anche muoversi diagonalmente, ossia passare direttamente dalla cella (i,j) alla cella (i+1,j+1). La prima richiesta è quella di contare quanti sono i cammini diversi che non passino per alcuna cella proibita. Il concetto di proibizione può però essere rilassato assegnado al robot un budget di spesa; un cammino sarà ammissibile se la somma dei numeri negativi incontrati lungo il percorso, invertita in segno, non eccede il budged di spesa. Tra i cammini ammissibili si potrà poi richiedere quello che raccoglie un massimo ammontare complessivo di premi. E al problem solver si potrà richiedere di calcolare il numero di cammini ottimi o anche di listarli.  Questo servizio controlla e fornisce feedback contestuale completo (oppure parziale, durante esami o allenamenti e per utenze non protette) a risposte del problem solver/trainee/studente a richieste di vario tipo tutte concernenti istanze assegnategli di questo Problema Robot in una delle sue molte varianti possibili. Queste varianti didattiche sono adatte non solo per esami ma più in generale per la verifica a promozione di comprensione reale e competenze attive (sia per un problema specifico che metodologiche); se le varianti offerte non ti bastano, resta consapevole che i problemi TALight mirano ad essere estensibili e aperti a promuovere la collaborazione tra problem-makers/insegnanti (nonchè a relativizzare e superare la separazione tra essi e i problem-solvers/trainees). Dal sistema dove organizzi i tuoi esami/esercitazioni, entro un esercizio centrato su un'istanza del Problema Robot, componi ogni tua richiesta allo studente, la cui verifica a feedback contestuale e/o posticipato intendi demandare a questo servizio TALight, semplicemente combinandone i vari argomenti specificati sotto. Solo per dare una prima idea, potrai imporre vincoli aggiuntivi su singoli elementi che ridefiniscano l'ammissibilità delle soluzioni e puoi controllare/validare tabelle di programmazione dinamica sottomesse dallo studente  (anche per varianti della domanda standard che mettano in gioco la competenza della programmazione dinamica). Viene inoltre gestita la situazione in cui il risolutore di problemi potrebbe aver ricevuto una tabella DP parziale e il suo compito era di completarla (particolarmente utile per consentire realisticamente una compilazione a mano delle tabelle su istanze sufficientemente interessanti)."    
    args:
      # sezione con i dati dell'istanza assegnati al problem-solver/studente:
      grid:
        regex: ^(.*)$
        default: "[ [ 0, 0, 0, 3, 0], [ 0, 2, 0, -1, 0], [ -1, 0, 1, 0, 0], [ 0, -1, 0, 0, 0] ]"
        explain: "la griglia è una matrice, le celle proibite sono contrassegnate con -1. Sulle altre celle riportiamo il loro valore di guadagno."
      budget:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: "un percorso non è ammissibile se la somma dei numeri negativi incontrati lungo il percorso, invertiti di segno, supera il budget."
      diag:
        regex: ^(0|1)$
        default: 0
        explain: "impostare questo flag a 1 se il robot può muoversi anche in diagonale, cioè direttamente da cella (i,j) a cella (i+1,j+1)."
      cell_from:
        regex: ^(.*)$
        default: (1,'A')
        explain: "supponendo che l'argomento `cell_from` sia impostato su (3,'C'), allora solo i percorsi che iniziano dalla cella (3,'C') sono fattibili. La riga 1 è quella in alto, la colonna 'A' è quella più a sinistra."
      cell_to:
        regex: ^(.*)$
        default: (4,'E')
        explain: "supponendo che l'argomento `cell_from` sia impostato su (3,'C'), allora solo i percorsi che terminano con la cella (3,'C') sono fattibili. La riga 1 è quella in alto, la colonna 'A' è quella più a sinistra."
      cell_through:
        regex: ^(.*)$
        default: (3,'C')
        explain: "affinché un percorso sia fattibile deve anche visitare la cella (3,'C'). La riga 1 è quella in alto, la colonna 'A' è quella più a sinistra."
      partialDP_to:
        regex: ^(.*)$
        default: "[]"
        explain: "una tabella DP parziale è quella in cui alcune voci sono state nascoste (sovrascrivendo un -1 sopra di esse). L'insegnante può decidere di fornire tali tabelle come input allo studente, e questo servizio è meglio che gli venga comunicato per fornire un feedback più personalizzato allo studente. Questo argomento è in realtà una tabella DP generica, con `partialDP_to[cell]` che misura una certa quantità relativa ai percorsi che terminano in `cell`. Ad esempio, con riferimento al funzionale `numero di cammini ammissibili`, avremmo: partialDP_to = [ [ -1, 1, -1, 1, 1], [ 1, 2, 3, 0, 1], [ 0 , 2, 5, -1, 6], [ 0, 0, 5, -1, -1] ]."
      partialDP_from:
        regex: ^(.*)$
        default: "[]"
        explain: "vedere la spiegazione sopra per l'argomento `partialDP_to`. Per lo stesso funzionale e per il `gris` sopra indicato, avremmo: partialDP_to = [ [ 16, 10, -1, 1, 1], [ 6, 6, 3, -1, 1], [ 0, 3 , -1, 2, 1], [ 0, 0, 1, 1, -1] ]."

      # sezione modalità API, sempre per far pervenire al servizio l'input ricevuto dal problem-solver:
      instance_dict:
        regex: ^(.*)$
        default: "{}"
        example: "-a instance_dict=\"{'grid':[ [ 0, 0, 0, 3, 0], [ 0, 2, 0, -1, 0], [ -1, 0, 1, 0, 0], [ 0, -1, 0, 0, 0] ],'diag':1}\""
        explain: "Ci sono due opzioni per come passare a questo servizio i dati dell'istanza assegnata allo studente: (1) usare un diverso e specifico argomento per ogni singolo oggetto che componga l'istanza, oppure (2) collezzionare tutti gli oggetti di pertinenza entro un singolo dizionario da passare tramite questo singolo argomento (`instance_dict`). La (2) semplifica l'automatizzazione dei passaggi di consegna quando chiami il servizio da un altro software, attraverso la sua API descritta dal presente meta file. Quando invece `instance_dict` è lasciato al suo valore di default (dizionario vuoto) allora il servizio assume che l'opzione (1) sia quella seguita (questa risulta preferibile quando si esplori o sperimenti il servizio, ad esempio dalla CLI). Altrimenti, la stringa assegnata all'argomento `instance_dict` viene letta come yaml per ottenere il dizionario con tutti gli oggetti di pertinenza nell'istanza affrontata dallo studente. Ovviamente, per quanto ogni problema TALight vada inteso come estendibile, le parti/oggetti/elementi che possano comporre l'istanza, ad ogni dato tempo/versione, saranno sempre prese da un insieme finito ideato ed implementato dall'istruttore e/o problem maker. Ogni tale tipo di oggetto avrà quindi un nome di riferimento standard (come `grid`, o `diag`, o `cell_from`). Questi nomi corrispondono precisamente e rigidamente ai nomi degli argomenti che impieghi quando segui l'opzione (1). Pertanto, l'intera lista di tali nomi standard, con la descrizione del tipo di oggetto che gli corrisponde, ti è rivelata quando esplori la lista completa degli argomenti."

      # sezione risposte del problem-solver/studente che il servizio è chiamato a valutare e/o fornire di feedback opportuno:
      num_paths:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: "il numero di percorsi ammissibili, come filtrato dai vincoli aggiuntivi (gli argomenti che lo influenzano, dopo `grid`, sono `diag`, `budget`, `cell_from`, `cell_to`, `cell_through`)"
      num_opt_paths:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: "il numero di percorsi ammissibili che raccolgono il massimo premio totale possibile"
      opt_val:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: "il massimo totale in premi che un percorso fattibile può raccogliere"
      opt_path:
        regex: ^(.*)$
        default: "[]"
        explain: "un percorso che raccoglie il massimo premio totale possibile"
      list_opt_paths:
        regex: ^(.*)$
        default: "[]"
        explain: "la lista di tutti i percorsi di interesse ottimi"
      DPtable_num_to:
        regex: ^(.*)$
        default: "[]"
        example: "[[0, 0, 0, 0, 0, 0], [0, 0, 13, 13, 13, 13], [0, 0, 13, 17, 17, 30], [0, 0, 13, 17, 19, 30] ]"
        explain: "la tabella di programmazione dinamica che dice il numero di percorsi dalla cella in alto a sinista alla generica cella"
      DPtable_num_from:
        regex: ^(.*)$
        default: "[]"
        example: "[[0, 0, 0, 0, 0, 0], [0, 0, 13, 13, 13, 13], [0, 0, 13, 17, 17, 30], [0, 0, 13, 17, 19, 30] ]"
        explain: "la tabella di programmazione dinamica che dice il numero di percorsi dalla cella generica alla cella in basso a destra"
      DPtable_opt_to:
        regex: ^(.*)$
        default: "[]"
        explain: "la tabella di programmazione dinamica che dice il massimo valore di un percorso ammissibile che vada dalla cella in alto a sinistra alla cella generica"
      DPtable_opt_from:
        regex: ^(.*)$
        default: "[]"
        explain: "la tabella di programmazione dinamica che dice il massimo valore di un percorso ammissibile che vada dalla cella generica alla cella in basso a destra"
      DPtable_num_opt_to:
        regex: ^(.*)$
        default: "[]"
        explain: "la tabella di programmazione dinamica che dice il numero di percorsi ottimi dalla cella in alto a sinistra alla cella generica"
      DPtable_num_opt_from:
        regex: ^(.*)$
        default: "[]"
        explain: "la tabella di programmazione dinamica che dice il numero di percorsi ottimi dalla cella generica alla cella in basso a destra"
      # sezione modalità API, sempre per far pervenire le risposte del problem-solver:
      answer_dict:
        regex: ^(.*)$
        default: ""
        example1: "-a answer_dict=\"{'opt_sol':['A', 'B'], 'opt_val':30}\""
        example2: "-a answer_dict=\"{'opt_sol1':['A', 'B'], 'opt_val1':30}\""
        explain: "Ci sono due opzioni per come passare a questo servizio i dati della risposta proveniente dallo studente che il servizio dovrà gestire (valutare e/o fornire feedback contestuale immediato e/o posticipato): (1) usare un diverso e specifico argomento per ogni singolo oggetto risposta che possa essere oggetto della conegna del task/richiesta di esercizio, (2) collezzionare tutti gli oggetti di pertinenza entro un singolo dizionario da passare tramite questo singolo argomento (`answer_dict`). La (2) semplifica l'automatizzazione dei passaggi di consegna quando chiami il servizio da un altro software, attraverso la sua API descritta dal presente meta file. Quando invece `answer_dict` è lasciato al suo valore di default (dizionario vuoto, come codificato dalla stringa '{}') allora il servizio assume che l'opzione (1) sia quella seguita (questa risulta preferibile quando si esplori o sperimenti il servizio, ad esempio dalla CLI). Altrimenti, la stringa assegnata all'argomento `answer_dict` viene letta come yaml per ottenere il dizionario con tutti gli oggetti di pertinenza alla risposta attesa dallo studente. Una risposta può contenere più oggetti (da una lista finita di tipologie di oggetti progettata dal problem maker) ciascuno identificato dal suo nome standard (come `opt_sol` o `opt_val`). Questi nomi corrispondono precisamente e rigidamente ai nomi degli argomenti che impieghi quando segui l'opzione (1). Pertanto, l'intera lista di tali nomi standard, con la descrizione del tipo di oggetto che gli corrisponde, ti è rivelata quando esplori la lista completa degli argomenti. Quando invece segui l'opzione (2), puoi usare ancora questi nomi standard come chiavi del dizionario `answer_dict`, così che il tipo di ogni oggetto nella risposta dello studente resti univocamente determinato, ma puoi anche rinominare tutti od alcuni dei tipi di oggetto ad uso di una maggiore prossimità al problem solver. Per farlo devi specificare anche l'argomento ancillare `alias_dict` che assume significato solo in tandem a questo. L'argomento `alias_dict` ti consente di introdurre nomi ad-hoc, associandoli come alias di quelli standard. Usa i tuoi nomi ad-hoc sia come chiavi del dizionario `answer_dict` che del dizionario `alias_dict`, come relativi valori nel dizionario `alias_dict` colloca i relativi nomi standard mentre nel dizionario `answer_dict` disponi i tuoi oggetti. In questo modo il feedback dato dal servizio sarà più vicino al contesto affrontato dallo studente."

      alias_dict:
        regex: ^(.*)$
        example: "{'opt_val1':'opt_val','opt_sol1':'opt_sol'}"
        default: "{}"
        explain: 'questo argomento (una stringa letta come yaml) passa un dizionario che definisce i nomi ad-hok impiegati nel contesto da cui la richiesta proviene per riferirsi a degli oggetti che compongono la risposta richiesta. I nomi ad-hoc devono quindi comparire come chiavi di tale dizionario, mentre il valore associato a ciascuno di essi è il relativo nome standard per ottenere una marcatura semantica deglio oggetti di risposta sottomessi alla valutazione.'

      # sezione con gli argomenti che specificano il formato della stringa di feedback e della confromazione generale di: (1) l'output diretto sul terminale o altro supporto adottato (Jupyther notebook, browser, ...) (2) il file di output (certificati di sottomizzione scaricati sulla macchina dello studente), (3) logs sul server che assistono nel monitoring e grading della prova od esame
      color_implementation:
        regex: ^(ANSI|html|None)$
        default: ANSI
      as_yaml_with_points:
        regex: ^(0|1)$
        default: 0
      with_positive_enforcement:
        regex: ^(0|1)$
        default: 1
      with_notes:
        regex: ^(0|1)$
        default: 1
      recall_instance:
        regex: ^(0|1)$
        default: 0
      yield_certificate_in_output_file:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0

      # sezione coi punti da assegnare al singolo task/richiesta da assegnarsi al singolo task/richiesta (tra quelli proposti da un singolo esercizio) che ha comportato la chiamata a questo servizio dal contesto di una prova, esame, o simulazione di esame:
      pt_formato_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
      pt_feasibility_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 1
      pt_consistency_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
      pt_tot:
        regex: ^(0|[1-9][0-9]*)$
        default: 10
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1

  oracle:
    evaluator: [python, services/oracle_driver.py]
    description: "dato un insieme di oggetti, ognuno con il suo peso e costo, e un budget totale (Knapsack_Capacity), questo servizio calcola e restituisce una soluzione ottimale al problema dello zaino: un sottoinsieme di valore massimo degli oggetti non eccedente il budget. Utilizzando gli argomenti del servizio è possibile imporre ulteriori vincoli alle soluzioni fattibili e porre diverse varianti didattiche della sfida, in quanto adatte sia per sessioni di formazione che per esami. È possibile richiedere al servizio anche la restituzione di tabelle dinamiche di programmazione."
    args:
      pwd:
        regex: ^(.*)$
        explain: "tale servizio non deve essere messo a disposizione degli studenti almeno durante le prove d'esame. Impostare una password privata per impedire accessi non autorizzati."

      # sezione con i dati che specificano un'istanza del problema:
      labels:
        regex: ^(.*)$
        default: "['A', 'B', 'C']"
        explain: "nomi degli oggetti"
      costs:
        regex: ^(.*)$
        default: "[2, 3, 4]"
        explain: "costi degli oggetti"
      vals:
        regex: ^(.*)$
        default: "[13, 17, 19]"
        explain: "i valori degli oggetti"
      Knapsack_Capacity:
        regex: ^(0|[1-9][0-9]*)$
        default: 5
        explain: "una soluzione (un sottoinsieme degli oggetti) è ammissibile se la somma complessiva dei costi non eccede Knapsack_Capacity"
      forced_out:
        regex: ^(.*)$
        default: "[]"
        explain: "la soluzione è tenuta ad evitare questi oggetti"
      forced_in:
        regex: ^(.*)$
        default: "[]"
        explain: "la soluzione è tenuta ad includere questi oggetti"
      instance_dict:
        regex: ^(.*)$
        default: "{}"
        example: "-a instance_dict=\"{'labels':['A','B','C'],'costs':[3,5,7],'vals':[2,4,5], 'Knapsack_Capacity':30}\""
        explain: "Vi sono due opzioni per come passare a questo servizio i dati dell'istanza assegnata allo studente: (1) usare un diverso e specifico argomento per ogni singolo oggetto che componga l'istanza, oppure (2) collezzionare tutti gli oggetti di pertinenza entro un singolo dizionario da passare tramite questo singolo argomento (`instance_dict`). La (2) è più indicata quando chiami il servizio da un altro software, attraverso la sua API descritta dal presente meta file. Quando invece `instance_dict` è lasciato al suo valore di default (la stringa vuota) allora il servizio assume che l'opzione (1) sia quella seguita (questa risulta preferibile quando si esplori o sperimenti il servizio, ad esempio dalla CLI). Altrimenti, la stringa assegnata all'argomento `instance_dict` viene letta come yaml per ottenere il dizionario con tutti gli oggetti di pertinenza nell'istanza affrontata dallo studente. Ovviamente, per quanto ogni problema TALight vada inteso come estendibile, le parti/oggetti che possano comporre l'istanza, ad ogni dato tempo/versione, saranno sempre prese da un insieme finito ideato ed implementato dall'istruttore e/o problem maker. Ogni tale tipo di oggetto avrà quindi un nome di riferimento standard (come `costs` o `vals`). Questi nomi corrispondono precisamente e rigidamente ai nomi degli argomenti che impieghi quando segui l'opzione (1). Pertanto, l'intera lista di tali nomi standard, con la descrizione del tipo di oggetto che gli corrisponde, ti è rivelata quando esplori la lista completa degli argomenti."

      # sezione che caratterizza la risposta richiesta all'oracolo e quali siamo i nomi ad-hoc da associare ad ogni singolo oggetto che la compone (ovviamente resta possibile impiegare i nomi standard):
      request_dict:
        regex: ^(.*)$
        default: "{}"
        explain: "questo argomento (una stringa letta come yaml) passa un dizionario che specifica quali oggetti soluzione debbano essere ricompresi nel responso dell'orcolo. Lasciando il valore di default (dizionario vuoto) l'oracolo fornirà ogni tipologia di oggetto prevista e per la quale un solutore sia già stato implementato. Altrimenti, per ogni associazione `key`-`value` nel dizionario, il servizio `oracle` computerà un oggetto il cui tipo è specificato dal `value` (che è sempre tenuto ad essere un nome standard, ad esempio 'opt_sol') e che verrà chiamata `value` (ad esempio 'opt_sol1') nei riferimenti ad essa. Questo semplice meccanismo consente una rinominazione prescritta dal chiamante. Attualmente i possibili valori per `value` sono i seguenti:"
        explain1: "[num_paths] il numero di percorsi ammissibili, come filtrato dai vincoli aggiuntivi (gli argomenti che lo influenzano, dopo `grid`, sono `diag`, `budget`, `cell_from`, `cell_to`, `cell_through`)"
        explain2: "[num_opt_paths] il numero di percorsi ammissibili che raccolgono il massimo premio totale possibile"
        explain3: "[opt_val] il massimo totale in premi che un percorso fattibile può raccogliere"
        explain4: "[opt_path] un percorso che raccoglie il massimo premio totale possibile"
        explain5: "[list_opt_paths] la lista di tutti i percorsi di interesse ottimi"
        explain6: "[DPtable_num_to] la tabella di programmazione dinamica che dice il numero di percorsi dalla cella in alto a sinista alla generica cella"
        explain7: "[DPtable_num_from] la tabella di programmazione dinamica che dice il numero di percorsi dalla cella generica alla cella in basso a destra"
        explain8: "[DPtable_opt_to] la tabella di programmazione dinamica che dice il massimo valore di un percorso ammissibile che vada dalla cella in alto a sinistra alla cella generica"
        explain9: "[DPtable_opt_from] la tabella di programmazione dinamica che dice il massimo valore di un percorso ammissibile che vada dalla cella generica alla cella in basso a destra"
        explain10: "[DPtable_num_opt_to] la tabella di programmazione dinamica che dice il numero di percorsi ottimi dalla cella in alto a sinistra alla cella generica"
        explain11: "[DPtable_num_opt_from] la tabella di programmazione dinamica che dice il numero di percorsi ottimi dalla cella generica alla cella in basso a destra"

      # sezione con argomenti che specificano i formati degli output, diretti o su log (sul server per la valutazione completa) nell'ambito di un esame o di una simulazione d'esame:
      as_yaml:
        regex: ^(0|1)$
        default: 0
      recall_instance:
        regex: ^(0|1)$
        default: 0
      recall_request:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0
      with_output_files:
        regex: ^(0|1)$
        default: 0
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    description: "la sinossi del servizio viene utilizzata dal risolutore di problemi per esplorare i servizi di un problema TALight, inclusa la sinossi stessa (come stai facendo in questo momento). Le informazioni su ciascun servizio sono tratte dal file meta.yaml che definisce l'interfaccia del problema. Questo è lo stesso file che stipula il contratto tra il client rtal e il server rtald, o anche il contratto tra un problem maker che progetta il problema e un problem maker che implementa i suoi servizi. In realtà, `meta.yaml` è un collegamento simbolico che punta al metafile impostato come predefinito da chi ha distribuito il problema sul server da cui stai ricevendo queste informazioni; tuttavia, usando l'argomento `metafile` puoi richiedere altri metafile, possibilmente offrendo le stesse informazioni in altre lingue. Invece, l'argomento `lang` ha effetto solo sulla lingua usata durante la formattazione di queste informazioni specifiche sul problema in questo foglio. In fondo a questo foglio di aiuto per la sinossi del servizio stesso, così come per qualsiasi altro foglio di servizio, trovi un comodo elenco di tutti i servizi disponibili per il problema dato (attualmente, %(problema)s): se vuoi per saperne di più su uno di essi, specifica il suo nome nell'argomento `service` nella tua prossima chiamata alla sinossi del servizio." 
    args:
      service:
        regex: ^(synopsis|check|oracle|[a-zA-Z0-9_]+)$
        default: synopsis
        explain: "qualsiasi stringa senza spazi ma intesa a specificare uno dei servizi del problema %(problem)s"
      metafile:
        regex: ^(default|en|it|[a-zA-Z0-9_]+)$
        default: default
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it|[a-zA-Z0-9_]+)$
        default: en
...
