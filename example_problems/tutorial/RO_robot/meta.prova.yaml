%YAML 1.2
---
public_folder: public
services:
  check:
    evaluator: [python, services/check_driver.py]
    description: "the input to the problem solver is an mxn grid some of whose cells are forbidden, while the others may have a gain value associated. This service provides feedback on the answer of the problem solver to one question out of many possible ones. The question could be the number of feasible paths between two cells of the grid, where a path is feasible if it traverses no forbidden cell and always move from one cell to the one just below or on its immediata right (diagonal moves might also be allowed setting the argument `diag`). Other questions currently served: the maximum value collected by a feasible path, the number of optimal paths. The service can also be asked to check the correctness of dynamic programming (DP) tables. In particular, the problem solver might have received a partial DP table and her task was to to complete it."
    args:
      # section with the instance assigned to the problem-solver/student:
      field:
        regex: ^(.*)$
        default: "[ [ 0, 0, 0, 3, 0], [ 0, 2, 0, -1, 0], [ -1, 0, 1, 0, 0], [ 0, -1, 0, 0, 0] ]"
        explain: the grid is a matrix, the forbiddend cells are tagged with -1. On the other cells we report their gain value.
      diag:
        regex: ^(0|1)$
        default: 0
      partialDP_to:
        regex: ^(.*)$
        default: "[ [ -1, 1, -1, 1, 1], [ 1, 2, 3, 0, 1], [ 0, 2, 5, -1, 6], [ 0, 0, 5, -1, -1] ]"
        explain: the grid is a matrix, the forbiddend cells are tagged with -1. On the other cells we report their gain value.
      partialDP_from:
        regex: ^(.*)$
        default: "[ [ 16, 10, -1, 1, 1], [ 6, 6, 3, -1, 1], [ 0, 3, -1, 2, 1], [ 0, 0, 1, 1, -1] ]"
        explain: the grid is a matrix, the forbiddend cells are tagged with -1. On the other cells we report their gain value.
      cell_from:
        regex: ^(num_paths|opt_val|opt_path|opt_path_with_val|list_opt_paths|DPtable_to|DPtable_from)$
        default: "(C,3)"
        explain: "only the paths that start from cell (C, 3) are feasible. Row A is the one at the top, column 1 is the leftmost one."
      cell_to:
        regex: ^(num_paths|opt_val|opt_path|opt_path_with_val|list_opt_paths|DPtable_to|DPtable_from)$
        default: "(C,3)"
        explain: "only the paths that start from cell (C, 3) are feasible. Row A is the one at the top, column 1 is the leftmost one."
      cell_through:
        regex: ^(num_paths|opt_val|opt_path|opt_path_with_val|list_opt_paths|DPtable_to|DPtable_from)$
        default: "(C,3)"
        explain: "only the paths that start from cell (C, 3) are feasible. Row A is the one at the top, column 1 is the leftmost one."
      sol_type:
        regex: ^(num_paths|opt_val|opt_path|opt_path_with_val|list_opt_paths|DPtable_to|DPtable_from)$
        default: num_paths
      opt_sol:
        regex: ^(.*)$
        default: "['A', 'B']"
      opt_val:
        regex: ^(.*)$
        default: 30
      DPtable:
        regex: ^(.*)$
        default: "[[0, 0, 0, 0, 0, 0], [0, 0, 13, 13, 13, 13], [0, 0, 13, 17, 17, 30], [0, 0, 13, 17, 19, 30] ]"
      name_of_opt_val:
        regex: ^(.*)$
        default: opt_val
      name_of_opt_sol:
        regex: ^(.*)$
        default: opt_sol
      name_of_DPtable:
        regex: ^(.*)$
        default: DPtable
      # section with the arguments that specify the format of the feedback string and the forms of the outputs, either direct, or on output file (certificates sent to the local machine), or on logs (on the server for full evaluation)
      color_implementation:
        regex: ^(ANSI|html|None)$
        default: ANSI
      as_yaml_with_points:
        regex: ^(0|1)$
        default: 0
      yield_certificate_in_output_file:
        regex: ^(0|1)$
        default: 0
      recall_input:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0
      # section with the points assigned to a single task of an exercise in the context of an exam or exam simulation:
      pt_formato_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
      pt_feasibility_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 1
      pt_tot:
        regex: ^(0|[1-9][0-9]*)$
        default: 10
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
  oracle:
    evaluator: [python, services/oracle_driver.py]
    description: "given a set of objects, each one with its weight and cost, and a total budget (Knapsack_Capacity), this service computes and returns an optimal solution to the knapsack problem: a maximum value subset of the objects not exceeding the budget. Using the arguments of the service it is possible to impose further constraints on the feasible solutions. The service can also be asked to return a dynamic programming (DP)."
    args:
      pwd:
        regex: ^(.*)$
        explain: this service should not be let available to students at least during the exams. Set a private password in order to prevent unauthorized access.
      # section with a possible instance to the problem:
      elementi:
        regex: ^(.*)$
        default: "['A', 'B', 'C']"
      pesi:
        regex: ^(.*)$
        default: "[2, 3, 4]"
      valori:
        regex: ^(.*)$
        default: "[13, 17, 19]"
      Knapsack_Capacity:
        regex: ^(0|[1-9][0-9]*)$
        default: 5
      elementi_proibiti:
        regex: ^(.*)$
        default: "[]"
      elementi_obbligati:
        regex: ^(.*)$
        default: "[]"
      # section characterizing the seeked for answer and the naming for its variables:
      sol_type:
        regex: ^(opt_sol|opt_val|opt_sol_with_val|DPtable|all)$
        default: all
      name_of_opt_val:
        regex: ^(.*)$
        default: opt_val
      name_of_opt_sol:
        regex: ^(.*)$
        default: opt_sol
      name_of_DPtable:
        regex: ^(.*)$
        default: DPtable
      # section with arguments that specify the formats of the outputs, either direct or on logs (on the server for full evaluation) in the context of an exam or exam simulation:
      as_yaml:
        regex: ^(0|1)$
        default: 0
      recall_input:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
