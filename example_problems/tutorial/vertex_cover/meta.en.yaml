%YAML 1.2
---
public_folder: public
services:
  
  ##
  ## SOLVE
  ##
  solve:
    evaluator: [python, services/solve_driver.py]
    description: 'This service provides you with a solution for a given instance of the Vertex Cover problem. You can either upload the instance file on the `instance` filehandler of the service, using the `-f` option of the `connect` subcommand of `rtal`, or try to input your instance directly from the terminal (supported only in `only_strings` format) once the service has started. You may also specify a pseudo-random instance by providing its instance description for a selected generator. This last option might ease your calling this service on instances encountered with other services.'
    files:
      - instance
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_coveer.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-9][0-9]|100)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      weighted:
        regex: ^(0|1)$
        default: 0
        explain: 'Generates a graph with weighted nodes'
      sol_type:
        regex: ^(minimum|approx|both)$
        default: both
        explain: 'Choose the type of vertex cover solution you want: "minimum" returns a minimum vertex cover for the graph, "approx" returns a 2-approximated vertex cover'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot the graph'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
  
  ##
  ## CHECK_MINIMUM_VC --> L'utente deve fornire il suo vc e il sistema dice se Ã¨ corretto o no
  ##
  check_minimum_vc:
    evaluator: [python, services/check_minimum_vc_driver.py]
    description: 'This service checks if your vertex cover it`s the minimum vertex cover for the given graph or not'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-4][0-9]|50)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      weighted:
        regex: ^(0|1)$
        default: 0
        explain: 'Generates a graph with weighted nodes'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph with minimum vertex cover'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      vc_sol_val:
        regex: ^.*^ # Deve essere una stringa contenente i (supposti) vertici del vc
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the vertices of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given vertex cover instance is sequence o non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
        
  ##
  ## CHECK_MINIMUM_WEIGHT_VC --> L'utente deve fornire il suo vc e il sistema dice se Ã¨ corretto o no
  ##
  check_minimum_weight_vc:
    evaluator: [python, services/check_minimum_weight_vc_driver.py]
    description: 'This service checks if your vertex cover it`s the minimum weight vertex cover for the given graph or not'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-4][0-9]|50)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph with minimum weight vertex cover'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      vc_sol_val:
        regex: ^.*^ # Deve essere una stringa contenente i (supposti) vertici del vc
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the vertices of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given vertex cover instance is sequence o non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## CHECK_APPROX_VC --> L'utente deve fornire il suo vc e il sistema dice se Ã¨ corretto o no
  ##
  check_approx_vc:
    evaluator: [python, services/check_approx_vc_driver.py]
    description: 'This service checks if your approximation of the weighted vertex cover it`s correct or not'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^(0|[1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-9][0-9]|1[0-2][0-9]|130)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph with 2-approximated vertex cover'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      vc_sol_val:
        regex: ^.*^ 
        #regex: ^\S.(0|(\(\d*,\d*\) )*)+\S$ 
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the vertices of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given vertex cover instance is sequence of non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## CHECK_APPROX_WEIGHTED_VC --> L'utente deve fornire il suo vc e il sistema dice se Ã¨ corretto o no
  ##
  check_approx_weighted_vc:
    evaluator: [python, services/check_approx_weighted_vc_driver.py]
    description: 'This service checks if your approximation of the vertex cover it`s correct or not'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^(0|[1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-9][0-9]|1[0-2][0-9]|130)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph with the solution of the approximated vertex cover'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      vc_sol_val:
        regex: ^.*^ 
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the vertices of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given vertex cover instance is sequence of non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## CHECK_MAX_INDSET --> L'utente deve fornire il suo vc e il sistema dice se Ã¨ corretto o no
  ##
  check_max_indset:
    evaluator: [python, services/check_max_indset_driver.py]
    description: 'This service checks if the solution you provide is an independent set for the given graph'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-4][0-9]|50)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph with maximum independet set'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      vc_sol_val:
        regex: ^.*^ # Deve essere una stringa contenente i (supposti) vertici del vc
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the vertices of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given vertex cover instance is sequence of non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## CHECK_MAX_WEIGHT_INDSET --> L'utente deve fornire il suo vc e il sistema dice se Ã¨ corretto o no
  ##
  check_max_weight_indset:
    evaluator: [python, services/check_max_weight_indset_driver.py]
    description: 'This service checks if the solution you provide is an independent set for the given graph'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-4][0-9]|50)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot graph with maximum independet set'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      vc_sol_val:
        regex: ^.*^ # Deve essere una stringa contenente i (supposti) vertici del vc
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the vertices of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given vertex cover instance is sequence of non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## TELL_ME_ABOUT_VC_SIZE
  ##
  tell_me_about_vc_size:
    evaluator: [python, services/tell_me_about_vc_size_driver.py]
    description: 'This service tells if the given graph has a vertex cover of size at least k'
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a vertex_cover instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(simple|with_info|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
      num_vertices:
        #regex: ^([1-9][0-9]*)$
        regex: ^([1-9]|[1-4][0-9]|50)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      plot:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot the graph'
      plot_sol:
        regex: ^(0|1)$
        default: 0
        explain: 'Plot the solution for the minimum size of the vertex cover'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisely 6 digits'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      opt_val_sol:
        regex: ^(\d*)$
        default: 0
        explain: 'Use this argument to tell the service what you conjecture to be the minimum size of the vertex cover. Leave this argument to its default value in case you have non conjecture and only intend to use
 this service to be told about the optimum value. The solution for a given vertex cover instance a  non-negative integer numbers.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## GIMME_INSTANCE
  ##
  gimme_instance:
    evaluator: [python,services/gimme_instance_driver.py]
    description: 'An instance of the Vertex Cover problem consists of an indirect graph, defined by parameters such as the number of vertices used and the seed that generates edges of the graph. Call this service (`gimme_instance`) to get an instance of your likings in one of the supported formats. The instance may come from different sources (randomly generated or belonging to a catalog present on the server). The service can be used to get a random instance or an instance from the catalog. \ NYou can ask to save the instance in a file on your local machine and / or view it on the monitor. For your convenience, the format of this instance can be specified via the `instance_format` argument.'
    args:
      source:
        regex: ^(catalogue|randgen_1)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''collage.tar\'' you get downloaded on your machine by issuing `rtal get vollage`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''vertex_cover.tar\'' you get downloaded on your machine by issuing `rtal get vertex_cover`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      num_vertices:
        regex: ^([1-9][0-9]*)$
        default: 8
        explain: 'Number of vertices that make up the graph'
      num_edges:
        regex: ^([1-9][0-9]*)$
        default: 11
        explain: 'Number of edges that connect the vertices of the graph'
      weighted:
        regex: ^(0|1)$
        default: 0
        explain: 'Generates a graph with weighted nodes'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      instance_format:
        regex: ^(with_info|simple|vc_dat)$
        default: with_info
        explain: 'Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.'
        explain1: '[simple] Contains only the graph'
        explain2: '[with_info] Contains the graph with the number of the vertices'
        explain2: '[vertex_cover_dat] Contains the graph with the number of the vertices in .dat format'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: 'If this flag is set to 1 then the instance file is listed by the service.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en

  ##
  ## EVAL_MINIMUM_VC
  ##
  eval_minimum_vc:
    description: 'This service evaluates your code which calculates the minimum vertex cover for a given graph.'
    evaluator: [python, services/eval_minimum_vc_driver.py]
    files:
      - sourcecode
    args:
      goal:
        explain: 'Set your goal (efficient includes also correct).'
        regex: ^(feasible|minimum)$
        default: feasible
      code_lang: 
        explain: 'The more we know about your bot the better we can estimate the efficiency of your algorithm.'
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: 'Specify the numeric code (any integer in the interval [100000,999999]) to replicate the very same behaviour as in a previous call to this service. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and proceeds deterministically from that seed.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: hardcoded

  ##
  ## EVAL_MINIMUM_WEIGHT_VC
  ##
  eval_minimum_weight_vc:
    description: 'This service evaluates your code which calculates the minimum vertex cover for a given graph.'
    evaluator: [python, services/eval_minimum_weight_vc_driver.py]
    files:
      - sourcecode
    args:
      goal:
        explain: 'Set your goal (efficient includes also correct).'
        regex: ^(feasible|minimum)$
        default: feasible
      code_lang: 
        explain: 'The more we know about your bot the better we can estimate the efficiency of your algorithm.'
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: 'Specify the numeric code (any integer in the interval [100000,999999]) to replicate the very same behaviour as in a previous call to this service. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and proceeds deterministically from that seed.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: hardcoded

  ##
  ## EVAL_APPROX_VC
  ##
  eval_approx_vc:
    description: 'This service evaluates your code which calculates the 2-approximated vertex cover for a given graph.'
    evaluator: [python, services/eval_approx_vc_driver.py]
    files:
      - sourcecode
    args:
      goal:
        explain: 'Set your goal (efficient includes also correct).'
        regex: ^(feasible|big_instances)$
        default: feasible
      code_lang: 
        explain: 'The more we know about your bot the better we can estimate the efficiency of your algorithm.'
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: 'Specify the numeric code (any integer in the interval [100000,999999]) to replicate the very same behaviour as in a previous call to this service. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and proceeds deterministically from that seed.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: hardcoded

  ##
  ## EVAL_APPROX_WEIGHTED_VC
  ##
  eval_approx_weighted_vc:
    description: 'This service evaluates your code which calculates the 2-approximated weighted vertex cover for a given graph.'
    evaluator: [python, services/eval_approx_weighted_vc_driver.py]
    files:
      - sourcecode
    args:
      goal:
        explain: 'Set your goal (efficient includes also correct).'
        regex: ^(small_instances|big_instances)$
        default: small_instances
      code_lang: 
        explain: 'The more we know about your bot the better we can estimate the efficiency of your algorithm.'
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: 'Specify the numeric code (any integer in the interval [100000,999999]) to replicate the very same behaviour as in a previous call to this service. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and proceeds deterministically from that seed.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: hardcoded


  ##
  ## ALTRO
  ##
  help:
    evaluator: [python, services/help/help_driver.py]
    args:
      page:
        regex: ^(vertex_cover|solve|check_minimum_vc|check_approx_vc|eval_minimum_vc|eval_2approx_vc|gimme_instance|help|synopsis)$
        default: help
      lang:
        regex: ^(en|it)$
        default: en

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: 'Any string without space characters but meant to specify one of the services of the problem %(problem)s'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
