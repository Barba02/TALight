%YAML 1.2
---
public_folder: public
services:
  recognize_proper_colorings:
    description: "This service gives you a graph and a coloring of its nodes. You are invited to tell whether the coloring is proper (that is, any two adjacent vertices have different color) or not. The coloring is always proper (improper, resp.) when the service is called with the argument \\'coloring\\' set to \\'proper\\' (to \\'improper\\', resp.)."
    evaluator: [python3, services/recognize_proper_colorings_server.py]
    args:
      num_nodes:
        regex: ^([1-9][0-9]{0,2}|1000)$
      num_arcs:
        regex: ^([1-9][0-9]{0,3}|10000)$
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      coloring:
        regex: ^(proper|improper|surprise)$
        default: surprise      	
      goal:
        regex: ^(yes_no|give_violated_arc)$
        default: give_violated_arc
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_recognize_proper_colorings:
    description: This service evaluates the correctness and efficiency of your bot for recognizing proper colorings.
    evaluator: [python3, services/eval_recognize_proper_colorings_server.py]
    args:
      num_nodes:
        regex: ^([1-9][0-9]{0,2}|1000)$
      num_arcs:
        regex: ^([1-9][0-9]{0,3}|10000)$
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      coloring:
        regex: ^(improper|surprise)$
        default: surprise      	
      commitment:
        regex: ^(yes_no|give_violated_arc)$
        default: yes_no
      goal:
        regex: ^(correct|linear)$
        default: correct
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  yield_proper_colorings:
    description: This service gives you a graph and asks for a proper k-coloring of its nodes. The service will check that your coloring is proper, and that it uses at most k colors.
    evaluator: [python3, services/yield_proper_colorings_server.py]
    args:
      num_nodes:
        regex: ^([1-9]|1[0-9]|20)$
      num_arcs:
        regex: ^([1-9][0-9]{0,1}|100)$
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      k:
        regex: ^(num_nodes|[1-9][0-9]{0,2}|1000)$
        default: num_nodes      	
      goal:
        regex: ^(yes_no|give_coloring|give_minimal_uncolorable_induced_subgraph)$
        default: give_coloring
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  yield_proper_2colorings:
    description: This service gives you a graph and asks for a proper 2-coloring of its nodes. The service will check that your coloring is proper, and that it uses at most 2 colors.
    evaluator: [python3, services/yield_proper_colorings_server.py]
    args:
      num_nodes:
        regex: ^([1-9]|1[0-9]|20)$
      num_arcs:
        regex: ^([1-9][0-9]{0,1}|100)$
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      k:
        regex: ^2$
        default: 2      	
      goal:
        regex: ^(yes_no|give_coloring|give_minimal_uncolorable_induced_subgraph)$
        default: give_coloring
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_yield_proper_2coloring:
    description: This service evaluates the correctness and efficiency of your bot for recognizing the 2-colorability of graphs.
    evaluator: [python3, services/yield_proper_colorings_server.py]
    args:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      commitment:
        regex: ^(yes_no|give_violated_arc|give_minimal_uncolorable_induced_subgraph)$
        default: yes_no
      goal:
        regex: ^(correct|linear)$
        default: correct
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python3, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
...
