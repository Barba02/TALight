%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: 'This service provides you with instances of the Asteroid problem, i.e., 0/1-matrices with the given number of rows (argument m) and columns (argument n). You have two main options when calling this service:\n    [source=catalogue_name] to get the instance with a specific id out from the named catalogue of hardcoded instances.\n    [source=random] to get the pseudo-random instance for a given seed. As seed, you can use any integer from 100000 to 999999 or let the service choose the seed at random (seed=random_seed). When you want to recall a 0/1-matrix you have already met with this or other services, you only need to recall its seed and the other details in its instance descriptor. By the \''instance descriptor\'' of a pseudo-random Asteroid instance we mean the triple <m,n,seed>.\n   The 0/1-matrix comprising the instance is returned by the service in the form of a stream. You may ask for this stream to get downloaded in a file on your local machine and/or displayed on the screen. Our format for streams storing 0/1-matrices is the following: the first line contains the two integers m and n; then follow m lines, one for each row. The i-th of these lines displays the n binary digits of the i-th row of the matrix, the j-th bit being the element in the j-th column. It is assumed that the row and column indexes start from 1.'
    evaluator: [python,services/gimme_instance_server.py]
    args:
      source:
        regex: ^(random|catalogue)$
        default: random
        explain: 'choose an option among:' 
        explain1: '[random] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain2: '[catalogue] the service will return an instance taken from a catalogue of hardcoded instances (the catalogue named \''catalogue\''). More precisely, the instance returned is the one with the given instance_id.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the 0,1-matrix which reports the positions of the asteroids.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the 0,1-matrix which reports the positions of the asteroids.
      seed:
        explain: 'Set up this argument when you hold the seed and instance descriptor of the specific instance that you want to be produced by the service (whether downloaded in local as a file or displayed on your terminal screen). By an \''instance descriptor\'' we mean a triple <m,n,seed> that you may have got from previous calls to this or other services for this problem. When this argument is left to its default value (random_seed) then the service first chooses a seed at random (and communicates it to the user) and then produces the pseudo-random instance <m,n,seed>.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument source. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      instance_format:
        regex: ^(only_matrix|with_m_and_n|gmpl_dat)$
        default: only_matrix
        explain: choose the encoding for the input file.
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the \''output\'' sub-folder of the folder from which this TALight service call has been issued (or into the folder whose fullpath is specified by means of the -o flag).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  solve:
    evaluator: [python, services/solve_server.py]
    description: 'This service provides you with a solution for a given instance of the Asteroid problem. You can either upload the instance file on the `instance` filehandler of the service, using the `-f` option of the `connect` subcommand of `rtal`, or specify another source for the instance. In the second case, you can try to directly input your instance from the terminal (supported only in `only_matrix` format) once the service has started. You may also specify an instance from the catalogue, or a pseudo-random instance by providing its instance description for a selected generator. This last option might ease your calling this service on instances encounterd with other services.'
    files:
      - instance
    args:
      source:
        regex: ^(catalogue|terminal|random)$
        default: random
        explain: 'To send to the service an instance contained in a file sitting on your machine, you do not need to set this argument: just call the service with:\n       rtal connect model_asteroid solve -finstance=fullpath_of_your_instance_file\n    With this call without any further arguments, the service assumes that the first m lines of the instance file are just the m rows of the instance given as input. (If the format of your file differs from `only_matrix` then, please, specify it via the argument `instance_format`.) The source argument is used only when you do not associate a local file to the instance filehandler. If so, it determines the way your instance is input to the service:' 
        explain1: '[terminal] you enter your instance (just m rows, one per line; no other formats supported) directly by either typing it directly or through cut and paste.'
        explain2: '[random] the service works on the pseudo-random instance `random(<m,n,seed>)`. In this case you should specify the values for the service arguments comprising the instance descriptor, when different from their defaul values.'
        explain3: '[catalogue] the service works on an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the named catalogue of hardcoded instances. The whole catalogue is public, that is, it is contained in the file \''model_asteroid.tar\'' you get downloaded on your machine by issuing `rtal get model_asteroid`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(with_m_and_n|only_matrix|gmpl_dat)$
        default: only_matrix
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[with_m_and_n] the first line contains the two integers m and n separated by spaces, where m and n are the size of the matrix; then follow m lines, that are the rows of the matrix.'
        explain2: '[only_matrix] like the above, but with the first line omitted.'
        explain3: '[gmpl_dat] a possible datafile format for AMPL/GMPL use that we have decided to support.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the 0,1-matrix which reports the positions of the asteroids.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the 0,1-matrix which reports the positions of the asteroids.
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
      sol_format:
        regex: ^(only_val|seq|subset)$
        default: seq
        explain: 'specify what meant by a solution and how it should be encoded. Choose one among the following options:'
        explain1: '[only_val] the solution is just a number identifying how many laser beams you have to shoot in order to destroy all of the asteroids;'
        explain2: '[seq] the solution is a list of commands;'
        explain3: '[subset] the solution is a subset of the row and column laser beams (i.e., as two incidence 0/1-vectors of length m and n, respectively).'
        example: '\n [only_val] 4 \n [seq] r2 c4 r3 r1 \n [subset]: 1 0 1\n 0 1 1 if the matrix is 3x3'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the solution is downloaded as a file into the folder whose fullpath is specified by means of the -o flag (if this path is relative it moves from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_sol:
    evaluator: [python, services/check_sol_server.py]
    description: 'This service checks and validates your solution for a given instance of the Asteroid problem (input: 0/1-matrices with the given number of rows (argument m) and columns (argument n)). In case your solution is not correct then you get the needed feedback. Besides the solution you must submit also the file with the instance in one of the supported formats. Examples for the supported formats of the instance file can be found in the `instances_catalogue` directory contained in the archive downloaded with `rtal get model_asteroid`, and further examples can be obtained from the service `gimme_instance`. You have two options on how to submit an instance: either use the `instance_id` argument to specify an instance within the catalogue or upload a local file through the `instance` filehandler. When you do both then the service checks that the two files have the same content. You must specify the `instance_id` argument when you want to use your personal TALight token to make a submission. Depending on the value for the argument `sol_format`, the service only checks the optimum value for this optimization problem, or it also checks the feasibility and optimality of the solution offered by you in one of the supported formats (you can get examples of such formats through the service `solve`). When you are enrolled to a course or exam that ask for it, then you may have been assigned a personal TALight token. When calling this service using your token you submit your solution for single instances of the Asteroid problem in the sense that the system keeps track of the outcomes of your submissions to this service assigning them to you via your personal token. In order to submit, it may be required that at the service call you supply also the source code implementing your solving algorithm (if so, use the `sourcecode` filehandler). After having assessed a few solutions produced by you, use the scripts in the scripts folder in order to submit the whole of your solutions. These scripts automate for you the process of submitting your solutions one by one and may also define the dataset as a convenient subset of the catalogue. You may first have a dry run launching the script without personal token, just to check that your solutions are correct as well as your general calling to the service. In any case, be told that the positive submissions are never overwritten by the bad ones.'
    explain: 'Call the service with:\n   rtal connect model_asteroid check_sol -finstance=fullpath_of_your_instance_file -fsolution=fullpath_of_your_solution_file\nIf the format of your instance file differs from `only_matrix` then, please, specify it via the argument `instance_format`.\nIf the format of your solution file differs from `seq` then, please, specify it via the argument `sol_format`.'
    example1: [ to get assesment of a solution produced by you for a certaint instance, 'Call the service with:\n       rtal connect model_asteroid check_sol -asol_format=subset -finstance=instances_catalogue/all_instances/instance_003.only_matrix.txt -fsolution=my_sols/all_instances/solution_003.subset.txt']
    example2: [ 'to get credits for this instance in case of feasibility/optimality of the solution submitted', 'Call the service with:\n       rtal connect -x <MY_TOKEN> model_asteroid check_sol -fsourcecode=./my_model_asteroid_solver.py -asol_format=subset -ainstance_id=3 -fsolution=my_sols/all_instances/solution_003.subset.txt']
    files:
      - instance
      - solution
      - sourcecode
    args: 
      instance_id:
        regex: ^([1-9][0-9]*|0)$
        regex-explained: any positive natural (in its decimal representation). The default value of 0 can be used only when a local file is associated to the `instance` filehandler. 
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 0
        explain: 'This argument is taken into account when other than 0. In this case, the instance is taken from the catalogue and, if a local file has been associated to the `instance` filehandler, then the service checks that the two files have the very same content. In case not, the service stops with a warning. We reacall that the whole catalogue is public, that is, it is contained in the file \''model_asteroid.tar\'' you get downloaded on your machine by issuing `rtal get model_asteroid`.'
      instance_format:
        regex: ^(with_m_and_n|only_matrix|gmpl_dat)$
        default: only_matrix
        explain: Use this argument to specify the format of the .txt file containing the instance of reference. (Examples for the supported formats of the instance file can be found in the `instances_catalogue` directory or obtained from the service `gimme_instance`.)
        explain1: '[with_m_and_n] the first line contains the two integers m and n separated by spaces, where m and n are the size of the matrix; then follow m lines, that are the rows of the matrix.'
        explain2: '[only_matrix] like the above, but with the first line omitted.'
        explain3: '[gmpl_dat] a possible datafile format for AMPL/GMPL use that we have decided to support.'
      sol_format:
        regex: ^(only_val|seq|subset)$
        default: seq
        explain: 'specify what meant by a solution and how it should be encoded. Choose one among the following options:'
        explain1: '[only_val] the solution is just a number identifying how many laser beams you have to shoot in order to destroy all of the asteroids;'
        explain2: '[seq] the solution is a list of commands;'
        explain3: '[subset] the solution is a subset of the row and column laser beams (i.e., as two incidence 0/1-vectors of length m and n, respectively).'
        example: '\n [only_val] 2 \n [seq] r2 c4 \n [subset]:\n 1 0 1\n\n 0\n 1\n 1\n\n if the matrix is 3x3'
        note: In case you are registering the results of the service call on the server via your TALight token, then the value of this argument is also stored as the `only_val` option is clearly the weakest one.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_feasibiliy_of_your_laser_beams:
    description: We give you a matrix with asteroids and you have to shoot out sufficient laser beams in order to destroy all of the asteroids. In other words, your task is to identify a set of rows and columns of the matrix that cover all the asteroids. This service is meant to verify this property.
    evaluator: [python,services/check_sol_server.py]
    args:
      source:
        regex: ^(random|catalogue1|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|catalogue1|terminal|TA_send_files_bot)$
        default: random
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[random] the service uses the pseudo-random instance <m,n,seed>.'
        explain2: '[catalogue1] the service uses the hardcoded instance of the given instance_id as taken from the catalogue of hardcoded instances named catalogue1.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -asource=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the 0,1-matrix which reports the positions of the asteroids.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the 0,1-matrix which reports the positions of the asteroids.
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to reproduce an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument source. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      sol_style:
        regex: ^(seq|subset)$
        default: seq
        explain: 'choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively.'
        example: '[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3'
      goal:
        regex: ^check_feasibiliy$
        default: check_feasibiliy
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_optimality_of_your_laser_beams:
    description: We give you a matrix with asteroids and you have to return the minimum number of laser beams capable of destroying them all. You can use a laser beam to destroy all asteroids laying on a same row or column of the matix. This service checks that no solution exists using less beams.
    evaluator: [python,services/check_sol_server.py]
    args:
      source:
        regex: ^(random|catalogue1|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|catalogue1|terminal|TA_send_files_bot)$
        default: random
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[random] the service uses the pseudo-random instance <m,n,seed>.'
        explain2: '[catalogue1] the service uses the hardcoded instance of the given instance_id as taken from the catalogue of hardcoded instances named catalogue1.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -asource=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the 0,1-matrix which reports the positions of the asteroids.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the 0,1-matrix which reports the positions of the asteroids.
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to reproduce an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument source. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      sol_style:
        regex: ^(seq|subset)$
        default: seq
        explain: 'choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively.'
        example: '[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3'
      goal:
        regex: ^check_optimality$
        default: check_optimality
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_feasibility_independent_asteroids_subset:
    description: Given a set of asteroids within a given 0,1-matrix, this service checks their independence (i.e., that you have selected at most one asteroid on each row and on each column of the matrix).
    evaluator: [python, services/check_dual_solution_server.py]
    args:
      instance_spec:
        regex: ^(seed|instance_id|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(seed|instance_id|terminal|TA_send_files_bot)$
        default: seed
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[seed] the service uses the pseudo-random instance <m,n,seed> as its input instance.'
        explain2: '[instance_id] the service is run with reference to the hardcoded instance of the given instance_it out from the catalogue of hardcoded instances.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -ainstance_spec=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of rows of the 0,1-matrix reporting the asteroids\''s positions.'
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of columns of the 0,1-matrix reporting the asteroids\''s positions.'
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to reproduce an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument instance_spec. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      goal:
        regex: ^check_feasibiliy$
        default: check_feasibiliy
      feedback:
        regex: ^only_check$
        default: only_check
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_optimality_independent_asteroids_subset:
    description: You have to give us the set of indipendent asteroids.
    evaluator: [python, services/check_dual_solution_server.py]
    args:
      instance_spec:
        regex: ^(seed|instance_id|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(seed|instance_id|terminal|TA_send_files_bot)$
        default: seed
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[seed] the service uses the pseudo-random instance <m,n,seed> as its input instance.'
        explain2: '[instance_id] the service is run with reference to the hardcoded instance of the given instance_it out from the catalogue of hardcoded instances.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -ainstance_spec=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of rows of the 0,1-matrix reporting the asteroids\''s positions.'
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of columns of the 0,1-matrix reporting the asteroids\''s positions.'
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to reproduce an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument instance_spec. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      feedback:
        regex: ^(only_check|give_a_better_solution_if_any)$
        default: only_check
        explain: using this argument you can ask to be given a feasible solution using less laser beams (if one exists). Use only when convenient to you (slightly spoilering).
      goal:
        regex: ^check_optimality$
        default: check_optimality
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to reproduce an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      goal:
        explain: Set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      with_opt_cert:
        regex: ^(0|1)$
        default: 1
      code_lang: 
        explain: The more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it  
  
  try_GMPL_model:
    description: 'This service allows you to validate your models for the Asteroid problem. Even if you do not have `glpsol` installed on your machine, still with this service you can send to our server the .mod file containing your GMPL model and a .dat file containing an instance of the problem. The service runs a `gplsol` engine on your model and instance to find out a solution following the instructions contained in your .mod file. To send your files you must use the TA_send_files_bot.py bot placed in the model_asteroid/bots/ directory. Call the service with:\n    rtal connect model_asteroid try_GMPL_model -- path_to_bot_dir/TA_send_files_bot.py mod=path_to_model_file_dir/your_asteroid.mod dat=path_to_instance_file_dir/your_asteroid.dat input=path_to_input_file/input.txt\nHere, the `input.txt` file is required only if you want to get a validation of the solution contained in the file `solution.txt` generated by your model on the server. Examples for the format for the `input.txt` file can be found in the `examples` directory (see in the archive downloaded with `rtal get model_asteroid`).'
    evaluator: [python, services/try_GMPL_model_server.py]
    files:
      - instance
      - mod
      - dat
    args:
      display_output:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the service displays the output of the `gplsol` engine when running your model and instance.
      display_error:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the service displays the log of the `gplsol` engine when running your model and instance.
      display_solution:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the service displays the content of the solution.txt file created by your model. This display is a raw listing of the file as it is (might help your debugging from remote).
      check_solution:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, the solution obtained from GPLSOL will be checked. In order to perform this check, it is mandatory that also the input.txt file is sent to the sever via the TA_send_files_bot.py
      txt_style:
        regex: ^(only_matrix|with_m_and_n)$
        default: only_matrix
        explain: 'choose how to encode the txt input file.'
      sol_style:
        regex: ^(seq|subset)$
        default: subset
        explain: 'choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively.'
        example: '[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3'
      instance_id:
        regex: ^(-1|[1-9][0-9]*)$
        default: -1
        explain: 'If different from -1 then the dat file and the input.txt files are those for the hardcoded instance with id <instance_id> from the catalogue of hardcoded instances automatically set up with make when setting up the server.'
      lang: 
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  try_explicit_formulation:
    description: 'This service takes in input an explicit LP or ILP instance (i.e., a system of linear constraints on a set of real or possibly integer variables (plus, possibly, an objective function) and applies a solver to it in order to obtain a solution. The service returns the outcome of the computation performed by the solver. Call the service with:\n    rtal connect model_lcs try_explicit_formulation -- path_to_bot_dir/TA_send_files_bot.py ef=path_to_your_formulation_file_dir/your_formulation_file\nHere, your formulation file should be valid for the choosen format. See the argument `format` for the currently supported formats.'
    evaluator: [python, services/try_explicit_formulation_server.py]
    args:
      display_output:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the service displays the output of the `glpsol` engine when running your model and instance.
      display_error:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the service displays the log of the `glpsol` engine when running your model and instance.
      format:
        regex: ^(mps|freemps|lp|glp|math)$
        default: glp
      lang: 
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  eval_GMPL_model:
    description: 'use this service to evaluate a GMPL model of yours. It is assumed that this model is compliant with the .dat file format specifyied by the parameter `dat_style`. Examples of the supported dat styles are given in the folder `examples` where each example instance is encoded in every supported dat style (filename and extensions in the form `instance_name`.`dat_style`.dat) as well as in other formats. These instances comprise the set of public examples. For each tested instance, the service displays its instance_id so that if your model fails you have this handle on an invalidating instance (the service stops at the first failure). You can then use the service `gimme_instance` to download this instance in local and/or the service `try_GMPL_model` (even directly) to get more detailed feedback. Call the service with:\n    rtal connect model_asteroid eval_GMPL_model -- path_to_bot_dir/TA_send_files_bot.py path_to_model_file_dir/your_asteroid.mod'
    evaluator: [python, services/eval_GMPL_model_server.py]
    args:
      goal:
        regex: ^(public_examples|m_and_n_at_most_5|m_and_n_at_most10|m_and_n_at_most20|m_and_n_at_most30|m_and_n_at_most50|m_and_n_at_most100|m_and_n_at_most200|m_and_n_at_most300)$
        default: m_and_n_at_most_5
        explain: To solve bigger instances you might need smarter models, either using some tricks or, even more powerful, a better understanding of the structural properties of the problem.
      type_of_check:
        regex: ^(no|yes|min)$
        default: no
        explain: 'choose among the following options:' 
        explain1: '[no] the `solution.txt` file written by your model is considered ok if it begins with the string \''NO SOLUTION\'' if and only if the testcase asteroid instance has no solution.'
        explain2: '[yes] beyond the above requirement, for all solvable instances, the `solution.txt` file should contain a valid solution which will be checked by the service.'
        explain3: '[min] beyond the above requirement, for all solvable instances, the `solution.txt` should contain the minimum solution.'
      dat_style:
        regex: ^(default)$
        default: default
        explain: 'choose how to encode the dat file. For now there is only one format'
      sol_style:
        regex: ^(seq|subset)$
        default: subset
        explain: 'choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively.'
        example: '[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main

##possibili altri servizi ? , ora sono presenti le domande come nell'esame di ricerca operativa
...
