#!/usr/bin/env python3
from sys import stderr

from multilanguage import Env, Lang, TALcolors
from TALinputs import TALinput
from TALfiles import TALfilesHelper

from math_modeling import ModellingProblemHelper

import asteroid_lib as al

# METADATA OF THIS TAL_SERVICE:
args_list = [
    ('source',str),
    ('m',int),
    ('n',int),
    ('instance_id',int),
    ('instance_format',str),
    ('sol_format',str), #(seq|subset)
    ('download',bool),
]

ENV =Env(args_list)
TAc =TALcolors(ENV)
LANG=Lang(ENV, TAc, lambda fstring: eval(f"f'{fstring}'"), print_opening_msg = 'now')
TALf = TALfilesHelper(TAc, ENV)


# START CODING YOUR SERVICE:
if TALf.exists_input_file('instance'):
    instance = al.get_instance_from_str(TALf.input_file_as_str('instance'), format=ENV["instance_format"])
    TAc.print(LANG.render_feedback("successful-load", 'The file you have associated to `instance` filehandler has been successfully loaded.'), "yellow", ["bold"])
elif ENV["source"] == 'terminal':
    TAc.print(LANG.render_feedback("waiting", f'#? waiting for the {ENV["m"]} lines of {ENV["n"]} elements (0 or 1).\nFormat: you have to enter the {ENV["m"]} lines (corresponding to the {ENV["m"]} rows of the Asteroid matrix), where each of the {ENV["n"]} elements (0 or 1) must be separated by a space.\nAny line beggining with the "#" character is ignored.\nIf you prefer, you can use the "TA_send_txt_file.py" util here to send us the raw_instance of a file. Just plug in the util at the "rtal connect" command like you do with any other bot and let the util feed in the file for you rather than acting by copy and paste yourself.'), "yellow")
    instance = []
    for row in range (1,{ENV["m"]}):
        TAc.print(LANG.render_feedback("new-row", f'Enter the row {row} of your Asteroid matrix (given by {ENV["n"]} elements (0 or 1) separated by a space):'), "yellow", ["bold"])
        instance.append([e for e in TALinput(str, regex=f"^(([a-zA-Z0-9])*)$", sep=' ', TAc=TAc)[0]])
elif ENV["source"] != 'catalogue':
    # Get random instance
    if ENV["source"] == 'random':
        instance = al.gen_instance(ENV['m'], ENV['n'], ENV['seed'])
        # instance_str = al.instance_to_str(instance, format=ENV['format'])
        # output_filename = f"instance_{ENV['m']}_{ENV['n']}_{ENV['seed']}.{ENV['format']}"
        TAc.print(LANG.render_feedback("instance-generation-successful", f'The instance has been successfully generated by the pseudo-random generator {ENV["source"]} called with arguments:\n   seed={ENV["seed"]}\n   m={ENV["m"]}\n   n={ENV["n"]}'), "yellow", ["bold"])
    else:
        assert False
else: # take instance from catalogue
    # Initialize ModellingProblemHelper
    mph = ModellingProblemHelper(TAc, ENV.INPUT_FILES, ENV.META_DIR)
    instance_str = mph.get_file_str_from_id(ENV['instance_id'], format_name=ENV["instance_format"])
    instance = al.get_instance_from_str(instance_str, format=ENV["instance_format"])
    TAc.print(LANG.render_feedback("instance-from-catalogue-successful", f'The instance with instance_id={ENV["instance_id"]} has been successfully retrieved from the catalogue.'), "yellow", ["bold"])
    # if ENV["instance_format"]=='only_matrix.txt':
    #     m=len(instance)
    # else:
    #     m=instance[0][0]
    # output_filename = f"instance_catalogue_{ENV['instance_id']}.{ENV['instance_format']}"


TAc.print(LANG.render_feedback("this-is-the-instance", 'This is the instance:'), "white", ["bold"])
TAc.print(al.instance_to_str(instance), "white", ["bold"])

matrix=al.gen_instance(ENV['m'],ENV['n'],ENV['seed'])
print('matrix: ',matrix)
opt_val=al.opt_val(ENV['m'],ENV['n'],matrix)
# an_opt_sol_annotated_subseq = al.opt_val_and_sol(instance[0], instance[1])
if ENV["sol_format"] == 'only_val':
    TAc.print(LANG.render_feedback("solution-val-title", f"The optimal solution value for this instance is long:"), "green", ["bold"])
    TAc.print(LANG.render_feedback("solution-only_val", f'{opt_val}'), "white", ["reverse"])
    if ENV["download"]:
        TALf.str2output_file(opt_val,f'opt_val.txt')
# else:
#     TAc.print(LANG.render_feedback("solution-title", f"An optimal solution to this instance is:"), "green", ["bold"])
# if ENV["sol_format"] == 'seq':
#     TAc.print(LANG.render_feedback("solution", f'{al.annotated_subseq_to_str(an_opt_sol_annotated_subseq)}'), "white", ["reverse"])
#     if ENV["download"]:
#         TALf.str2output_file(al.sequence_to_str(al.annotated_subseq_to_sequence(an_opt_sol_annotated_subseq)),f'opt_sol.subseq.txt')
# if ENV["sol_format"] == 'annotated_subseq':
#     TAc.print(LANG.render_feedback("legend-annotated_subseq", f"(LCS Character - First string index - Second string index)"), "white", ["bold"])
#     TAc.print(LANG.render_feedback("solution", f'{al.render_annotated_subseq_as_str(an_opt_sol_annotated_subseq)}'), "white", ["reverse"])    
#     if ENV["download"]:
#         TALf.str2output_file(al.render_annotated_subseq_as_str(an_opt_sol_annotated_subseq),f'opt_sol.annotated_subseq.txt')
    
exit(0)
