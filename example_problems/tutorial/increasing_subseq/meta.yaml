public_folder: public
services:
  is_subseq:
    evaluator: [python, services/is_subseq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} *)*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      s:
        regex: ^((([1-9][0-9]{0,9} *)*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      YES_cert:
        regex: ^(0|1)$
        default: 1      #explain: "underline the subsequence as evidence of positive answers"
      seed:
        regex: ^(s_and_T_proposed_by_problem_solver|surprise_me|[1-9]|[0-9]{2,5})$
        default: s_and_T_proposed_by_problem_solver
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_subseq:
    evaluator: [python, services/eval_subseq_server.py]
    args:
      seed:
        regex: ^(random_seed|[1-9]|[0-9]{2,5})$
        default: random_seed
      times: 
        regex: ^([1-9][0-9]{0,2})$
        default: 5
      cert: 
        regex: ^(0|1)$
        default: 1
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_longest_subseq:
    evaluator: [python, services/check_longest_increasing_subseq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      max_len_min_k:
        regex: ^(0|[1-9][0-9]{0,50}|lazy_input)$
        default: lazy_input
      feas_subseq:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input|none)$
        default: lazy_input
      coloring:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input|none)$
        default: none
      feedback_level:
        regex: ^(complete_subseq|subseq_prefix|no_feedback)$
        default: complete_subseq
      more_or_less_hint_if_wrong_max_len_min_k:
        regex: ^(0|1)$
        default: 0
      YES_cert:
        regex: ^(0|1)$
        default: 1
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_longest_subseq:
    evaluator: [python, services/eval_longest_increasing_subseq_server.py]
    args:
      yield:
        regex: ^(max_len_min_k|a_max_subseq|a_min_col|both)$
        default: max_len_min_k
      feedback_level:
        regex: ^(0|1|2)$
        default: 1
      times: 
        regex: ^([1-9][0-9]{0,2})$
        default: 5
      YES_cert:
        regex: ^(0|1)$
        default: 1    #explain: "the evaluated bot is required to also output a certificate on every YES-instance"
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_num_occurrences_of_s_in_T:    #explain: checks the number of different ways s occurs in T
    evaluator: [python, services/eval_subseq_server.py]
    args:
      len_T:
        regex: ^(0|1)$
      risp:
        regex: ^(0|[1-9][0-9]{0,50})$
      ok_if_congruent_modulus:
        regex: ^(0|[1-9][0-9]{0,10})$ 
#        default: 0
        default: 1000000007
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_num_occurrences_of_s_in_T:
    evaluator: [python, services/eval_num_subseq_server.py]
    args:
      answ_modulus:
        regex: ^([1-9][0-9]{0,10})$
#        default: 0
        default: 1000000007
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  
# BEGIN: competenza gestione sottosequenze diverse di una stessa sequenza
#        può avere senso come un esercizio a parte (di programmazione) 
  check_subseq_set:
    evaluator: [python, services/check_subseq_set_server.py]
    args:
      feedback:
        regex: ^(yes_no|tell_a_minimal_missing_prefix|give_one_missing)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
# può avere senso come esercizio di programmazione, può essere accoppiato al successivo 
  check_subseq_list:
    evaluator: [python, services/check_subseq_list_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      feedback:
        regex: ^(yes_no|spot_first_wrong_consec|tell_first_minimal_missing_prefix|give_first_missing)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_next_subseq_gen:
    evaluator: [python, services/check_next_subseq_gen_server.py]
    args:
      current_subseq:
        regex:  ^(\(|\)){0,1000}$
      next_subseq:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      tell_maximal_correct_feedback:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_next_subseq_gen:
    evaluator: [python, services/eval_next_subseq_gen_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_rank_of_seq:
    evaluator: [python, services/check_rank_of_seq.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} *)*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      sorting_criterion:
        regex: ^([1-4]|lazy_input)$
        default: lazy_input
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  
  eval_rank_of_seq:
    evaluator: [python, services/eval_rank_of_seq.py]
    args:
      times: 
        regex: ^([1-9][0-9]{0,2})$
        default: 5
      NO_cert:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  min_k_col:
    evaluator: [python, services/min_k_col.py]
    args:
      coloring:
        regex: ^((([1-9][0-9]{0,9} *)*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
