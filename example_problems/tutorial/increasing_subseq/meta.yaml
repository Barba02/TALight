%YAML 1.2
---
public_folder: public
services:
  is_subseq:
    description: You are asked to enter two sequences S and T of positive integers. The service tells whether S is a subsquence of T.
    evaluator: [python, services/is_subseq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
        explain: T is a sequence of positive integers separated by spaces
        example: 12 34 56
      S:
        explain: S is a sequence of positive integers separated by spaces
        example: 12 34 56
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
      YES_cert:
        explain: in case S is a subsequence of T, the service underlines |S| elemements in T to give evidence to its positive answers.
        regex: ^(0|1)$
        default: 1
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  gen_subseq_instance:
    description: It returns an instance of the eval_is_subseq service once you provide its description. The description has the form (m,n,max_val,yes_instance,seed).
    evaluator: [python, services/gen_subseq_instance_server.py]
    args: # m n max_val
      yes_instance:
        regex: ^(0|1)$
      seed:
        regex: ^([1-9][0-9]{5,5})$
      silent:
        regex: ^(0|1)$
  check_is_subseq_YES_certificate:
    description: "Given two sequences S and T and a set of indexes of T, the service checks that S is obtained from T after removing all elements with indexes in the given set. You can for example use this service if you are sure S is a subsequence of T but this disagrees with what said by one of our services. (Besides: we are happy to receive reports soliciting corrections.)"
    evaluator: [python, services/check_is_subseq_YES_certificate_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
      S:
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
      YES_cert:
        explain: the set of elements (specified by their indexes in T) to be removed from T to obtain S.
        regex: ^((([1-9][0-9]{0,5} *)*)|lazy_input)$
        default: 1
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_subseq:
    description: Evaluates correctness and efficiency of a program from the problem solver that, given in input two integer sequences T (on a first line) and S (on a second line), decides whether S is a subsequence of T or not (y/n). The evaluation is done on a set of pseudo-random instances (everything is fully reproducible from the seed).
    evaluator: [python, services/eval_subseq_server.py]
    args:
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      cert: 
        explain: if set to 1 the service bot program should also return (on a second line, when its first is 'y') a sequence of indexes where S can be read out from T (idexes start from 0).
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_longest_increasing_subseq:
    evaluator: [python, services/check_longest_increasing_subseq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      max_len_min_k:
        regex: ^(0|[1-9][0-9]{0,50}|lazy_input)$
        default: lazy_input
      feas_subseq:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input|none)$
        default: lazy_input
      coloring:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input|none)$
        default: none
      feedback_level:
        regex: ^(complete_subseq|subseq_prefix|no_feedback)$
        default: complete_subseq
      more_or_less_hint_if_wrong_max_len_min_k:
        regex: ^(0|1)$
        default: 0
      YES_cert:
        regex: ^(0|1)$
        default: 1
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_longest_increasing_subseq:
    description: this service helps you evaluating your program for computing the maximum length of a strictly increasing subsequence of a given sequence.
    evaluator: [python, services/eval_longest_increasing_subseq_server.py]
    args:
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user for replicability purposes).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      yield:
        regex: ^(only_opt_val|a_max_subseq|a_min_col|both_certificates)$
        default: only_opt_val
        explain: use this argument to specify what your bot is required to yield.
        explain1: "[only_opt_val]  your bot is required to yield only the maximum length of a longest strictly increasing subsequence."
        explain2: "[a_max_subseq]  the bot is required to yield not only the length but also a longest strictly increasing subsequence."
        explain3: "[a_min_col]  the bot is required to yield not only the minimum number k of non-decreasing subsequences needed to cover all elements of the input sequence (this k is always equal to the maximum length of a longest strictly increasing subsequence) but also to specify, for each element of the input sequence, the non-decreasing subsequence including it (a number from 1 to k)."
        explain4: "[both_certificates]  your bot is required to yield all of the above."
      feedback_level:
        regex: ^(0|1|2|3)$
        default: 3
        explain: (IGNORE THIS ARGUMENT IN THE CURRENT IMPLEMENTATION. Use full feedback) Set the feedback level (the levels form a total order where each level implies the previous one).
        explain1: "[0] silent - it warns you only in case you have not reached your goals."
        explain2: "[1] only report - it reports on the achievement of the goals you have set."
        explain3: "[2] report on first problem - it provides you the details on the first problem encounterd in the achievement of your goals."
        explain4: "[3] full feedback - it also reports on the positive test cases towards your goal."
      goal:
        regex: ^(correct|quadratic|n_times_opt|quasi_linear)$
        default: correct
        explain: set your goal (the goals form a total order where each goal implies the previous one).
        explain1: "[correct] this is the minimal requirement."
        explain2: "[quadratic] this goal can be achieved by a correct algorithm taking time O(n^2), where n is the length of the input sequence."
        explain3: "[n_times_opt] this goal can be achieved by a correct algorithm taking time O(n * opt), where opt is the maximum length of an strictly increasing subsequence."
        explain4: "[quasi_linear] this goal can be achieved by a correct algorithm taking time O(n * log n)."
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      max_val:
        regex: ^100$
        default: 100
  check_num_occurrences_of_S_in_T:    #explain: checks the number of different ways S occurs in T
    evaluator: [python, services/check_num_subseq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
      S:
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      len_T:
        regex: ^(0|1)$
        default: 0
      risp:
        regex: ^(0|[1-9][0-9]{0,50})$
        default: 0
      ok_if_congruent_modulus:
        regex: ^(0|[1-9][0-9]{0,10})$ 
        default: 1000000007
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_num_occurrences_of_S_in_T:
    evaluator: [python, services/eval_num_subseq_server.py]
    args:
      goal:
        regex: ^(correct|quadratic|quasi_linear)$
        default: correct
        explain: set your goal (the goals form a total order where each goal implies the previous one).
        explain1: "[correct] this is the minimal requirement."
        explain2: "[quadratic] this goal can be achieved by a correct algorithm taking time O(n^2), where n is the length of the input sequence."
        explain3: "[quasi_linear] this goal can be achieved by a correct algorithm taking time O(n * log n)."
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
# BEGIN: competenza gestione sottosequenze diverse di una stessa sequenza
#        può avere senso come un esercizio a parte (di programmazione) 
  check_subseq_set:
    evaluator: [python, services/check_subseq_set_server.py]
    args:
      feedback:
        regex: ^(yes_no|tell_a_minimal_missing_prefix|give_one_missing)$
        default: yes_no
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
# può avere senso come esercizio di programmazione, può essere accoppiato al successivo 
  check_subseq_list:
    evaluator: [python, services/check_subseq_list_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      feedback:
        regex: ^(yes_no|spot_first_wrong_consec|tell_first_minimal_missing_prefix|give_first_missing)$
        default: yes_no
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_next_subseq_gen:
    evaluator: [python, services/check_next_subseq_gen_server.py]
    args:
      current_subseq:
        regex:  ^(\(|\)){0,1000}$
      next_subseq:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      tell_maximal_correct_feedback:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_next_subseq_gen:
    evaluator: [python, services/eval_next_subseq_gen_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_rank_of_seq:
    evaluator: [python, services/check_rank_of_seq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} *)*)|lazy_input)$
        default: lazy_input
      sorting_criterion:
        regex: ^([1-4]|lazy_input)$
        default: lazy_input
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it  
  eval_rank_of_seq:
    evaluator: [python, services/eval_rank_of_seq_server.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
        explain: set your goal (efficient includes also correct).
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      NO_cert:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_count_increasing_subseq:
    evaluator: [python, services/eval_count_increasing_subseq.py]
    args:
      goal:
        regex: ^(correct|quadratic|quasi_linear)$
        default: correct
        explain: set your goal (the goals form a total order where each goal implies the previous one).
        explain1: "[correct] this is the minimal requirement."
        explain2: "[quadratic] this goal can be achieved by a correct algorithm taking time O(n^2), where n is the length of the input sequence."
        explain3: "[quasi_linear] this goal can be achieved by a correct algorithm taking time O(n * log n)."
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
...
