%YAML 1.2
---
public_folder: public
services:
  is_subseq:
  gen_subseq_instance:
  check_is_subseq_YES_certificate:
  eval_subseq:
  check_longest_increasing_subseq:
  eval_longest_increasing_subseq:
    description: this service helps you evaluating your program for computing the maximum length of a strictly increasing subsequence of a given sequence.
    evaluator: [python, services/eval_longest_increasing_subseq_server.py]
    args:
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user for replicability purposes).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      yield:
        regex: ^(only_opt_val|a_max_subseq|a_min_col|both_certificates)$
        default: only_opt_val
        explain: use this argument to specify what your bot is required to yield.
        explain1: "[only_opt_val]  your bot is required to yield only the maximum length of a longest strictly increasing subsequence."
        explain2: "[a_max_subseq]  the bot is required to yield not only the length but also a longest strictly increasing subsequence."
        explain3: "[a_min_col]  the bot is required to yield not only the minimum number k of non-decreasing subsequences needed to cover all elements of the input sequence (this k is always equal to the maximum length of a longest strictly increasing subsequence) but also to specify, for each element of the input sequence, the non-decreasing subsequence including it (a number from 1 to k)."
        explain4: "[both_certificates]  your bot is required to yield all of the above."
      feedback_level:
        regex: ^(0|1|2|3)$
        default: 3
        explain: (IGNORE THIS ARGUMENT IN THE CURRENT IMPLEMENTATION. Use full feedback) Set the feedback level (the levels form a total order where each level implies the previous one).
        explain1: "[0] silent - it warns you only in case you have not reached your goals."
        explain2: "[1] only report - it reports on the achievement of the goals you have set."
        explain3: "[2] report on first problem - it provides you the details on the first problem encounterd in the achievement of your goals."
        explain4: "[3] full feedback - it also reports on the positive test cases towards your goal."
      goal:
        regex: ^(correct|quadratic|n_times_opt|quasi_linear)$
        default: correct
        explain: set your goal (the goals form a total order where each goal implies the previous one).
        explain1: "[correct] this is the minimal requirement."
        explain2: "[quadratic] this goal can be achieved by a correct algorithm taking time O(n^2), where n is the length of the input sequence."
        explain3: "[n_times_opt] this goal can be achieved by a correct algorithm taking time O(n * opt), where opt is the maximum length of an strictly increasing subsequence."
        explain4: "[quasi_linear] this goal can be achieved by a correct algorithm taking time O(n * log n)."
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      max_val:
        regex: ^100$
        default: 100
  check_num_occurrences_of_S_in_T:    #explain: checks the number of different ways S occurs in T
  eval_num_occurrences_of_S_in_T:
  
  check_subseq_set:
  check_subseq_list:
  check_next_subseq_gen:
  eval_next_subseq_gen:
  check_rank_of_seq:
  eval_rank_of_seq:
  eval_count_increasing_subseq:
  synopsis:
...
