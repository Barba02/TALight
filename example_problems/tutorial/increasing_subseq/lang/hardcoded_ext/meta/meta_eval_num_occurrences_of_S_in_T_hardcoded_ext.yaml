%YAML 1.2
---
public_folder: public
services:
  is_subseq:
  gen_subseq_instance:
  check_is_subseq_YES_certificate:
  eval_subseq:
  check_longest_increasing_subseq:
  eval_longest_increasing_subseq:
  check_num_occurrences_of_S_in_T:    #explain: checks the number of different ways S occurs in T
  eval_num_occurrences_of_S_in_T:
    evaluator: [python, services/eval_num_subseq_server.py]
    args:
      goal:
        regex: ^(correct|quadratic|quasi_linear)$
        default: correct
        explain: set your goal (the goals form a total order where each goal implies the previous one).
        explain1: "[correct] this is the minimal requirement."
        explain2: "[quadratic] this goal can be achieved by a correct algorithm taking time O(n^2), where n is the length of the input sequence."
        explain3: "[quasi_linear] this goal can be achieved by a correct algorithm taking time O(n * log n)."
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  check_subseq_set:
  check_subseq_list:
  check_next_subseq_gen:
  eval_next_subseq_gen:
  check_rank_of_seq:
  eval_rank_of_seq:
  eval_count_increasing_subseq:
  synopsis:
...
