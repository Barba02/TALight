%YAML 1.2
---
public_folder: public
services:
# prendere spunto da model pirellone per la generazione dell'istanza
# prendere spunto da pirellone o da euler_dir per i servizio eval
  gimme_a_graph:
    description: 'This service provides you with a random undirected simple graph with n nodes and m edges. (Simple means no loops and no parallel edges.) You can ask this service to produce a graph already met with this or other services, by just providing its seed and the other details in its instance descriptor. By the \''instance descriptor\'' of a pseudo-random graph we mean the triple <n,m,seed>. As seed, you can use any integer from 100000 to 999999 or let the service choose the seed at random (seed=random_seed). In the second case you are given the possibility to specify whether the generated graph should be connected or not, or let the service decide also on this. In either case, the generated pseudo-random graph is returned in the form of a stream. You may ask for this stream to get downloaded in a file on your local machine and/or displayed on the screen. Our format for streams storing graphs is the following: the first line contains the two integers n and m; then follow m lines, one for each edge. Each of these lines comprises two integers (the two endonodes of the edge). It is assumed that the labels of the nodes are the integers in [0,n).'
    evaluator: [python,services/gimme_graph_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,3}|1000)$
        default: 6
        explain: Number of nodes of the graph (an integer in the interval [1,1000]).
      m:
        regex: ^(0|[1-9][0-9]{0,4}|10000)$
        default: 10
        explain: 'Number of edges of the graph (an integer in the interval [0,10000]).'
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <n,m,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      graph_connectivity:
        regex: ^(connected|disconnected|surprise_me)$
        default: surprise_me
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output of the rtal call to file (e.g., with > from the shell) you will get a valid instance file for the other services.
      # display:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: If this flag is set to 1 then the instance file is listed by the service.
      # download:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: 'If this flag is set to 1 then the instance file is downloaded in the \''download\'' sub-folder of the folder from which this TALight service call has been issued.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  tell_if_graph_is_connected:
    description: This service recognizes the connectivity property for undirected graphs. Besides telling whether the given graph is connected or not, the service can also be asked to provide a certificate of connectivity (or a certificate of non-connectivity).
    evaluator: [python, services/tell_if_graph_is_connected_server.py]
    args:
      with_yes_certificate:
        explain: when the input graph is connected, please, send me a certificate in the form of a spanning tree. This tree is encoded as a routing table towards its root (node 0 of the graph).
        regex: ^(0|1)$
        default: 0
      with_no_certificate:
        explain: when the input graph is NOT connected, please, send me a certificate in the form of a non-trivial partition of the nodes such that no edge has endpoints on different sides of the bipartition.
        regex: ^(0|1)$
        default: 0
      input_mode:
        regex: ^(terminal|TA_send_files_bot)$
        default: terminal
        explain: "choose the way to input your graph among:"
        explain1: "[terminal] you enter your instance (undirected graph) directly by either typing it line after line or through cut and paste operations."
        explain2: "[TA_send_files_bot] send to the service a graph contained in a file on your local machine. To send the file you must use the TA_transfer_files_bot.py bot placed in the graph_connectivity/bots/ directory. Call the service with: rtal graph_connectivity tell_if_graph_is_connected -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_graph.txt."
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_certificate_of_connectivity:
    description: this service checks the validity of your certificate of connectivity for a given graph, or your ability to yield such a certificate when a connected graph is given to you. The form of the certificate is that of a routing table where every node directs to its father (or next node) in an arborescence of paths directed towards the root node (always node 0).
    evaluator: [python, services/check_certificate_of_connectivity_server.py]
    args:
      how_to_input_the_graph:
        regex: ^(random|file|TA_send_files_bot|terminal)$
        explain: 'choose the way to input your graph among:'
        explain1: '[terminal] you enter your instance (undirected graph) directly by either typing it line after line or through cut and paste operations.'
        explain2: '[TA_send_files_bot] send to the service a graph contained in a file on your local machine. To send the file you must use the TA_transfer_files_bot.py bot placed in the graph_connectivity/bots/ directory. Call the service with: rtal graph_connectivity tell_if_graph_is_connected -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_graph.txt.'
        explain3: '[file] send to the service a graph contained in a file on your local machine using the syntax allowed with TALight version 2.'
        explain4: '[random] You can ask this service to produce a graph already met with this or other services, by just providing its seed and the other details in its instance descriptor. By the \''instance descriptor\'' of a pseudo-random graph we mean the triple <n,m,seed>. As seed, you can use any integer from 100000 to 999999 or let the service choose the seed at random (seed=random_seed). See the service \''gimme_a_graph\'' for more details on our family of pseudo-random graphs. When the choice of the seed is left to the service, it makes sure to choose a seed for a connected graph.'
        default: random
      n:
        regex: ^([1-9][0-9]{0,3}|1000)$
        default: 6
        explain: 'Number of nodes of the graph (an integer in the interval [1,1000]). This argument is meaningful only in case the argument \''how_to_input_the_graph\'' is set to \''random\''.'   
      m:
        regex: ^(0|[1-9][0-9]{0,4}|10000)$
        default: 10
        explain: 'Number of edges of the graph (an integer in the interval [0,10000]). This argument is meaningful only in case the argument \''how_to_input_the_graph\'' is set to \''random\''.'
      seed:
        explain: 'This argument is meaningful only in case the argument \''how_to_input_the_graph\'' is set to \''random\''. It specifies the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <n,m,seed>.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      silent:
        explain: if you specify the graph (through its generating seed) when launching rtal and nothing is wrong with your routing table for the graph then the service runs silently; otherwise it explains what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_certificate_of_nonconnectivity:
    description: this service checks the validity of your certificate of non-connectivity for a given graph, or your ability to yield such a certificate when a non-connected graph is given to you. The form of the certificate is that of a bipartition of the nodes with the property that both classes of the bipartition are not empty and no edge of the graph has its two endpoints belonging to different classes.
    evaluator: [python, services/check_certificate_of_nonconnectivity_server.py]
    args:
      how_to_input_the_graph:
        regex: ^(random|file|TA_send_files_bot|terminal)$
        explain: 'choose the way to input your graph among:'
        explain1: '[terminal] you enter your instance (undirected graph) directly by either typing it line after line or through cut and paste operations.'
        explain2: '[TA_send_files_bot] send to the service a graph contained in a file on your local machine. To send the file you must use the TA_transfer_files_bot.py bot placed in the graph_connectivity/bots/ directory. Call the service with: rtal graph_connectivity tell_if_graph_is_connected -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_graph.txt.'
        explain3: '[file] send to the service a graph contained in a file on your local machine using the syntax allowed with TALight version 2.'
        explain4: '[random] You can ask this service to produce a graph already met with this or other services, by just providing its seed and the other details in its instance descriptor. By the \''instance descriptor\'' of a pseudo-random graph we mean the triple <n,m,seed>. As seed, you can use any integer from 100000 to 999999 or let the service choose the seed at random (seed=random_seed). See the service \''gimme_a_graph\'' for more details on our family of pseudo-random graphs. When the choice of the seed is left to the service, it makes sure to choose a seed for a non-connected graph.'
        default: random
      n:
        regex: ^([1-9][0-9]{0,3}|1000)$
        default: 6
        explain: 'Number of nodes of the graph (an integer in the interval [1,1000]). This argument is meaningful only in case the argument \''how_to_input_the_graph\'' is set to \''random\''.'   
      m:
        regex: ^(0|[1-9][0-9]{0,4}|10000)$
        default: 10
        explain: 'Number of edges of the graph (an integer in the interval [0,10000]). This argument is meaningful only in case the argument \''how_to_input_the_graph\'' is set to \''random\''.'
      seed:
        explain: 'This argument is meaningful only in case the argument \''how_to_input_the_graph\'' is set to \''random\''. It specifies the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <n,m,seed>.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      the_bipartition:
        regex: ^(lazy|(0  *|[1-9][0-9]{0,4}  *){1,999}versus  *(0  *|[1-9][0-9]{0,4}  *){0,998}(0|[1-9][0-9]{0,4}) *)$
      silent:
        explain: if nothing is wrong with your spanning tree for the graph you have specified us (through seed) then the service runs silently; otherwise it explains what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_bot_deciding_connectivity:
    evaluator: [python, services/eval_bot_deciding_connectivity_server.py]
    args:
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|quadratic|linear)$
        default: correct
      check_also_yes_certificate:
        explain: when the instance is a connected graph my bot will also produce a spanning tree of it, please, check also my certificate.
        regex: ^(0|1)$
        default: 0
      check_also_no_certificate:
        explain: when the instance is a non-connected graph my bot will also produce a bipartition, please, check also my certificate.
        regex: ^(0|1)$
        default: 0
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
...
