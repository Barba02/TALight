%YAML 1.2
---
public_folder: public
description: This problem is meant as a container of services that yield summaries on your submissions or on the submissions of your students. You can ask a whole report on all the problems or filter on a single problem, or on a single service of a single problem. As a teacher, you can also independently filter on the students (based on their personal tokens, the knowledge of a substring of the token will be enough). The report will mention only those goals/services/problems that were positively achieved by at least one complete submission of pertinence.
services:
  get_my_records:
    evaluator: [python,services/get_my_records.py]
    description: 'Use this service to get a summary of your positive submissions to rtal evaluating services. You can ask a whole report on all the problems or filter on a single problem, or on a single service of a single problem. The report will mention only those goals/services/problems that were positively achieved by at least one complete submission of pertinence. You can also ask the time and date of you last submission where you achieved every reported goal, or even to list the times/dates of all positive submissions.\n\n   ***A NOTE ON SUMBISSIONS: You can act a submission if your teacher or instructor who deployed the problem as a web service has provided you with a personal token. Some rtal services offering evaluations of your answers, solutions, or solving algorithms, allow you to also act a submission. Usually, such services remain available and responsive also to anonymous calls, where no log is mantained. When however you intend to act a submission then you should provide your personal token when calling the service (use the -x option of the connect rtal subcommand). When acting a submission, the service might require you to supply also further arguments or files, like e.g. the source code of your bot subject to evaluation. If you omit providing all the required elements the service drops before creating any log file, which means that the submission has not taken place. On the contrary, the service communicates you when all the log files have been successfully created and the submission is complete.' 
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report of your submissions. Use `all_problems` to get a global report of your submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Specify the service the submission to which you want to get a report about. Use `all_services` to get a global report of your submissions on all services of the problem `problem`.'
      all_submissions:
        regex: ^(0|1)$
        default: 0
        explain: 'Show all the submission for each service, instead of just the last result (OK if the service has been solved one more time, or NO if all the sumbission were wrong)'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      csv_filename:
        regex: ^(.*)$
        default: submissions.csv
        explain: 'name of the csv file (an alphanumeric string where also underscores and full dots are allowed)'
      regex_filename:
        regex: ^(.*)$
        default: '^(.*)$'
        explain: 'Report only those filenames that match the given regex.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  get_ranking:
    evaluator: [python,services/get_ranking.py]
    description: 'This service is intended to be used by only the teacher. It provide the ability to get the submission of all the student or just one (using the student argument). You can filter by problem (by using the problem argument)service (by using the service argument). This service have the possibility to download the result show in your terminal (by set the flag of the argument download to 1).' 
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report of your submissions. Use `all_problems` to get a global report of your submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Select the service for which to ask a report of your submissions. Use `all_services` to get a global report of your submissions on all services.'
      all_submissions:
        regex: ^(0|1)$
        default: 0
        explain: 'Show all the submission for each service, instead of just the last result (OK if the service has been solved one more time, or NO if all the sumbission were wrong)'
      student:
        regex: ^(([a-z]|[A-Z]|_|[0-9])*)$
        default: all_students
        explain: 'Select the service for which to ask a report of your students. Use `all_students` to get a global report of your submissions on all students.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      csv_filename:
        regex: ^(.*)$
        default: submissions.csv
        explain: 'name of the csv file (an alphanumeric string where also underscores and full dots are allowed)'
      regex_filename:
        regex: ^(.*)$
        default: '^(.*)$'
        explain: 'Report only those filenames that match the given regex.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  get_statistics:
    evaluator: [python,services/get_statistics.py]
    description: 'This service is accessible only to users with teacher credentials. It offers customizable views on the current situation with the submissions received, whose outcomes have been stored in a log folder on the server. The log folders taken into account can be filtered setting these arguments: problem (filter by name of the problem), service (filter by name of the service) and student (filter by the student). Setting the watch argument, you select the statistic you are interested into. By setting the download argument a .csv file is stored in local on your computer. This file is a report offereng the same data visualized on the screen.'
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report on the submissions. Leave the default value `all_problems` to get a global report of the submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Select the service for which to ask a report on the submissions. Leave the default value `all_services` to get a global report of the submissions on all service.'
      student:
        regex: ^(([a-z]|[A-Z]|_|[0-9])*)$
        default: all_students
        explain: 'Select the student for which to ask a report on the submissions. Leave the default value `all_students` to get a global report of the submissions on all students.'
      watch: 
        regex: ^(num_tokened_submissions|num_ok_and_no|num_problems_touched|num_problems_partial|num_problems_full|num_services_touched|num_services_partial|num_services_full|num_goals_achieved)$
        default: num_problems_full
        explain: 'Select the statistic you want displayed:'
        explain1: '[num_tokened_submissions] prints the total number of log folders compliant with the filters imposed.'
        explain2: '[num_ok_and_no] shows how many OKs and NOs over submissions that are compliant with the filters imposed.'
        explain3: '[num_problems_touched] group the report by student, prints the number of problems for which the student has made at least one submission.'
        explain4: "[num_problems_partial] group the report by student, prints the number of problems for which the student has fullfilled (aka, all services' goals achieved) at least one whole service."
        explain5: '[num_problems_full] group the report by student, prints the number of problems which have been completely fullfilled (aka,  all services fullfilled) by the student.'
        explain6: '[num_services_touched] group the report first by student, then by problem. Prints the number of services for which the student has sent at least one sumbmission.'
        explain7: '[num_services_partial] group the report first by student, then by problem. Prints the number of services for which the student has achieved at least one goal.'
        explain8: '[num_services_full] group the report first by student, then by problem. Prints the number of services fullfilled by the student.'
        explain9: '[num_goals_achieved] group the report first by student, then by problem, then by service. Counts the number of goals achieved.'
      mode: 
        regex: ^total_gross_number$
        default: total_gross_number
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      csv_filename:
        regex: ^(.*)$
        default: submissions.csv
        explain: 'name of the csv file (an alphanumeric string where also underscores and full dots are allowed)'
      regex_filename:
        regex: ^(.*)$
        default: '^(.*)$'
        explain: 'Report only those filenames that match the given regex.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  get_submissions_counts:
    evaluator: [python,services/get_statistics.py]
    description: 'This service is accessible only to users with teacher credentials. It offers a syntetic view on the number of submissions. To do so, it takes as reference the log folders on the server. The log folders taken into account can be filtered setting these arguments: problem (filter by name of the problem), service (filter by name of the service) and student (filter by the student). For each enrolled student, the service prints the total gross number of submissions (always among the filtered ones), or the number of different problems for which a submission has bens sent, or the number of different problem services for which a submission has been sent. By setting the download argument a .csv file is stored in local on your computer. This file is a report offering the same data visualized on the screen.'
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report on the submissions. Leave the default value `all_problems` to get a global report of the submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Select the service for which to ask a report on the submissions. Leave the default value `all_services` to get a global report of the submissions on all service.'
      student:
        regex: ^(([a-z]|[A-Z]|_|[0-9])*)$
        default: all_students
        explain: 'Select the student for which to ask a report on the submissions. Leave the default value `all_students` to get a global report of the submissions on all students.'
      watch: 
        regex: ^num_tokened_submissions$
        default: num_tokened_submissions
      mode: 
        regex: ^(total_gross_number|number_different_submissions)$
        default: total_gross_number
        explain: 'Select the mode for student_tries.'
        explain1: '[total_gross_number] prints the total number of submissions of the student (i.e., the total number of log folders).'
        explain2: '[number_probl_services] prints the number of different submissions (either problem or service are different) of the student.'
        explain3: '[number_problems] prints the number of different problems faced by the student.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      csv_filename:
        regex: ^(.*)$
        default: submissions.csv
        explain: 'name of the csv file (an alphanumeric string where also underscores and full dots are allowed)'
      regex_filename:
        regex: ^(.*)$
        default: '^(.*)$'
        explain: 'Report only those filenames that match the given regex.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
