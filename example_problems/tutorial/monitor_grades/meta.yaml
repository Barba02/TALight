%YAML 1.2
---
public_folder: public
description: This problem is meant as a container of services that yield summaries on your submissions or on the submissions of your students. You can ask a whole report on all the problems or filter on a single problem, or on a single service of a single problem. As a teacher, you can also independently filter on the students (based on their personal tokens, the knowledge of a substring of the token will be enough). The report will mention only those goals/services/problems that were positively achieved by at least one complete submission of pertinence.
services:
  get_my_records:
    evaluator: [python,services/get_my_records.py]
    description: 'Use this service to get a summary of your positive submissions to rtal evaluating services. You can ask a whole report on all the problems or filter on a single problem, or on a single service of a single problem. The report will mention only those goals/services/problems that were positively achieved by at least one complete submission of pertinence. You can also ask the time and date of you last submission where you achieved every reported goal, or even to list the times/dates of all positive submissions.\n\n   ***A NOTE ON SUMBISSIONS: You can act a submission if your teacher or instructor who deployed the problem as a web service has provided you with a personal token. Some rtal services offering evaluations of your answers, solutions, or solving algorithms, allow you to also act a submission. Usually, such services remain available and responsive also to anonymous calls, where no log is mantained. When however you intend to act a submission then you should provide your personal token when calling the service (use the -x option of the connect rtal subcommand). When acting a submission, the service might require you to supply also further arguments or files, like e.g. the source code of your bot subject to evaluation. If you omit providing all the required elements the service drops before creating any log file, which means that the submission has not taken place. On the contrary, the service communicates you when all the log files have been successfully created and the submission is complete.' 
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report of your submissions. Use `all_problems` to get a global report of your submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Specify the service the submission to which you want to get a report about. Use `all_services` to get a global report of your submissions on all services of the problem `problem`.'
      all_submissions:
        regex: ^(0|1)$
        default: 0
        explain: 'Show all the submission for each service, instead of just the last result (OK if the service has been solved one more time, or NO if all the sumbission were wrong)'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  get_ranking:
    evaluator: [python,services/get_ranking.py]
    description: 'This service is intended to be used by only the teacher. It provide the ability to get the submission of all the student or just one (using the student argument). You can filter by problem (by using the problem argument)service (by using the service argument). This service have the possibility to download the result show in your terminal (by set the flag of the argument download to 1).' 
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report of your submissions. Use `all_problems` to get a global report of your submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Select the service for which to ask a report of your submissions. Use `all_services` to get a global report of your submissions on all services.'
      student:
        regex: ^(([a-z]|[A-Z]|_|[0-9])*)$
        default: all_students
        explain: 'Select the service for which to ask a report of your students. Use `all_students` to get a global report of your submissions on all students.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  get_statistics:
    evaluator: [python,services/get_statistics.py]
    description: 'This service is intended to be used by only the teacher. This service provides an overview of the situation by aggregating the data (by using the count_type argument). You can filter the data by using this arguments: problem (filter by name of the problem), service (filter by name of the service) and student (filter by the student). If you want to you can set to 1 the flag of the downalod argument, and get a csv file of the table.'
    args:
      problem:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_problems
        explain: 'Select the problem for which to ask a report on the submissions. Use `all_problems` to get a global report of the submissions on all problems.'
      service:
        regex: ^(([a-z]|[A-Z]|_)*)$
        default: all_services
        explain: 'Select the service for which to ask a report on the submissions. Use `all_services` to get a global report of the submissions on all service.'
      student:
        regex: ^(([a-z]|[A-Z]|_|[0-9])*)$
        default: all_students
        explain: 'Select the student for which to ask a report on the submissions. Use `all_students` to get a global report of the submissions on all students.'
      watch: 
        regex: ^(num_tokened_submissions|num_ok_and_no|num_problems_touched|num_problems_partial|num_problems_full|num_services_touched|num_services_partial|num_services_full|num_goals_achieved)$
        default: problem
        explain: 'Select the type of statistc you want displayed:'
        explain1: '[num_tokened_submissions] prints the total number of log folders (in the log directory on the server) compliant with the filters imposed.'
        explain2: '[student_ok_and_no] shows how many OKs and NOs over submissions that are compliant with the filters imposed.'
        explain3: '[problem] group the report by problem.'
        explain4: '[service] group the report by service.'
        explain5: '[goal] group the report by service.'
      mode: 
        regex: ^(total_gross_number|number_different_submissions)$
        default: total_gross_number
        explain: 'Select the mode for student_tries. total_gross_number count the files in each folder. number_different_submissions either problem or service are different.'
      requirement:
        regex: ^(at_least_one_submission|at_least_one_goal_achieved|all_services_fullfilled|all_goals_achieved)$
        default: all_services_fullfilled
        explain: 'Select the mode for count_type=problem and count_type=service. at_least_one_submission at least one submission (either a no goal or a ok goal). at_least_one_goal_achieved at least a ok goal recived. all_services_fullfilled every service as to be ok goal. all_goals_achieved all the goal are achived.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then a .csv file with the view required is downloaded on your local machine, within the subfolder `output` of your current directory. Use the -o option of the connect rtal subcommand if you prefer a different path or folder name (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
