%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: This service provides you with a random instance, i.e., a 0/1-matrix with the given number of rows (argument m) and columns (argument n). You can also specify (1) whether this instance should be solvable or not, or let it to the service to decide; and (2) whether you want to get only the random seed for the instance or also the instance file downloaded and/or its display on the screen. If you opt to insert the seed yourself, you can not decide about the solvability, but you can still ask for the file and/or its listing on the screen.
    evaluator: [python,services/gimme_instance_server.py]
    args:
      input_mode:
        regex: ^(random|seed|instance_id)$
        default: random
        explain: 'choose the way to input your instance among:' 
        explain1: '[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain2: '[instance_id] the service get the instance selected generated with make'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of rows of the matrix.'
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the matrix.
      seed:
        explain: 'This argument is needed only when you already hold a specific instance descriptor and are only interested in obtaining the instance file downloaded in local and/or just its listing on your terminal screen. By a \''descriptor\'' we mean a triple <m,n,seed> that you hold from previous calls to this or other services of the Asteroid problem.'
        regex: ^([1-9][0-9]{5,5})$
        default: 123456
      instance_id:
        regex: ^(-1|[0-9]*)$
        default: -1
        explain: 'If different from -1 then the dat file and the input.txt files are selected from the files automatically generated by the server'
      format:
        regex: ^(only_matrix.txt|with_m_and_n.txt|dat)$
        default: only_matrix.txt
        explain: 'choose how to encode the txt input file.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      # display:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: If this flag is set to 1 then the instance file is listed by the service.
      # download:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: 'If this flag is set to 1 then the instance file is downloaded in the \''download\'' sub-folder of the folder from which this TALight service call has been issued.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  feasible_solution:
    description: We give you a matrix with asteroids and you have to return the minimum number of laser beams to destroy all of them.
    evaluator: [python,services/check_solution_server.py]
    args:
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: Level of difficulty of the problem.
      goal:
        regex: ^check_feasibiliy$
        default: check_feasibiliy
      seed:
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  optimal_solution:
    description: We give you a matrix with asteroids and you have to return the minimum number of laser beams to destroy all of them.
    evaluator: [python,services/check_solution_server.py]
    args:
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: Level of difficulty of the problem.
      goal:
        regex: ^check_optimality$
        default: check_optimality
      seed:
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  indipendent_asteroids:
    description: You have to give us the set of indipendent asteroids.
    evaluator: [python, services/indipendent_asteroids_server.py]
    args:
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: Level of difficulty of the problem.
      seed:
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)
      goal:
        explain: Set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      with_opt_cert:
        regex: ^(0|1)$
        default: 1
      code_lang: 
        explain: The more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it  
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

##possibili altri servizi ? , ora sono presenti le domande come nell'esame di ricerca operativa
...
