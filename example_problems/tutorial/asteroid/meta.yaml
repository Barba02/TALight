%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: 'This service provides you with instances of the Asteroid problem, i.e., 0/1-matrices with the given number of rows (argument m) and columns (argument n). You have two main options when calling this service:\n    [instance_spec=catalogue_name] to get the instance with a specific id out from the named catalogue of hardcoded instances.\n    [instance_spec=random] to get the pseudo-random instance for a given seed. As seed, you can use any integer from 100000 to 999999 or let the service choose the seed at random (seed=random_seed). When you want to recall a 0/1-matrix you have already met with this or other services, you only need to recall its seed and the other details in its instance descriptor. By the \''instance descriptor\'' of a pseudo-random Asteroid instance we mean the triple <m,n,seed>.\n   The 0/1-matrix comprising the instance is returned by the service in the form of a stream. You may ask for this stream to get downloaded in a file on your local machine and/or displayed on the screen. Our format for streams storing 0/1-matrices is the following: the first line contains the two integers m and n; then follow m lines, one for each row. The i-th of these lines displays the n binary digits of the i-th row of the matrix, the j-th bit being the element in the j-th column. It is assumed that the row and column indexes start from 1.'
    evaluator: [python,services/gimme_instance_server.py]
    args:
      instance_spec:
        regex: ^(random|catalogue1)$
        default: random
        explain: 'choose an option among:' 
        explain1: '[random] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain2: '[catalogue1] the service will return an instance taken from a catalogue of hardcoded instances (the catalogue named \''catalogue1\''). More precisely, the instance returned is the one with the given instance_id.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the 0,1-matrix which reports the positions of the asteroids.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the 0,1-matrix which reports the positions of the asteroids.
      seed:
        explain: 'Set up this argument when you hold the seed and instance descriptor of the specific instance that you want to be produced by the service (whether downloaded in local as a file or displayed on your terminal screen). By an \''instance descriptor\'' we mean a triple <m,n,seed> that you may have got from previous calls to this or other services for this problem. When this argument is left to its default value (random_seed) then the service first chooses a seed at random (and communicates it to the user) and then produces the pseudo-random instance <m,n,seed>.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument instance_spec. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      format:
        regex: ^(only_matrix.txt|with_m_and_n.txt|dat)$
        default: only_matrix.txt
        explain: 'choose how to encode the txt input file.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      # display:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: If this flag is set to 1 then the instance file is listed by the service.
      # download:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: 'If this flag is set to 1 then the instance file is downloaded in the \''download\'' sub-folder of the folder from which this TALight service call has been issued.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_feasibiliy_of_your_laser_beams:
    description: We give you a matrix with asteroids and you have to shoot out sufficient laser beams in order to destroy all of the asteroids. In other words, your task is to identify a set of rows and columns of the matrix that cover all the asteroids. This service is meant to verify this property.
    evaluator: [python,services/check_solution_server.py]
    args:
      instance_spec:
        regex: ^(random|catalogue1|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|catalogue1|terminal|TA_send_files_bot)$
        default: random
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[random] the service uses the pseudo-random instance <m,n,seed>.'
        explain2: '[catalogue1] the service uses the hardcoded instance of the given instance_id as taken from the catalogue of hardcoded instances named catalogue1.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -ainstance_spec=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the 0,1-matrix which reports the positions of the asteroids.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the 0,1-matrix which reports the positions of the asteroids.
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to reproduce an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      instance_id:
        regex: ^([1-9][0-9]*)$
        default: 1
        explain: 'This argument is taken into account when the name of a catalogue of hardcoded instances is passed as argument instance_spec. It is used to identify a particular instance within the named catalogue of hardcoded instances. If you hold the whole problem in local (all sources) then the catalogues of hardcoded instances are automatically set up by the make command when setting up the server.'
      sol_style:
        regex: ^(seq|subset)$
        default: seq
        explain: 'choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively.'
        example: '[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3'
      goal:
        regex: ^check_feasibiliy$
        default: check_feasibiliy
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_optimality_of_your_laser_beams:
    description: We give you a matrix with asteroids and you have to return the minimum number of laser beams capable of destroying them all. You can use a laser beam to destroy all asteroids laying on a same row or column of the matix. This service checks that no solution exists using less beams.
    evaluator: [python,services/check_solution_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|seed|terminal|TA_send_files_bot)$
        default: random
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of rows of the 0,1-matrix reporting the asteroids\''s positions.'
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of columns of the 0,1-matrix reporting the asteroids\''s positions.'
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      sol_style:
        regex: ^(seq|subset)$
        default: seq
        explain: 'choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively.'
        example: '[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3'
      goal:
        regex: ^check_optimality$
        default: check_optimality
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_feasibility_independent_asteroids_subset:
    description: You have to give us the set of indipendent asteroids.
    evaluator: [python, services/check_dual_solution_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|seed|terminal|TA_send_files_bot)$
        default: random
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of rows of the 0,1-matrix reporting the asteroids\''s positions.'
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of columns of the 0,1-matrix reporting the asteroids\''s positions.'
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      goal:
        regex: ^check_feasibiliy$
        default: check_feasibiliy
      feedback:
        regex: ^only_check$
        default: only_check
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_optimality_independent_asteroids_subset:
    description: You have to give us the set of indipendent asteroids.
    evaluator: [python, services/check_dual_solution_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|seed|terminal|TA_send_files_bot)$
        default: random
        explain: 'choose the way to input your instance (a binary matrix) among the following:' 
        explain1: '[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>.'
        explain2: '[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>.'
        explain3: '[terminal] you enter your instance directly by either typing it line after line or through cut and paste operations.'
        # explain4: '[TA_send_files_bot] with this, you can send to the service an instance encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the asteroid/bots/ directory. Call the service with: rtal connect asteroid compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_instance.txt.'
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of rows of the 0,1-matrix reporting the asteroids\''s positions.'
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: 'Number of columns of the 0,1-matrix reporting the asteroids\''s positions.'
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      feedback:
        regex: ^(only_check|give_a_better_solution_if_any)$
        default: only_check
        explain: using this argument you can ask to be given a feasible solution using less laser beams (if one exists). Use only when convenient to you (slightly spoilering).
      goal:
        regex: ^check_optimality$
        default: check_optimality
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)
      goal:
        explain: Set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      with_opt_cert:
        regex: ^(0|1)$
        default: 1
      code_lang: 
        explain: The more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it  
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

##possibili altri servizi ? , ora sono presenti le domande come nell'esame di ricerca operativa
...
