public_folder: public
services:
  minimum_laser:
    description: We give you a matrix with asteroids and you have to return the minimum number of laser beams to destroy all of them.
    evaluator: [python,services/minimum_laser_server.py]
    args:
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: Level of difficulty of the problem.
      seed:
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  indipendent_asteroids:
    description: You have to give us the set of indipendent asteroids.
    evaluator: [python, services/indipendent_asteroids_server.py]
    args:
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: Level of difficulty of the problem.
      seed:
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      seed:
        regex: ^(random_seed|[1-9]|[0-9]{5,5})$
        default: random_seed
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)
      goal:
        explain: Set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      with_opt_cert:
        regex: ^(0|1)$
        default: 1
      code_lang: 
        explain: The more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it  
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

##possibili altri servizi ? , ora sono presenti le domande come nell'esame di ricerca operativa
