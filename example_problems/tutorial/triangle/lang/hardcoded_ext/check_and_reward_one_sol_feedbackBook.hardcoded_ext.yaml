%YAML 1.2
---
open-channel: '# I will serve: problem={problem}, service={service}\n#  with arguments: '
feedback_source: '# These information in english come from the following files\n#   the phrases externally structuring the help sheets of the synopsis service come from the file \''.../TALight/universal_services/synopsis/synopsis_feedbackBook.hardcoded_ext.yaml\''\n#   the problem specific information for the service this help sheet is about (service {self.ENV.service} of the problem {self.ENV.problem})  come from a dictionary of the feedback phrases of the service (more precisley, the .yaml file ({self.messages_book_file})\''.'

#NOW THE PROBLEM SERVICE SPECIFIC SECTION:

path-too-short: 'The string of the L/R choices encoding your path is too short for a triangle with n={ENV["n"]} rows.'
path-too-long: 'The string of the L/R choices encoding your path is too long for a triangle with n={ENV["n"]} rows.'
wrong-path-length: 'The true number of required choices is n-1={ENV["n"]-1} instead of {len(ENV["path"].replace(" ", ""))}.'
insert-triangle: 'Please, insert your triangle, line by line. For every i in [1,{ENV["n"]}], line i comprises i integers separated by spaces.'
insert-line: 'Insert line i={i}, that is, {i} integers separated by spaces:'
triangle-insertion-completed: 'Insertion complete. Your triangle has been successfully inserted.'
feasible-path: 'Your solution path ({ENV["path"]}) is a feasible one for this problem since it comprises {ENV["n"]-1} subsequent choices of directions (the correct number).'
display-triangle: 'The triangle of reference is the following:'
path-reward-values: 'Your path collects the following reward values when descending the triangle:'
path-reward: 'The total reward collected by your path is {tl.calculate_path(triangle,ENV["path"].replace(" ", ""))[1]}.'
