%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: This service provides you with a random triangle of integer numbers. The argument n specifyies the number of rows of the triangle. For i=1,...,n the i-th row of the triangle comprises i integers in the interval [MIN_VAL,MAX_VAL]. You can opt to insert the seed yourself, or ask the service to choose the seed (and hence the actual triangle <n,MIN_VAL,MAX_VAL,seed>).
    evaluator: [python,services/gimme_instance_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      seed:
        explain: The argument `seed` of this service is either a six digit number or the string `random_seed`. In the first case, then the service yields and returns the pseudo-random instance <n,MIN_VAL,MAX_VAL,seed>. In the second case, the service first generate a valid numeric seed and then returns the corresponding pseudo-random instance <n,MIN_VAL,MAX_VAL,seed>. In either case, the service displays both the instance and the the seed used for its generation.  
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_one_sol:
    description: this service checks whether a path is a fasible solution for a given triangle.
    evaluator: [python, services/check_one_sol_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      how_to_input_the_triangle:
        regex: ^(lazy|([1-9][0-9]{5,5}))$
        explain: you can either enter the code (random seed) of one of our instances <n,MIN_VAL,MAX_VAL,seed> defining a triangle you may have already encountered in other services for this problem or ask to enter your triangle once the service has started up (lazy)
      path:
        regex: ^(lazy|(L|R){0,99})$
        explain: you can either enter the path from the top vertex of the triangle (a sequence in {{L,R}}^(n-1)) or ask to enter your path once the service has started up (lazy)
      silent:
        explain: if nothing is wrong with your solution for the triangle you have specified us (through seed) then the service runs silently; otherwise it explain what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_sol_value:
    description: call this service to check whether the value of a path in a triangle of <n> rows is the optimal one (<risp>).
    evaluator: [python, services/check_sol_value_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      how_to_input_the_triangle:
        regex: ^(lazy|([1-9][0-9]{5,5}))$
        explain: you can either enter the code (random seed) of one of our instances <n,MIN_VAL,MAX_VAL,seed> defining a triangle you may have already encountered in other services for this problem or ask to enter your triangle once the service has started up (lazy)
      sol_value:
        regex: ^(lazy|(L|R){0,99}|[0-9]{1,4})$
        explain: this is the solution you consider as the best one for the triangle you chose. You can either insert the path you think leads to the best solution or you can insert the value of the solution you consider the best. You can also ask to enter your path once the service has started up (lazy).
      silent:  
        explain: if nothing is wrong with your solution for the triangle you have specified us (through seed) then the service runs silently; otherwise it explain what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_path_value:
    description: call this service to check that the value of a path in a triangle of <n> rows is what you think (<risp>). 
    evaluator: [python, services/check_path_value_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      how_to_input_the_triangle:
        regex: ^(lazy|([1-9][0-9]{5,5}))$
        explain: you can either enter the code (random seed) of one of our instances <n,MIN_VAL,MAX_VAL,seed> defining a triangle you may have already encountered in other services for this problem or ask to enter your triangle once the service has started up (lazy)
      path_value:
        explain: the service checks that this number equals or not the value of the path, that is, the sum of the values comprising the triangle which are traversed by your path.
        regex: ^([0-9]{1,4})$
      path:
        regex: ^(lazy|(L|R){0,99})$
        explain: you can either enter the path from the top vertex of the triangle (a sequence in {{L,R}}^(n-1)) or ask to enter your path once the service has started up (lazy)
      silent:
        explain: if nothing is wrong with your solution for the triangle you have specified us (through seed) then the service runs silently; otherwise it explain what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  

...
