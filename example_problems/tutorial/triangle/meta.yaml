%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    evaluator: [python,services/gimme_instance_driver.py]
    description: 'An instance of the Triangle Problem consists of two triangles, one bigger than the other, each one with its own parameters, such as the number of lines, the minimum and the maximum value they can contain and the seed that has generated it. Furthermore, you will be provided a path (consisting of a string encoded with "L" or "R"). Call this service (`gimme_instance`) to get an instance of your likings in one of the supported formats. The instances may come from different sources (randomly generated, hardcoded, taken from a collection) and the server maintains a certain set of them within a catalogue. This catalogue is organized in collections of instances with common features, like e.g. their origin. The service can be used to get either a random instance or an instance from the catalogue.\n   The two strings s and t comprising the instance are returned by the service in the form of a stream. You may ask for this stream to get downloaded in a file on your local machine and/or displayed on the screen. For your convenience, the precise format of this stream can be regulated through the argument `instance_format`. This service provides you with a random triangle of integer numbers. The argument n specifies the number of rows of the triangle. For i=1,...,n the i-th row of the triangle comprises i integers in the interval [MIN_VAL,MAX_VAL]. You can opt to insert the seed yourself, or ask the service to choose the seed (and hence the actual triangle <n,MIN_VAL,MAX_VAL,seed>).'
    args:
      source:
        regex: ^(catalogue|randgen_1)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [random_generator_name] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n    [randgen_1] to get the instance produced by the pseudo-random generator `randgen_1`. The "instance descriptor"  for this generator comprises 9 required parameters: `m`, `n`, `MIN_VAL`, `MAX_VAL`, `MIN_VAL_BIG`, `MAX_VAL_BIG`, `seed`, `big_seed`, `path`. The service then generates and returns the pseudo-random instance randgen_1<m,n,MIN_VAL,MAX_VAL,MIN_VAL_BIG,MAX_VAL_BIG,seed,big_seed,path>.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      m:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 10
        explain: Number of lines of the big triangle.
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 5
        explain: Number of lines of the small triangle.
      MIN_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MAX_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MIN_VAL_BIG:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the big triangle are integers in the interval [MIN_VAL_BIG,MAX_VAL_BIG]
      MAX_VAL_BIG:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the big triangle are integers in the interval [MIN_VAL_BIG,MAX_VAL_BIG]
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      big_seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      path:
        regex: ^(random_path|(L|R){0,99})$
        regex-explained: 'either the string "random_path" or a path encoded in {{L,R}}^(n-1))'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_path
        explain: "a solution for a given triangle instance is a path from the top vertex of the triangle to an element of its last (bottom) row. The path always has two options when moving from one row to the next: either go left (L) or right (R). Hence feasible paths are encoded as sequence in {{L,R}}^(n-1))."
      instance_format:
        regex: ^(pyramid|in_lines)$
        default: in_lines
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[pyramid] contains the representation of the triangles in a pyramidal shape'
        explain2: '[in_lines] contains the representation of the triangles line by line.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  solve:
    evaluator: [python, services/solve_driver.py]
    description: 'This service provides you with a solution for a given instance of the Triangle problem. You can either upload the instance file on the `instance` filehandler of the service, using the `-f` option of the `connect` subcommand of `rtal`, or try to input your instance directly from the terminal (supported only in `only_strings` format) once the service has started. You may also specify a pseudo-random instance by providing its instance description for a selected generator. This last option might ease your calling this service on instances encounterd with other services.'
    files:
      - instance
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [random_generator_name] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n    [randgen_1] to get the instance produced by the pseudo-random generator `randgen_1`. The "instance descriptor"  for this generator comprises 9 required parameters: `m`, `n`, `MIN_VAL`, `MAX_VAL`, `MIN_VAL_BIG`, `MAX_VAL_BIG`, `seed`, `big_seed`, `path`. The service then generates and returns the pseudo-random instance randgen_1<m,n,MIN_VAL,MAX_VAL,MIN_VAL_BIG,MAX_VAL_BIG,seed,big_seed,path>.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      m:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 10
        explain: Number of lines of the big triangle.
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 5
        explain: Number of lines of the small triangle.
      MIN_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MAX_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MIN_VAL_BIG:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the big triangle are integers in the interval [MIN_VAL_BIG,MAX_VAL_BIG]
      MAX_VAL_BIG:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the big triangle are integers in the interval [MIN_VAL_BIG,MAX_VAL_BIG]
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      big_seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      path:
        regex: ^(random_path|(L|R){0,99})$
        regex-explained: 'either the string "random_path" or a path encoded in {{L,R}}^(n-1))'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_path
        explain: "a solution for a given triangle instance is a path from the top vertex of the triangle to an element of its last (bottom) row. The path always has two options when moving from one row to the next: either go left (L) or right (R). Hence feasible paths are encoded as sequence in {{L,R}}^(n-1))."
      instance_format:
        regex: ^(pyramid|in_lines)$
        default: in_lines
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[pyramid] contains the representation of the triangles in a pyramidal shape'
        explain2: '[in_lines] contains the representation of the triangles line by line.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
        
  check_feasible_sol:
    description: this service asks you to check whether the path we give you is a feasible solution for a given pseudo-random triangle.
    evaluator: [python, services/check_feasible_sol_driver.py]
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [random_generator_name] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n    [randgen_1] to get the instance produced by the pseudo-random generator `randgen_1`. The "instance descriptor"  for this generator comprises 9 required parameters: `m`, `n`, `MIN_VAL`, `MAX_VAL`, `MIN_VAL_BIG`, `MAX_VAL_BIG`, `seed`, `big_seed`, `path`. The service then generates and returns the pseudo-random instance randgen_1<m,n,MIN_VAL,MAX_VAL,MIN_VAL_BIG,MAX_VAL_BIG,seed,big_seed,path>.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(pyramid|in_lines)$
        default: in_lines
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[pyramid] contains the representation of the triangles in a pyramidal shape'
        explain2: '[in_lines] contains the representation of the triangles line by line.'
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 5
        explain: Number of lines of the small triangle.
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      silent:  
        explain: if nothing is wrong with your answer then the service runs silently; otherwise it explains what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
        
  check_and_reward_one_sol:
    evaluator: [python, services/check_and_reward_one_sol_driver.py]
    description: this service checks whether a path descending from the top vertex is a feasible solution for a given triangle and, in case it is, returns the reward collected by the path.
    args:
      source:
        regex: ^(catalogue|terminal|randgen_1)$
        default: terminal
        explain: 'To send to the service an instance contained in a file sitting on your machine, you do not need to set this argument: just call the service with:\n       rtal connect triangle solve -finstance=fullpath_of_your_instance_file\n   The source argument is used only when you do not associate a local file to the instance filehandler. If so, it determines the way your instance is input to the service:' 
        explain1: '[terminal] you enter your instance (just two strings containing the parameters, one for each triangle; no other formats supported) directly by either typing it directly or through cut and paste.'
        explain2: '[randgen_1] the service works on the pseudo-random instance `randgen_1<m,n,MIN_VAL,MAX_VAL,MIN_VAL_BIG,MAX_VAL_BIG,seed,big_seed,path>`. In this case you should specify the values for the service arguments comprising the instance descriptor, when different from their defaul values.'
        explain3: '[catalogue] the service works on an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(pyramid|in_lines)$
        default: in_lines
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[pyramid] contains the representation of the triangles in a pyramidal shape'
        explain2: '[in_lines] contains the representation of the triangles line by line.'
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 5
        explain: Number of lines of the small triangle.
      MIN_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MAX_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      path:
        regex: ^(my_path|(L|R){0,99})$
        regex-explained: 'either the string "my_path" or a sequence in {{L,R}}^(n-1)).'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: my_path
        explain: "a solution for a given triangle instance is a path from the top vertex of the triangle to an element of its last (bottom) row. The path always has two options when moving from one row to the next: either go left (L) or right (R). Hence feasible paths are encoded as sequence in {{L,R}}^(n-1))."
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      silent:  
        explain: if nothing is wrong with your answer then the service runs silently; otherwise it explains what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
        
  check_best_sol:
    evaluator: [python, services/check_best_sol_driver.py]
    description: for a given triangle of integer numbers, the problem triangle asks you to find a path descending from its top vertex while maximizing the sum of the numbers on the visited positions. If you think to know what the best value is, you can call this service for confirmation. You can also ask the service to tell you what the true optimum value is.
    args:
      source:
        regex: ^(catalogue|terminal|randgen_1)$
        default: terminal
        explain: 'To send to the service an instance contained in a file sitting on your machine, you do not need to set this argument: just call the service with:\n       rtal connect triangle solve -finstance=fullpath_of_your_instance_file\n   The source argument is used only when you do not associate a local file to the instance filehandler. If so, it determines the way your instance is input to the service:' 
        explain1: '[terminal] you enter your instance (just two strings containing the parameters, one for each triangle; no other formats supported) directly by either typing it directly or through cut and paste.'
        explain2: '[randgen_1] the service works on the pseudo-random instance `randgen_1<m,n,MIN_VAL,MAX_VAL,MIN_VAL_BIG,MAX_VAL_BIG,seed,big_seed,path>`. In this case you should specify the values for the service arguments comprising the instance descriptor, when different from their defaul values.'
        explain3: '[catalogue] the service works on an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      instance_format:
        regex: ^(pyramid|in_lines)$
        default: in_lines
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[pyramid] contains the representation of the triangles in a pyramidal shape'
        explain2: '[in_lines] contains the representation of the triangles line by line.'
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      opt_sol_val:
        regex: ^(0|[1-9][0-9]{0,5})$
        default: 0
        explain: Use this argument to tell the service what you conjecture to be the maximum reward possible over all feasible paths. Leave this argument to its default value in case you have non conjecture and only intend to use this service to be told about the optimum value. A solution for a given triangle instance is a path from the top vertex of the triangle to an element of its last (bottom) row. Such a path is rewarded with the sum of the integers contained in the visited positions of the triangle. We are interested in maximizing this reward. 
      check_also_path:
        regex: ^(0|1)$
        default: 0
        explain: if you want to see the path associated with the optimal solution, then set this flag to 1
      silent:  
        explain: if nothing is wrong with your solution for the triangle you have specified us (through seed) then the service runs silently; otherwise it explains what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  check_number_of_triangles_in_triangle:
    description: this service asks you to count how many times a given triangle fits inside a bigger triangle.
    evaluator: [python, services/check_number_of_triangles_in_triangle_driver.py]
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: terminal
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [random_generator_name] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n    [randgen_1] to get the instance produced by the pseudo-random generator `randgen_1`. The "instance descriptor"  for this generator comprises 9 required parameters: `m`, `n`, `MIN_VAL`, `MAX_VAL`, `MIN_VAL_BIG`, `MAX_VAL_BIG`, `seed`, `big_seed`, `path`. The service then generates and returns the pseudo-random instance randgen_1<m,n,MIN_VAL,MAX_VAL,MIN_VAL_BIG,MAX_VAL_BIG,seed,big_seed,path>.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      m:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 10
        explain: Number of lines of the big triangle.
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 5
        explain: Number of lines of the small triangle.
      MIN_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MAX_VAL:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the small triangle are integers in the interval [MIN_VAL,MAX_VAL]
      MIN_VAL_BIG:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 0
        explain: All numbers of the big triangle are integers in the interval [MIN_VAL_BIG,MAX_VAL_BIG]
      MAX_VAL_BIG:
        regex: ^([1-9][0-9]{0,1}|100)$
        regex-explained: a positive natural <= 100
        default: 99
        explain: All numbers of the big triangle are integers in the interval [MIN_VAL_BIG,MAX_VAL_BIG]
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      big_seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      instance_format:
        regex: ^(pyramid|in_lines)$
        default: in_lines
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[pyramid] contains the representation of the triangles in a pyramidal shape'
        explain2: '[in_lines] contains the representation of the triangles line by line.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      display_sol:
        explain: when this flag is set to 1 then the immersions of the small triangle into the big triangle are displayed.
        regex: ^(0|1)$
        default: 1
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      
  eval_feasible_sol:
    evaluator: [python, services/eval_feasible_sol_driver.py]
    description: "this service evaluates your code which has to provide a feasible solution for a given triangle of integer numbers. A feasible soluton is a descending path in the triamgle starting from the top vertex and reaching on element inthe last row. This path visits precisely one element for each of the n rows of the triangle and we assume it is encoded as a sequence in {L,R}^(n-1) (regex: (L|R){n-1,n-1}), where the i-th symbol of the sequence specifies whether the path turns Left or Right at the i-th step."
    args:
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|time_at_most_2_exp_n|time_at_most_n_exp_2)$
        default: correct
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python

  eval_and_reward_one_sol:
    description: this service evaluates your code which calculates the reward for a given path in a triangle.
    evaluator: [python, services/eval_and_reward_one_sol_driver.py]
    args:
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|time_at_most_2_exp_n|time_at_most_n_exp_2)$
        default: correct
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python

  eval_best_sol:
    description: this service evaluates your code which calculates the maximum reward collectable by a path descending in a triangle.
    evaluator: [python, services/eval_best_sol_driver.py]
    args:
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|time_at_most_2_exp_n|time_at_most_n_exp_2)$
        default: correct
      check_also_sol:
        explain: when this flag is set to 1 then the service expects and checks also the solution, not only its value.
        regex: ^(0|1)$
        default: 0
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to replicate the very same behaviour as in a previous call to this service. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and proceeds deterministically from that seed.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed

  eval_number_of_triangles_in_triangle:
    description: this service evaluates your code which takes in input two triangles and calculates the number of occurences of the small triangle withing the big one.
    evaluator: [python, services/eval_number_of_triangles_in_triangle_driver.py]
    args:
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|time_at_most_2_exp_n|time_at_most_n_exp_2)$
        default: correct
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters meaning one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: hardcoded
      metafile:
        regex: ^(main|en|it)$
        default: main
...
