%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: This service provides you with a random triangle of integer numbers. The argument n specifyies the number of rows of the triangle. For i=1,...,n the i-th row of the triangle comprises i integers in the interval [MIN_VAL,MAX_VAL]. You can opt to insert the seed yourself, or ask the service to choose the seed (and hence the actual triangle <n,MIN_VAL,MAX_VAL,seed>).
    evaluator: [python,services/gimme_instance_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      seed:
        explain: The argument `seed` of this service is either a six digit number or the string `random_seed`. In the first case, then the service yields and returns the pseudo-random instance <n,MIN_VAL,MAX_VAL,seed>. In the second case, the service first generate a valid numeric seed and then returns the corresponding pseudo-random instance <n,MIN_VAL,MAX_VAL,seed>. In either case, the service displays both the instance and the the seed used for its generation.  
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      file_format:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_and_reward_one_sol:
    description: this service checks whether a path is a fasible solution for a given triangle.
    evaluator: [python, services/check_and_reward_one_sol_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      how_to_input_the_triangle:
        regex: ^(my_own_triangle|([1-9][0-9]{5,5}))$
        explain: if you enter a seed (an integer in the range [100000,999999]) then the service acts on the pseudo-random triangle <n,MIN_VAL,MAX_VAL,seed>, which you might have previously encountered in previous calls to this or other services for this problem. Otherwise, if how_to_input_the_triangle=my_own_triangle, the service allows you to enter your own triangle.
        default: my_own_triangle
      path:
        regex: ^((L|R){0,99})$
        explain: "a solution for a given triangle instance is a path from the top vertex of the triangle to an element of its last (bottom) row. The path always has two options when moving from one row to the next: either go left (L) or right (R). Hence feasible paths are encoded as sequence in {{L,R}}^(n-1))."
      silent:
        explain: if silent=1 and nothing is wrong with your solution for the given triangle, then the service runs silently; otherwise either it confirms the validity of your path or explains what the problem is.
        regex: ^(0|1)$
        default: 0
      display_triangle:
        explain: when this flag is set to 1 then the triangle is displayed before providing any feedback on the path.
        regex: ^(0|1)$
        default: 1
      reward_the_path:
        explain: if this argument is set to 1 then your path in the triangle is rewarded with the sum of the integers contained in the visited positions of the triangle.
        regex: ^(0|1)$
        default: 1
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_sol_optimality:
    description: for a given triangle of integer numbers, the problem triangle asks you to find a path descending from its top vertex while maximizing the sum of the numbers on the visited positions. This service allows you to check the optimality of a path or the optimal solution value.
    evaluator: [python, services/check_sol_optimality_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      how_to_input_the_triangle:
        regex: ^(my_own_triangle|([1-9][0-9]{5,5}))$
        explain: if you enter a seed (an integer in the range [100000,999999]) then the service acts on the pseudo-random triangle <n,MIN_VAL,MAX_VAL,seed>, which you might have previously encountered in previous calls to this or other services for this problem. Otherwise, if how_to_input_the_triangle=my_own_triangle, the service allows you to enter your own triangle.
        default: my_own_triangle
      opt_sol_val:
        regex: ^0|(|-)[1-9][0-9]{0,5}$
        explain: A solution for a given triangle instance is a path from the top vertex of the triangle to an element of its last (bottom) row. Such a path is rewarded with the sum of the integers contained in the visited positions of the triangle. We are interested in maximizing this reward. Use the argument `opt_sol_val` to input to the service what you conjecture the maximum reward over all possible feasible paths.
      feedback:
        regex: ^(yes_no|bigger_or_smaller|true_opt_val)$
        default: yes_no
        explain: "the options are as follows:"
        explain1: -yes_no= just tell me whether <opt_sol_val> is or is not the optimal solution value.
        explain2: -bigger_or_smaller= tell me whether the optimal solution value is bigger or smaller than <opt_sol_val>, in case they differ.
        explain3: -true_opt_val= please, tell me the true optimal solution value.
      silent:  
        explain: if nothing is wrong with your solution for the triangle you have specified us (through seed) then the service runs silently; otherwise it explain what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_longest_increasing_subseq:
    evaluator: [python, services/check_longest_increasing_subseq_server.py]
    args:
      T:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input)$
        default: lazy_input
      max_len_min_k:
        regex: ^(0|[1-9][0-9]{0,50}|lazy_input)$
        default: lazy_input
      feas_subseq:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input|none)$
        default: lazy_input
      coloring:
        regex: ^((([1-9][0-9]{0,9} )*[1-9][0-9]{0,9})|lazy_input|none)$
        default: none
      feedback_level:
        regex: ^(complete_subseq|subseq_prefix|no_feedback)$
        default: complete_subseq
      more_or_less_hint_if_wrong_max_len_min_k:
        regex: ^(0|1)$
        default: 0
      YES_cert:
        regex: ^(0|1)$
        default: 1
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  

...
