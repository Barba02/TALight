%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: This service provides you with a random triangle of integer numbers. The argument n specifyies the number of rows of the triangle. For i=1,...,n the i-th row of the triangle comprises i integers in the interval [MIN_VAL,MAX_VAL]. You can opt to insert the seed yourself, or ask the service to choose the seed (and hence the actual triangle <n,MIN_VAL,MAX_VAL,seed>).
    evaluator: [python,services/gimme_instance_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      seed:
        explain: The argument `seed` of this service is a six digit number. When the first digit is not 0, then the service yields the pseudo-random instance <n,MIN_VAL,MAX_VAL,seed>. Otherwise, when the first digit is 0, then all digits should be 0. The \'000000\' code is the default argument for this parameter and is used to ask the service to choose the seed at random and communicate it together with the pseudo-random instance <n,MIN_VAL,MAX_VAL,seed>. 
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_one_sol:
    description: this service checks whether a path is a fasible solution for a given triangle and evaluates its value.
    evaluator: [python, services/check_one_sol_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|100)$
        explain: the number of rows of the triangle
        default: 5
      MIN_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 0
      MAX_VAL:
        regex: ^(0|[1-9][0-9]{0,1})$
        explain: all numbers of the triangle are integers in the interval [MIN_VAL,MAX_VAL]
        default: 99
      how_to_input_the_triangle:
        regex: ^(lazy|([1-9][0-9]{5,5}))$
        explain: you can either enter the code (random seed) of one of our instances <n,MIN_VAL,MAX_VAL,seed> defining a triangle you may have already encountered in other services for this problem or ask to enter your triangle once the service has started up (lazy)
      sol_value:
        explain: when this argument is set other than `not_relevant`, then it is a natural number and the service checks that this number equals the value of the path, that is, the sum of the values comprising the triangle which are traversed by your path.
        regex: ^(not_relevant|[0-9]{1,4})$
        default: not_relevant
      path:
        regex: ^(lazy|(L|R){0,99})$
        explain: you can either enter the path fron the top vertex of the triangle (a sequence in {{L,R}}^(n-1)) or ask to enter your path once the service has started up (lazy)
      silent:
        explain: if nothing is wrong with your solution for the triangle you have specified us (through seed) then the service runs silently; otherwise it explain what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_num_sol:
    description: call this service to check that the number of different paths in a triangle of <n> rows is what you think (<risp>).
    evaluator: [python, services/check_num_sol_server.py]
    args:
      n:
        regex: ^(0|[1-9][0-9]{0,1}|100)$
      risp:
        regex: ^(0|[1-9][0-9]{0,50})$
        explain: use to specify your conjectured answer for the number of possible paths in a triangle of <n> rows.
      ok_if_congruent_modulus:
        explain: when n grows the number of solutions gets huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers. Otherwise, computing the number modulo <ok_if_congruent_modulus> will suffice in assessing you got the right ideas.  
        regex: ^(0|[1-9][0-9]{0,10})$
#        default: 0
        default: 1000000007
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        explain: when the flag silent is set then the service runs silently unless your conjectured answer is wrong (or for wrong calls).
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_num_sol:
    evaluator: [python, services/eval_num_sol_server.py]
    args:
      answ_modulus:
        explain: when n grows the number of solutions gets huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers. Otherwise, computing the number modulo <answ_modulus> will suffice in assessing you got the right ideas.  
        regex: ^(0|[1-9][0-9]{0,10})$
#        default: 0
        default: 1000000007
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
...
