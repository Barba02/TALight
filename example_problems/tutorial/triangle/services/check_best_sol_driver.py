#!/usr/bin/env python3
from sys import stderr, exit
import random

from multilanguage import Env, Lang, TALcolors
from TALinputs import TALinput
from TALfiles import TALfilesHelper

import triangle_lib as tl

# METADATA OF THIS TAL_SERVICE:
args_list = [
    ('source',str),
    ('instance_id',int),
    ('instance_format',str),
    ('n',int),
    ('MIN_VAL',int),
    ('MAX_VAL',int),
    ('seed',str),
    ('opt_sol_val',int),
    ('display',bool),
    ('silent',bool),
    ('check_also_path',bool),
]


ENV =Env(args_list)
TAc =TALcolors(ENV)
LANG=Lang(ENV, TAc, lambda fstring: eval(f"f'{fstring}'"))
TALf = TALfilesHelper(TAc, ENV)

#CHECK MIN_VAL <= MAX_VAL

if ENV['MIN_VAL'] > ENV['MAX_VAL']:
    TAc.NO()
    TAc.print(LANG.render_feedback("range-is-empty", f"Error: I can not choose the integers for the triangle from the range [{MIN_VAL},{MAX_VAL}] since this range is empty.", {"MIN_VAL":MIN_VAL, "MAX_VAL":MAX_VAL}), "red", ["bold"])
    exit(0)
    
# START CODING YOUR SERVICE: 

# TRIANGLE GENERATION
if TALf.exists_input_file('instance'):
    instance = tl.get_instance_from_str(TALf.input_file_as_str('instance'), instance_format_name=ENV["instance_format"])
    TAc.print(LANG.render_feedback("successful-load", 'The file you have associated to `instance` filehandler has been successfully loaded.'), "yellow", ["bold"])
elif ENV["source"] == 'terminal':
    instance = {}
    TAc.print(LANG.render_feedback("waiting", f'#? waiting for the first string describing the triangle.\nFormat: the first line contains all the parameters to create the triangle, each character must be separated by a space.\nE.G. n MIN_VAL MAX_VAL seed\n'), "yellow")
    TAc.print(LANG.render_feedback("first-triangle", f'Enter the string describing the triangle:'), "yellow", ["bold"]) 
    plain_first = TALinput(str, line_recognizer=lambda val,TAc, LANG: True, TAc=TAc, LANG=LANG)  
    n = int(plain_first[0])
    MIN_VAL = int(plain_first[1])
    MAX_VAL = int(plain_first[2])
    seed = int(plain_first[3])
    path = tl.random_path(n,n)
    plain_first.append(path)
    m = random.randint(1,20)
    big_seed = random.randint(100000,999999)
    instance = tl.instances_generator(1, 1, 0, 99, n, n, m, m, 0, 99, seed, big_seed, path)[0]
    instance_str = tl.instance_to_str(instance, format_name=ENV['instance_format'])
    output_filename = f"random_instance_{ENV['seed']}_{big_seed}.{ENV['instance_format']}.txt" 
    if len(plain_first) != 5:
        TAc.print(LANG.render_feedback("wrong-number-of-parameters", f'ERROR! Wrong number of parameters for the triangle. Expected 4, received {len(plain_first)-1}'), "red", ["bold"]) 
        exit(0)
elif ENV["source"] != 'catalogue':
    # Get random instance
    m = random.randint(1,20)
    if ENV['seed'] == "random_seed":
        seed = random.randint(100000,999999)
    else:
        seed = int(ENV['seed'])
    big_seed = random.randint(100000,999999)
    path = tl.random_path(ENV['n'],ENV['n'])
    if ENV["source"] == 'randgen_1':
        instance = tl.instances_generator(1, 1, ENV['MIN_VAL'], ENV['MAX_VAL'], ENV['n'], ENV['n'], m, m, 0, 99, seed, big_seed, path)[0]
        TAc.print(LANG.render_feedback("instance-generation-successful", f'The instance has been successfully generated by the pseudo-random generator {ENV["source"]} called with arguments:\nn={instance["n"]},\nMIN_VAL={instance["MIN_VAL"]},\nMAX_VAL={instance["MAX_VAL"]},\nseed={instance["seed"]}.'), "yellow", ["bold"])
    else:
        assert False
else: # take instance from catalogue
    instance_str = TALf.get_catalogue_instancefile_as_str_from_id_and_ext(ENV["instance_id"], format_extension=tl.format_name_to_file_extension(ENV["instance_format"],'instance'))
    instance = tl.get_instance_from_str(instance_str, instance_format_name=ENV["instance_format"])
    TAc.print(LANG.render_feedback("instance-from-catalogue-successful", f'The instance with instance_id={ENV["instance_id"]} has been successfully retrieved from the catalogue.'), "yellow", ["bold"])

if ENV['display']:
    TAc.print(LANG.render_feedback("this-is-the-instance", '\nThis is the instance:\n'), "white", ["bold"])
    tl.print_triangle(instance['triangle'],ENV['instance_format'])
    
if not ENV['opt_sol_val']: # manual insertion
    TAc.print(LANG.render_feedback("insert-opt-value", f'\nWrite here your conjectured optimal value for this triangle if you have one. Otherwise, if you only intend to be told about the optimal value, enter 0.'), "yellow", ["bold"])
    answer = TALinput(str, line_recognizer=lambda val,TAc, LANG: True, TAc=TAc, LANG=LANG)[0]
    if answer != 0:
        answer = int(answer)
else:
    answer = ENV['opt_sol_val']
        
best_reward, best_path = tl.best_reward_and_path(instance['triangle'])

if answer == 0:
        TAc.print(LANG.render_feedback("best-sol", f'The optimal solution value for this triangle is {best_reward}.'), "green", ["bold"])
        if ENV['check_also_path']:   
            TAc.print(LANG.render_feedback("best-path", f'The path associated to the optimal solution value is {best_path}.'), "green", ["bold"])
else:
    if answer == best_reward: 
        if not ENV['silent']:   
            TAc.print(LANG.render_feedback("right-best-sol", f'We agree, the solution value you provided is the best one for your triangle.'), "green", ["bold"])
            if ENV['check_also_path']:   
                TAc.print(LANG.render_feedback("best-path", f'The path associated to the optimal solution value is {best_path}.'), "green", ["bold"])
    else:
        TAc.NO()
        TAc.print(LANG.render_feedback("wrong-best-sol", f'We don\'t agree, the solution value you provided is not the best one for your triangle.'), "red", ["bold"])
    
           
exit(0)
