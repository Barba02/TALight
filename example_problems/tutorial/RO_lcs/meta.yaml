%YAML 1.2
---
public_folder: public
services:
  check:
    evaluator: [python, services/check_driver.py]
    description: "given two strings s and t, this service checks and gives feedback for an alleged longest common subsequence (LCS) for them, possibly subject to further constraints. The service can also be asked to check the correctness of specific dynamic programming (DP) tables for the strings s and t."
    args:
      # section with the instance assigned to the problem-solver/stud
      s:
        regex: ^([A-Z]*)$
        default: ACCIPICCHIA
        explain: is the first string
      t:
        regex: ^([A-Z]*)$
        default: MAMMACHIOCCIA
        explain: is the second string
      start_with:
        regex: ^(\*|[A-Z])$
        default: '*'
        explain: the common subsequence should start with this character. Using the mask character * vanifies this constraint
      end_with:
        regex: ^(\*|[A-Z])$
        default: '*'
        explain: the common subsequence should start with this character. Using the mask character * vanifies this constraint
      forbidden_s_interval_first_pos:
        regex: ^(0|[1-9][0-9]*)$
        default: 1000
        explain: the second string is always t, but the first string is actually obtained from s by dropping/forbidding those characters that fall within a closed interval [first_pos,last_pos]. Positions start from 0. When last_pos < first_pos then no character is dropped from s (the first string). 
      forbidden_s_interval_last_pos:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: the second string is always t, but the first string is actually obtained from s by dropping/forbidding those characters that fall within a closed interval [first_pos,last_pos]. Positions start from 0. When last_pos < first_pos then no character is dropped from s (the first string). 
      initDPtable_prefix:
        regex: ^(.*)$
        default: ""
        explain: |
          # this argument supplies a partially revealed solution
          # use an empty string when no partial solution was given
          # otherwise, whithin this table, use -1 for unspecified entries
      initDPtable_suffix:
        regex: ^(.*)$
        default: ""
        explain: |
          # this argument supplies a partially revealed solution
          # use an empty string when no partial solution was given
          # otherwise, whithin this table, use -1 for unspecified entries
      # section with the answer of the student to be evaluated and provided a feedback with
      sol_type:
        regex: ^(opt_sol|opt_val|opt_sol_with_val|DPtable_prefix|DPtable_suffix|bothDPtables)$
        default: opt_sol_with_val
      opt_sol:
        regex: ^([A-Z]*)$
        default: ACCIA
      opt_val:
        regex: ^(.*)$
        default: 5
      DPtable_prefix:
        regex: ^(.*)$
        default: "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ]"
      DPtable_suffix:
        regex: ^(.*)$
        default: "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ]"
      name_of_opt_val:
        regex: ^(.*)$
        default: opt_val
      name_of_opt_sol:
        regex: ^(.*)$
        default: opt_sol
      name_of_DPtable_prefix:
        regex: ^(.*)$
        default: DPtable_prefix
      name_of_DPtable_suffix:
        regex: ^(.*)$
        default: DPtable_suffix
      # section with the arguments that specify the format of the feedback string and the forms of the outputs, either direct, or on output file (certificates sent to the local machine), or on logs (on the server for full evaluation)
      color_implementation:
        regex: ^(ANSI|html|None)$
        default: ANSI
        explain: when calling the service from a terminal where colors are supported use `ANSI`. When calling from a browser use `html`. You might sometimes prefer `None` in case of troubles or when debugging. 
      as_yaml_with_points:
        regex: ^(0|1)$
        default: 0
      yield_certificate_in_output_file:
        regex: ^(0|1)$
        default: 0
      recall_input:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0
      # section with the points assigned to a single task of an exercise in the context of an exam or exam simulation:
      pt_formato_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
      pt_feasibility_OK:
        regex: ^(0|[1-9][0-9]*)$
        default: 1
      pt_tot:
        regex: ^(0|[1-9][0-9]*)$
        default: 10
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
  oracle:
    evaluator: [python, services/oracle_driver.py]
    description: "given two strings s and t, the service comÃ¨putes and returns a longest common subsequence (LCS) for them, possibly subject to further constraints. The service might also be asked to return a dynamic programming (DP) table or two."
    args:
      pwd:
        regex: ^(.*)$
        explain: this service should not be let available to students at least during the exams. Set a private password in order to prevent unauthorized access.
      # section with a possible instance to the problem:
      s:
        regex: ^([A-Z]*)$
        default: ACCIPICCHIA
        explain: is the first string
      t:
        regex: ^([A-Z]*)$
        default: MAMMACHIOCCIA
        explain: is the second string
      start_with:
        regex: ^(\*|[A-Z])$
        default: '*'
        explain: the common subsequence should start with this character. Using the mask character * vanifies this constraint
      end_with:
        regex: ^(\*|[A-Z])$
        default: '*'
        explain: the common subsequence should start with this character. Using the mask character * vanifies this constraint
      forbidden_s_interval_first_pos:
        regex: ^(0|[1-9][0-9]*)$
        default: 1000
        explain: the second string is always t, but the first string is actually obtained from s by dropping/forbidding those characters that fall within a closed interval [first_pos,last_pos]. Positions start from 0. When last_pos < first_pos then no character is dropped from s (the first string). 
      forbidden_s_interval_last_pos:
        regex: ^(0|[1-9][0-9]*)$
        default: 0
        explain: the second string is always t, but the first string is actually obtained from s by dropping/forbidding those characters that fall within a closed interval [first_pos,last_pos]. Positions start from 0. When last_pos < first_pos then no character is dropped from s (the first string). 
      # section characterizing the seeked for answer and the naming for its variables:
      sol_type:
        regex: ^(opt_sol|opt_val|opt_sol_with_val|DPtable_prefix|DPtable_suffix|bothDPtables|all)$
        default: all
      name_of_opt_val:
        regex: ^(.*)$
        default: opt_val
      name_of_opt_sol:
        regex: ^(.*)$
        default: opt_sol
      name_of_DPtable_prefix:
        regex: ^(.*)$
        default: DPtable_prefix
      name_of_DPtable_suffix:
        regex: ^(.*)$
        default: DPtable_suffix
      # section with arguments that specify the formats of the outputs, either direct or on logs (on the server for full evaluation) in the context of an exam or exam simulation:
      as_yaml:
        regex: ^(0|1)$
        default: 0
      recall_input:
        regex: ^(0|1)$
        default: 0
      with_opening_message:
        regex: ^(0|1)$
        default: 0
      esercizio:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1
      task:
        regex: ^(-1|0|[1-9][0-9]*)$
        default: -1

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
