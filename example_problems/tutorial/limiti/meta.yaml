%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    evaluator: [python,services/gimme_instance_driver.py]
    description: 'An instance of the Longest Subsequence (LCS) Problem is essentially a pair of strings, s and t. (You are then asked to find a longest possible string that is both a subsequence of s and a subsequence of t.) Call this service (`gimme_instance`) to get an instance of your likings in one of the supported formats. The instances may come from different sources (randomly generated, hardcoded, taken from a collection) and the server maintains a certain set of them within a catalogue. This catalogue is organized in collections of instances with common features, like e.g. their origin. The service can be used to get either a random instance or an instance from the catalogue.\n   The two strings s and t comprising the instance are returned by the service in the form of a stream. You may ask for this stream to get downloaded in a file on your local machine and/or displayed on the screen. For your convenience, the precise format of this stream can be regulated through the argument `instance_format`.'
    args:
      source:
        regex: ^(catalogue|randgen_1|randgen_2)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''model_lcs.tar\'' you get downloaded on your machine by issuing `rtal get model_lcs`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [random_generator_name] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n    [randgen_1] to get the instance produced by the pseudo-random generator `randgen_1`. The "instance descriptor"  for this generator comprises 4 required parameters: `m`, `n`, `alphabet`, `seed`. The service then generates and returns the pseudo-random instance randgen_1<m,n,alphabet,seed>.\n    [randgen_2] to get the instance produced by the pseudo-random generator `randgen_2`. The "instance descriptor"  for this generator comprises 5 required parameters: `m`, `n`, `opt_val`, `alphabet`, `seed`. The service then generates and returns the pseudo-random instance randgen_2<m,n,opt_val,alphabet,seed>.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain: 'This argument is taken into account when source=catalogue. It is used to identify a particular instance within the catalogue of instances stored on the server. The whole catalogue is public, that is, it is contained in the file \''model_lcs.tar\'' you get downloaded on your machine by issuing `rtal get model_lcs`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on the server. This catalogue is organized in collections of instances with a same origin or other common features.'
      m:
        regex: ^([1-9][0-9]{0,2}|1000)$
        regex-explained: a positive natural <= 1000
        default: 4
        explain: Length of the string s.
      n:
        regex: ^([1-9][0-9]{0,1}|1000)$
        regex-explained: a positive natural <= 1000
        default: 4
        explain: Length of the string t.
      opt_val:
        regex: ^(0|[1-9][0-9]{0,1}|1000)$
        regex-explained: a positive natural <= 1000
        default: 0
        explain: Maximum length of the common subsequence of the strings s and t generated by randgen_2.
      alphabet:
        regex: ^(DNA|lowercase|uppercase|lowercase_uppercase)$
        default: DNA
        explain: The alphabet over which the two strings will be created. DNA stand for the alphabet on the 4 letters A, C, G, T. The other options should be self-explanatory.
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      instance_format:
        regex: ^(with_m_and_n|only_strings|gmpl_dat)$
        default: only_strings
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[with_m_and_n] a stream of three lines: the first line contains the two integers m and n separated by spaces, where m is the length of the string s and n is the lenght of t. The second line contains the string s and the third contains the string t.'
        explain2: '[only_strings] like the above, but with the first line omitted.'
        explain3: '[gmpl_dat] a possible datafile format for AMPL/GMPL use that we have decided to support.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  check:
    evaluator: [python, services/check_driver.py]
    description: 'Questo servizio ti chiede di verificare la correttezza di un certo limite. Le istanze consistono in:
    \n- limite finito per x finito
    \n- limite infinito per x finito
    \n- limite finito per x infinito
    \n- limite infinito per x infinito
    \nPuoi caricare il file contenente una tua istanza usando l'opzione `-f` del sottocomando `connect` di `rtal`, o provare a inserire la tua istanza direttamente dal terminale una volta avviato il servizio.'
    files:
      - instance
    args:
      source:
        regex: ^(catalogue|terminal|randgen)$
        default: catalogue
        explain: 'Per inviare al servizio un`istanza contenuta in un file presente sulla tua macchina, non è necessario impostare questo argomento: basta chiamare il servizio con:\n rtal connect limiti check -finstance=percorso_del_file_istanza\n Con questa chiamata senza ulteriori argomenti , il servizio presuppone che il file di istanza consista in 3 righe: una per la funzione, una per il valore `x_0` a cui tende la variabile x e una per il risultato del limite `c`. L'argomento source viene usato solo quando non associ un file locale al gestore del file dell'istanza. In tal caso, determina il modo in cui l'istanza viene immessa nel servizio:' 
        explain1: '[terminal] inserisci la tua istanza direttamente digitandola direttamente o tramite taglia e incolla. Il formato supportato consiste in 3 righe come spiegato sopra. Ad esempio: \n   x^2+5 \n   1	\n   6'
        explain2: '[catalogue] il servizio funziona su un'istanza prelevata dal catalogo delle istanze memorizzate sul server. Le istanze nel catalogo sono numerate progressivamente a partire da 1. Usa l'argomento `instance_id` per specificare l'istanza che ti interessa.'
        explain3: '[randgen] il servizio funziona sull'istanza pseudo-casuale `randgen(<m,n,alphabet,seed>)`. In questo caso è necessario specificare i valori per gli argomenti di servizio che comprendono il descrittore di istanza, quando diversi dai loro valori predefiniti.' # ---DA RIVEDERE GLI ARGOMENTI DEL randgen---
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: qualsiasi naturale positivo (nella sua rappresentazione decimale)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 001
        explain: 'Questo argomento viene preso in considerazione quando `source=catalogue`. Viene utilizzato per identificare una particolare istanza all'interno del catalogo delle istanze archiviate sul server. L'intero catalogo è pubblico, cioè è contenuto nel file \''limiti.tar\'' che viene scaricato sulla tua macchina emettendo `rtal get limiti`. Inoltre, se si tiene l'intero repository con il problema in locale, questo catalogo viene creato automaticamente emettendo `make` per una configurazione completa del problema sul server. Questo catalogo è organizzato in raccolte di istanze con la stessa origine o altre caratteristiche comuni.' # ---DA RIVEDERE---
      instance_format: # ---DA CAPIRE SE CI POSSONO ESSERE ALTRI FORMATI---
        regex: ^(with_m_and_n|only_strings|dat)$
        default: only_strings
        explain: Use this argument to specify the format of the .txt file containing the instance.
        explain1: '[with_m_and_n] the first line contains the two integers m and n separated by spaces, where m is the length of the string s and n is the lenght of t; then follow 2 lines, the first contains the string s and the second contains the string t.'
        explain2: '[only_strings] like the above, but with the first line omitted.'
        dat: a possible datafile format for AMPL/GMPL use that we have decided to support.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
