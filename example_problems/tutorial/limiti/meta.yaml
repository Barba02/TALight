%YAML 1.2
---
public_folder: public
services:
  max_fin_set:
    evaluator: [python, services/max_fin_set_driver.py]
    description: 'In questo esercizio dovrai dimostrare che ogni insieme finito e non vuoto di numeri reali ammette sempre un massimo. Dapprima potrai lavorare con un insieme e determinare a mano (ovvero scrivendo sul terminale) il massimo di quell\''insieme e poi potrai passare ad un livello successivo in cui ti verra\'' chiesto di scrivere un algoritmo ricorsivo che calcoli per te il massimo.'
    files:
      - instance
    args:
      source:
        regex: ^(catalogue|randgen)$
        default: randgen
        explain: 'Per inviare al servizio un\''istanza contenuta in un file presente sulla tua macchina, non è necessario impostare questo argomento: basta chiamare il servizio con:\n rtal connect limiti max_fin_set -finstance=percorso_del_file_contenete_l\''istanza\n Con questa chiamata senza ulteriori argomenti, il servizio presuppone che il file contenga una riga costituita dagli elementi del tuo insieme separati da una virgola (ad esempio: 0, 5/4, -14.31, sqrt(2), 9*pi). L\''argomento `source` viene usato solo quando non associ un file locale; in tal caso, determina il modo in cui l\''istanza viene immessa nel servizio:' 
        explain1: '[catalogue] il servizio lavora su un\''istanza presa dal catalogo situato sul server. Le istanze nel catalogo sono numerate in modo progressivo a partire da 1. Usa l\''argomento `instance_id` per specificare l\''istanza a cui sei interessato/a.'
        explain2: '[randgen_1] il servizio lavora su istanze pseudo-casuali. In questo caso dovresti specificare i valori per gli argomenti del servizio corrispondenti ai descrittori d\''istanza (set_cardinality, seed) quando li vuoi differenti dai loro valori di default.'
        # explain3: '[terminal] you enter your instance (just two strings, one per line; no other formats supported) directly by either typing it directly or through cut and paste.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: 'qualsiasi naturale positivo (nella sua rappresentazione decimale)'
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 001
        explain: 'Questo argomento viene utilizzato per identificare una particolare istanza (ovvero un insieme) all\''interno del catalogo delle istanze archiviate sul server. Questo catalogo è organizzato in raccolte di istanze con caratteristiche comuni.'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'sia la stringa "random_seed" o un numero decimale di esattamente 6 cife'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'specificare il codice numerico (qualsiasi numero intero nell\''intervallo [100000,999999]) per lavorare con un\''istanza pseudo-casuale già incontrata. Quando questo argomento viene lasciato al suo valore predefinito (random_seed), il servizio sceglie un seed a caso e lo comunica all\''utente.'
      set_cardinality:
        regex: ^([1-9]|[1-3][0-9])$
        regex-explained: 'qualsiasi naturale positivo tra 1 e 39'
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 7
        explain: 'Questo argomento viene utilizzato per indicare la cardinalità dell\''insieme di cui si vuole trovare il massimo.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'Se questo flag è impostato a 1 allora la soluzione viene scaricata come file nella cartella il cui percorso completo è specificato tramite il flag -o.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  max_sup:
    evaluator: [python, services/max_sup_driver.py]
    description: 'In questo esercizio dovrai verificare \n- se l\''insieme che ti viene fornito e\'' limitato (superiormente), \n- se possiede massimo ed eventualmente determinarlo \n- determinare l\''estremo superiore (N.B.: in caso di insieme illimitato superiormente verra\'' accettata valida come risposta \''inf\'').'
    args:
      source:
        regex: ^(catalogue|randgen)$
        default: randgen
        explain: #'Per inviare al servizio un\''istanza contenuta in un file presente sulla tua macchina, non è necessario impostare questo argomento: basta chiamare il servizio con:\n rtal connect limiti max_fin_ser -finstance=percorso_del_file_contenete_l\''istanza\n Con questa chiamata il servizio presuppone che il file contenga due righe: la prima destinata a contenere l\''istanza e la seconda costituita dal suo seed. (capire se mantenere o no: in questo caso al ragazzo converrebbe semplicemente richiamare il servizio con un determinato seed... c\''e` poco vantaggio nel caricare una propria istanza)' 
        'Attraverso l\''argomento `source` puoi determinare il modo in cui l\''istanza viene immessa nel servizio:'
        explain1: '[catalogue] il servizio lavora su un\''istanza presa dal catalogo situato sul server. Le istanze nel catalogo sono numerate in modo progressivo a partire da 1. Usa l\''argomento `instance_id` per specificare l\''istanza a cui sei interessato/a.'
        explain2: '[randgen_1] il servizio lavora su istanze pseudo-casuali. --- capire se mettere come descittore d\''istanza `parameter`: con l\''argomento pari a 1 si avra` un\''istanza del tipo {x | x=2*k+1, 3<k<9  k in N}; con l\''argomento pari a 0 si avra` qualcosa del tipo {x in R | 4<=x^2<49} ---'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: 'qualsiasi naturale positivo (nella sua rappresentazione decimale)'
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 001
        explain: 'Questo argomento viene utilizzato per identificare una particolare istanza (ovvero un insieme) all\''interno del catalogo delle istanze archiviate sul server. Questo catalogo è organizzato in raccolte di istanze con caratteristiche comuni.'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'sia la stringa "random_seed" o un numero decimale di esattamente 6 cife'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'specificare il codice numerico (qualsiasi numero intero nell\''intervallo [100000,999999]) per lavorare con un\''istanza pseudo-casuale già incontrata. Quando questo argomento viene lasciato al suo valore predefinito (random_seed), il servizio sceglie un seed a caso e lo comunica all\''utente.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'Se questo flag è impostato a 1 allora la soluzione viene scaricata come file nella cartella il cui percorso completo è specificato tramite il flag -o.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  archimede_prover:
    evaluator: [python, services/archimede_prover_driver.py]
    description: 'In questo esercizio dovrai dimostrare al tuo pc il principio di Archimede, ovvero che per ogni x reale, x>0, esiste un numero naturale n tale che 1/n<x. Dapprima lavorerai solamente con i numeri x ed n ed in seguito, se ti sentirai pronto, potrai passare ad un livello successivo in cui ti verra\'' chiesto di scrivere un algoritmo che, dato x, calcoli per te un valore di n che soddisfi il principio di Archimede.'
    args:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'sia la stringa "random_seed" o un numero decimale di esattamente 6 cife'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'specificare il codice numerico (qualsiasi numero intero nell\''intervallo [100000,999999]) per lavorare con un\''istanza pseudo-casuale già incontrata. Quando questo argomento viene lasciato al suo valore predefinito (random_seed), il servizio sceglie un seed a caso e lo comunica all\''utente.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  density_Q_in_R:
    evaluator: [python, services/density_Q_in_R_driver.py]
    description: 'In questo esercizio dovrai dimostrare che l\''insieme dei numeri razionali e\'' denso nei reali, ovvero che dati due numeri reali x,y con x<y, esiste un numero q razionale tale che x < q < y. Dapprima lavorerai solamente con i numeri x ed y per arrivare a determinare un valore per q ed in seguito, se ti sentirai pronto, potrai passare ad un livello successivo in cui ti verra\'' chiesto di scrivere un algoritmo che, dati x ed y, calcoli per te un valore di q tale che x < q < y.'
    args:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'sia la stringa "random_seed" o un numero decimale di esattamente 6 cife'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'specificare il codice numerico (qualsiasi numero intero nell\''intervallo [100000,999999]) per lavorare con un\''istanza pseudo-casuale già incontrata. Quando questo argomento viene lasciato al suo valore predefinito (random_seed), il servizio sceglie un seed a caso e lo comunica all\''utente.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  archimede_curiosity:
    evaluator: [python, services/archimede_curiosity_driver.py]
    description: 'Con questo esercizio/curiostia\'' si fa un piccolo salto verso i limiti di successioni. Ti verra\'' chiesto se il limite di una successione convergente di termini positivi e\'' sempre strettamente positivo oppure no ed in seguito ti verra\'' proposta una particolare serie per confermare o confutare questa affermazione.'
    args:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'sia la stringa "random_seed" o un numero decimale di esattamente 6 cife'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'specificare il codice numerico (qualsiasi numero intero nell\''intervallo [100000,999999]) per lavorare con un\''istanza pseudo-casuale già incontrata. Quando questo argomento viene lasciato al suo valore predefinito (random_seed), il servizio sceglie un seed a caso e lo comunica all\''utente.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
