%YAML 1.2
---
public_folder: public
services:
  max_fin_set:
    evaluator: [python, services/max_fin_set_driver.py]
    description: 'In questo esercizio dovrai dimostrare che ogni insieme finito e non vuoto di numeri reali ammette sempre un massimo.'
    args:
      source:
        regex: ^(catalogue|randgen)$
        default: randgen
        explain: 'Per inviare al servizio un\''istanza contenuta in un file presente sulla tua macchina, non è necessario impostare questo argomento: basta chiamare il servizio con:\n rtal connect limiti max_fin_ser -finstance=percorso_del_file_contenete_l\''istanza\n Con questa chiamata senza ulteriori argomenti, il servizio presuppone che il file contenga una riga costituita dagli elementi del tuo insieme separati da una virgola. L\''argomento `source` viene usato solo quando non associ un file locale al gestore del file dell\''istanza. In tal caso, determina il modo in cui l\''istanza viene immessa nel servizio:' 
        explain1: '[catalogue] il servizio lavora su un\''istanza presa dal catalogo situato sul server. Le istanze nel catalogo sono numerate in modo progressivo a partire da 1. Usa l\''argomento `instance_id` per specificare l\''istanza a cui sei interessato/a.'
        explain2: '[randgen_1] il servizio lavora su istanze pseudo-casuali. In questo caso dovresti specificare i valori per gli argomenti del servizio corrispondenti ai descrittori d\''istanza (set_cardinality, seed) quando li vuoi differenti dai loro valori di default.'
        # explain3: '[terminal] you enter your instance (just two strings, one per line; no other formats supported) directly by either typing it directly or through cut and paste.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: 'qualsiasi naturale positivo (nella sua rappresentazione decimale)'
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 001
        explain: 'Questo argomento viene utilizzato per identificare una particolare istanza (ovvero un insieme) all\''interno del catalogo delle istanze archiviate sul server. Questo catalogo è organizzato in raccolte di istanze con caratteristiche comuni.'
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'sia la stringa "random_seed" o un numero decimale di esattamente 6 cife'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'specificare il codice numerico (qualsiasi numero intero nell\''intervallo [100000,999999]) per lavorare con un\''istanza pseudo-casuale già soddisfatta. Quando questo argomento viene lasciato al suo valore predefinito (random_seed), il servizio sceglie un seed a caso e lo comunica all\''utente.'
      set_cardinality:
        regex: ^([1-9]|[1-3][0-9])$
        regex-explained: 'qualsiasi naturale positivo tra 1 e 39'
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 7
        explain: 'Questo argomento viene utilizzato per indicare la cardinalità dell\''insieme di cui si vuole trovare il massimo.'
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'Se questo flag è impostato a 1 allora la soluzione viene scaricata come file nella cartella il cui percorso completo è specificato tramite il flag -o.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: en
      metafile:
        regex: ^(main|en|it)$
        default: main
...
