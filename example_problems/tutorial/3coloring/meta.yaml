%YAML 1.2
---
public_folder: public
services:
  generic_graph_evaluation:
    explain: "Given a generic graph you define if it is 3-colorable and then provide a certificate with the result."
    evaluator: [python3, services/check_scoring_competence_server.py]
    args:
      num_node:
        regex: ^([1-9])$
        default: 4
      num_arch:
        regex: ^([2-8])$
        default: 3
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: "specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  planar_graph_evaluation:
    explain: "Given a planar graph you define if it is 3-colorable and then provide a certificate with the result."
    evaluator: [python3, services/check_scoring_competence_server.py]
    args:
      num_node:
        regex: ^([1-9])$
        default: 4
      num_arch:
        regex: ^([2-8])$
        default: 3
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: "specify the numeric code to reproduce the very same instance as in a previous run (also in other services). Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  planar_graph_creation:
    explain: "Create a planar graph and define if it is 3-colorable and then provide a certificate with the result."
    evaluator: [python3, services/check_scoring_competence_server.py]
    args:
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python3, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

