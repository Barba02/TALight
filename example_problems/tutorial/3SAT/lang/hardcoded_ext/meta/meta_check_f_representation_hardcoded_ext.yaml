%YAML 1.2
---
public_folder: public
services:
check_one_clause_representation:
check_f_representation:
  description: can you represent a generic CNF f on a vector x of boolean variable as a 3-CNF f_3 on the same x and on an auxiliary boolan vector y such that, for every assignment x* to x, the CNF f evaluates true iff there exists an assigniment y* to y so that the 3CNF evaluats true for (x*,y*)?
  evaluator: [python, services/check_f_representation_server.py]
  args:
    f:
      regex: ^(\s*\(\s*(\s*!?\s*x[1-9])(\s*or\s*!?\s*x[1-9])*\s*\)(\s*and\s*\(\s*(\s*!?\s*x[1-9])(\s*or\s*!?\s*x[1-9])*\s*\))*\s*|lazy_input)$
      default: lazy_input
      explain: a CNF formula on variables x1, x2, ...
      example: (x1 or ! x3 or y1) and ( y1 or x5 or !x6 or x8) and (!x1 or !y1)
    f_3:
      regex: ^(\s*\(\s*(\s*!?\s*(x|y)[1-9])(\s*or\s*!?\s*(x|y)[1-9])*\s*\)(\s*and\s*\(\s*(\s*!?\s*(x|y)[1-9])(\s*or\s*!?\s*(x|y)[1-9])*\s*\))*\s*|lazy_input)$
      default: lazy_input
      explain: a 3-CNF formula on variables x1, x2, ...
      example: (x1 or ! x3 or y1) and ( y1 or ! x3 or !x5) and (!x1 or !y1)
    lang:
      regex: ^(hardcoded|hardcoded_ext|en|it)$
      default: it
eval_f_rep:
synopsis:
...
