public_folder: public
services:
  check_static_strategy:
    explain: "choose an n and specify a sequence of measurements with the scale that allows to always identify among n coins the false one."
    evaluator: [python3, services/check_static_strategy/check_static_strategy_server.py]
    args:
      n:
        regex: ^[1-9][0-9]?$|^100$
        default: 7
        explain: "Number of coins (1-100)"
      version: 
        regex: ^(false_is_leighter|false_is_heavier|false_has_different_weight)$
        default: false_is_leighter
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_dynamic_strategy:
    explain: "Your goal is to identify the false coin in a set of n coins. Choose an n and play a two-players game against nature: at every move you operate a scale to compare the weights of two disjoint subsets of the n coins and nature reports you the outcome."
    evaluator: [python3, services/check_dynamic_strategy/check_dynamic_strategy_server.py]
    args:
      n:
        regex: ^[1-9][0-9]?$|^100$
        default: 7
        explain: "Number of coins (1-100)"
      version: 
        regex: ^(false_is_leighter|false_is_heavier|false_has_different_weight)$
        default: false_is_leighter
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  # TODO help
  help:
    evaluator: [python, services/help/help_server.py]
    args:
      page:
        regex: ^(sum|free_sum|sum_and_difference|sum_and_product|help|synopsis)$
        default: help
      lang:
        regex: ^(en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: "any string without space characters but meant to specify one of the services of the problem {problem}"
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

