%YAML 1.2
---
public_folder: public
services:
  check_static_strategy:
#    explain: What is the smallest number of two-pan scale weighings required to distinguish a single heavier coin from a set of n otherwise identical coins?
    description: choose an n and specify a set of two-pan scale weighings that always allow to identify the false coin among n otherwise identical coins.
    example: "with n=3, a correct (and optimal) static strategy would be:"
    example1: 1, 2
    example2: "with n=4, a correct (and not optimal) static strategy would be:"
    example3: 1 2, 3 4
    example4: 1, 2
    example5: 3, 4
    evaluator: [python3, services/check_static_strategy/check_static_strategy_server.py]
    args:
      n:
        regex: ^[1-9][0-9]?$|^100$
        default: 7
        explain: number of coins (1-100)
      version: 
        regex: ^(false_is_leighter|false_is_heavier|false_has_different_weight)$
        default: false_is_leighter
        explain: "choose the version of the puzzle among the following:"
        explain1: "[false_is_leighter]  you are given to know that the false coin is leighter."
        explain2: "[false_is_heavier]  you are given to know that the false coin is heavier."
        explain3: "[false_has_different_weight]  you are only given to know that the weight of the false coin differs, but do not know whether it is leighter or heavier."
      goal:
        regex: ^(correct|optimal)$
        default: correct
      feedback:
        regex: ^(yes_no|provide_counterexample)$
        default: yes_no
        explain: "choose the feedback level. Options are as follows:"
        explain1: "[yes_no]  just confirm me that my strategy meets the goal."
        explain2: "[provide_counterexample]  please, when my strategy is not correct, provide me evidence of that. Also, when my strategy does not meet the goal, give me evidence of its failure in the form of a correct strategy with a smaller number of weighings."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_dynamic_strategy:
    description: "Your goal is to identify the false coin in a set of n coins of otherwise equal weight. Choose an n and play a two-players game against nature: at every move you operate a scale to compare the weights of two disjoint subsets of the n coins and nature reports you the outcome."
    evaluator: [python3, services/check_dynamic_strategy/check_dynamic_strategy_server.py]
    args:
      n:
        regex: ^[1-9][0-9]?$|^100$
        default: 7
        explain: number of coins (1-100)
      version: 
        regex: ^(false_is_leighter|false_is_heavier|false_has_different_weight)$
        default: false_is_leighter
        explain: "choose the version of the puzzle among the following:"
        explain1: "[false_is_leighter]  you are given to know that the false coin is leighter."
        explain2: "[false_is_heavier]  you are given to know that the false coin is heavier."
        explain3: "[false_has_different_weight]  you are only given to know that the weight of the false coin differs, but do not know whether it is leighter or heavier."
      goal:
        regex: ^(correct|optimal)$
        default: correct
      feedback: 
        regex: ^(yes_no|provide_counterexample)$
        default: yes_no
        explain: "choose the feedback level. Options are as follows:"
        explain1: "[yes_no]  just confirm me that my strategy meets the goal."
        explain2: "[provide_counterexample]  please, when my strategy is not correct, provide me evidence of that. Also, when my strategy does not meet the goal, give me evidence of its failure in the form of a correct strategy with a smaller number of weighings."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  empass_static_strategy_lighter_or_heavier:
    description: this service proves that, for an infinite number of n, two experiments are not enough to understand whether the false coin is heavier or lighter than the others. To do so, you provide us with a lower bound lb and we return you the smalles n >= lb such that no static strategy with only two expriments exists. You then provide us a static strategy for that n, with at most two experiments, and we explain why your static strategy fails.
    evaluator: [python3, services/empass_static_strategy_lighter_or_heavier/empass_static_strategy_lighter_or_heavier_server.py]
    args:
      lb:
        regex: ^[1-9][0-9]?$|^100$
        default: 7
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  # TODO help
  # help:
  #   evaluator: [python, services/help/help_server.py]
  #   args:
  #     page:
  #       regex: ^(sum|free_sum|sum_and_difference|sum_and_product|help|synopsis)$
  #       default: help
  #     lang:
  #       regex: ^(en|it)$
  #       default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
...
