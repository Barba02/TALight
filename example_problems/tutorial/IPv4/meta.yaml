%YAML 1.2
---
public_folder: public
services:

  services_all:
    descrizione: "Questo servizio mostra tutti i servizi per questo problema"
    evaluator: [python, services/all_services_driver.py]
    args:
      lang: 
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  gimme_ip_address:
    descrizione: "Questo servizio ti chiede di inserire un indirizzo ip, dopodiché stampera i 3 possibili indirizzi di rete a cui può appartenere."
    evaluator: [python, services/gimme_ip_address_driver.py]
    args:
      ip_address: 
        regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
        default: 1.2.3.4
        regex-explained: "L'indirizzo ip è una serie di 4 terzine di numeri divisi de da un punto"      
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  how_many_ips_driver:
    descrizione: "this service takes in a subnet Mask (e.g., 255.255.0.0) defining a whole range of valid IP addresses. The service returns IP addresses from that range. Use the arguments of the service to specify which IP's in the range should be returned."
    evaluator: [python, services/how_many_ips_driver.py]
    args:
      subnet_Mask:
        regex:  ^(the_service_chooses|((\d)+\.){3}(\d)+)$
        default: 255.255.0.0
        regex-explained: a netmask comprises four fields separated by dots. Each field is a numer in digital representation.
        explain: a subnet mask comprises four fields separated by dots. Each field is a number that can have a value of 0 or 255 
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  first_ip:
    regex: //([0-9]{1,3}\.){3}[0-9]{1,3}/gm
    descrizione: "Per questo problema ti viene chiesto di inserire il primo indirizzo ip appartenente all'indirizzo di rete (esempio: indirizzo di rete --> 169.21.3.0      primo indirizzo ip --> 169.21.3.0"
    evaluator: [python, services/first_ip_driver.py]
    args:
        ip_address: 
          regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
          default: 1.2.3.4
          regex-explained: "L'indirizzo ip è una serie di 4 terzine di numeri divisi de da un punto"      
        lang: 
          regex: ^(hardcoded|hardcoded_ext|en|it)$
          default: it

  last_ip:
    #regex: //([0-9]{1,3}\.){3}[0-9]{1,3}/gm
    descrizione: "Per questo problema ti viene chiesto di inserire l'ultimo indirizzo ip appartenente all'indirizzo di rete (esempio: indirizzo di rete --> 169.21.3.0      ultimo indirizzo ip --> 169.21.3.255"
    evaluator: [python, services/last_ip_driver.py]
    args:
        ip_address: 
          regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
          default: 1.2.3.4
          regex-explained: "L'indirizzo ip è una serie di 4 terzine di numeri divisi de da un punto"      
        lang: 
          regex: ^(hardcoded|hardcoded_ext|en|it)$
          default: it

  random_ip:
    descrizione: "Per questo problema ti viene chiesto di inserire un indirizzo ip appartenente all'indirizzo di rete (esempio: indirizzo di rete --> 169.21.3.0      ultimo indirizzo ip --> 169.21.3.255"
    evaluator: [python, services/random_ip_driver.py]
    args:
        ip_address: 
          regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
          default: 1.2.3.4
          regex-explained: "L'indirizzo ip è una serie di 4 terzine di numeri divisi de da un punto"      
        lang: 
          regex: ^(hardcoded|hardcoded_ext|en|it)$
          default: it
         
  

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
...
