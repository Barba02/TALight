%YAML 1.2
---
public_folder: public
services:
  #gimme_IPs_in_subnet:
  #  descrizione: "this service takes in a subnet Mask (e.g., 255.255.0.0) defining a whole range of valid IP addresses. The service returns IP addresses from that range. Use the arguments of the service to specify which IP's in the range should be returned."
    #evaluator: [python, services/gimme_IP_in_subnet_driver.py]
  #  args:
    #  subnet_Mask:
    #    regex:  ^((\d)+\.){3}(\d)+$
    #    default: 255.255.0.0
    #    regex-explained: a netmask comprises four fields separated by dots. Each field is a numer in digital representation.
    #    example: 255.255.0.0
    #    explain: a subnet mask comprises four fields separated by dots. Each field is a number that can have a value of 0 or 255 
  #    output:
  #      regex:  ^(first_IP|last_IP|random_IP|list_all)$
  #      default: random_IP
  #      explain: "the options are as follows:"
  #      explain1: -first_IP= return only the first valid IP of the range
  #      explain2: -last_IP= return only the last valid IP of the range
  #      explain3: -random_IP= return a random_IP in the range 
  #      explain4: -list_all= return a list of the IPs in the range in order from the minus to the biggest.
  #    lang:
  #      regex: ^(hardcoded|hardcoded_ext|en|it)$
   #     default: it

  #IPs_in_subnet_check:
  #  descrizione: "this service takes in a subnet Mask (e.g., 255.255.0.0) defining a whole range of valid IP addresses. The service returns IP addresses from that range. Use the arguments of the service to specify which IP's in the range should be returned."
  #  evaluator: [python, services/IPs_in_subnet_check_driver.py]
  #  args:
  #    subnet_Mask:
  #      regex:  ^(the_service_chooses|((\d)+\.){3}(\d)+)$
  #      regex-explained: a netmask comprises four fields separated by dots. Each field is a numer in digital representation.
  #      default: the_service_chooses
  #      explain: a subnet mask comprises four fields separated by dots. Each field is a number that can have a value of 0 or 255 
  #    internet_address: 
  #      regex:  ^(delayed|((\d)+\.){3}(\d)+)$
  #      default: delayed
  #      example: 169.23.0.0
  #      exlain: the internet address is made up of 4 triplets of numbers divided by a period. Each number can range from 0 to 255
  #    output:
  #      regex:  ^(first_IP|last_IP|random_IP|list_all)$
  #      default: random_IP
  #      explain: "the options are as follows:"
  #      explain1: -first_IP= return only the first valid IP of the range
  #      explain2: -last_IP= return only the last valid IP of the range
  #      explain3: -random_IP= return a random_IP in the range 
  #      explain4: -list_all= return a list of the IPs in the range in order from the minus to the biggest.
  #    lang:
  #      regex: ^(hardcoded|hardcoded_ext|en|it)$
  #      default: it
  
  first_ip:
    regex: //([0-9]{1,3}\.){3}[0-9]{1,3}/gm
    descrizione: "Per questo problema ti viene chiesto di inserire il primo indirizzo ip appartenente all'indirizzo di rete (esempio: indirizzo di rete --> 169.21.3.0      primo indirizzo ip --> 169.21.3.0"
    evaluator: [python, services/first_ip_driver.py]
    args:
        ip_address: 
          regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
          default: 1.2.3.4
          regex-explained: "L'indirizzo ip è una serie di 4 terzine di numeri divisi de da un punto"      
        lang: 
          regex: ^(hardcoded|hardcoded_ext|en|it)$
          default: it

  last_ip:
    #regex: //([0-9]{1,3}\.){3}[0-9]{1,3}/gm
    descrizione: "Per questo problema ti viene chiesto di inserire l'ultimo indirizzo ip appartenente all'indirizzo di rete (esempio: indirizzo di rete --> 169.21.3.0      ultimo indirizzo ip --> 169.21.3.255"
    evaluator: [python, services/last_ip_driver.py]
    args:
        ip_address: 
          regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
          default: 1.2.3.4
          regex-explained: "L'indirizzo ip è una serie di 4 terzine di numeri divisi de da un punto"      
        lang: 
          regex: ^(hardcoded|hardcoded_ext|en|it)$
          default: it

  #list_all:
  #  descrizione: "In questo prblema ti viene chiesto di inserire la lista di tutti gli indirizzi ip appartenenti all'indirizzo di rete"
  #  evaluator: [python, services/list_all/list_all.py]
  #  args:
  #      regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
  #      subnet_mask: 
  #        description: "a subnet mask comprises four fields separated by dots. Each field is a number that can have a value of 0 or 255"
  #      net_address:
  #        description: "the internet address is made up of 4 triplets of numbers divided by a period. Each number can range from 0 to 255"
  #      lang: 
  #        regex: ^(hardcoded|hardcoded_ext|en|it)$
  #       default: it

  #random_ip:
  #  descrizione : "In questo problema ti viene chiesto di inserire un indirizzo ip appartenente all'indirizzo di rete (esempio: indirizzo di rete --> 169.21.3.0      indirizzo ip --> 169.21.3.77"
  #  evaluator: [python, services/random_ip_driver.py]
  #  args:
  #      regex: /([0-9]{1,3}\.){3}[0-9]{1,3}/gm
  #      subnet_mask: 
  #        description: "a subnet mask comprises four fields separated by dots. Each field is a number that can have a value of 0 or 255"
  #      net_address:
  ##        description: "the internet address is made up of 4 triplets of numbers divided by a period. Each number can range from 0 to 255"
  #      lang: 
  #        regex: ^(hardcoded|hardcoded_ext|en|it)$
  #        default: it
  

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
...
