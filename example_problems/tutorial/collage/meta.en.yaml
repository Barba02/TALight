%YAML 1.2
---
public_folder: public
services:

###
# SERVIZIO SOLVE
###
  solve:
    evaluator: [python, services/solve_driver.py]
    description: 'This service provides you with a solution for a given instance of the Collage problem. You can either upload the instance file on the `instance` filehandler of the service, using the `-f` option of the `connect` subcommand of `rtal`, or try to input your instance directly from the terminal (supported only in `only_strings` format) once the service has started. You may also specify a pseudo-random instance by providing its instance description for a selected generator. This last option might ease your calling this service on instances encounterd with other services.'
    files:
      - instance
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [randgen_1] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n     [terminal] the service will use a triangle instance that you will insert manually, line by line.'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain:
      seq_len:
        regex: ^([1-9][0-9]{0,2}|1000)$
        default: 10
        explain:
      num_col:
        regex: ^.*$
        default: 4
        explain:
      mod:
        regex: ^.*$
        default: -1 
        explain:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      instance_format:
        regex: ^(inline)$
        default: inline
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[inline] contains the representation of the collage by line.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'

###
# SERVIZIO CHECK_SOL
###
  check_sol:
    evaluator: [python, services/check_sol_driver.py]
    args:
      source:
        regex: ^(catalogue|randgen_1|terminal)$
        default: randgen_1
        explain:
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain:
      instance_format:
        regex: ^(inline)$
        default: inline
        explain:
      seq_len:
        regex: ^([1-9][0-9]{0,2}|1000)$
        default: 10
        explain:
      num_col:
        regex: ^.*$
        default: 4
        explain:
      mod:
        regex: ^.*$
        default: -1
        explain:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      opt_sol_val:
        regex: ^(0|[1-9][0-9]{0,5})$
        default: 0
        explain:
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.

###
# GIMME_INSTANCE
###
  gimme_instance:
    evaluator: [python,services/gimme_instance_driver.py]
    description: 'An instance of the Triangle Problem consists of one or two triangles, one bigger than the other, each one with its own parameters, such as the number of lines, the minimum and the maximum value they can contain and the seed that has generated it. Call this service (`gimme_instance`) to get an instance of your likings in one of the supported formats. The instances may come from different sources (randomly generated, hardcoded, taken from a collection) and the server maintains a certain set of them within a catalogue. The service can be used to get either a random instance or an instance from the catalogue.\nYou may ask for this stream to get downloaded in a file on your local machine and/or displayed on the screen. For your convenience, the precise format of this stream can be regulated through the argument `instance_format`. This service provides you with a random triangle of integer numbers. The argument n specifies the number of rows of the triangle. For i=1,...,n the i-th row of the triangle comprises i integers in the interval [MIN_VAL,MAX_VAL]. You can opt to insert the seed yourself, or ask the service to choose the seed (and hence the actual triangle <n,MIN_VAL,MAX_VAL,seed>).'
    args:
      source:
        regex: ^(catalogue|randgen_1)$
        default: randgen_1
        explain: 'Instances might either come from the catalogue or be generated on the spot. Choose an option among:\n     [catalogue] the service will return an instance taken from the catalogue of instances stored on the server. The instances in the catalogue are progressively numbered starting from 1. Use the argument `instance_id` to specify the instance you are interested into. Calling this service might not be the most convenient way to get an instance from the catalogue: the whole catalogue is public, that is, it is contained in the file \''triangle.tar\'' you get downloaded on your machine by issuing `rtal get triangle`. Also, if you hold the whole repo with the problem in local (all sources) then this catalogue is automatically created issuing `make` for a complete set up of the problem on your machine (this is a necessary step when setting up the problem on a server).\n     [random_generator_name] the service delivers you the pseudo-random instance produced by the named pseudo-random generator. Every generator requires the user to specify a set of values for the needed parameters (like e.g. the `seed`) in order to univokely obtain the resulting instance. This set depends on the generator. Valid values for this set of parameters (called the "instance descriptor") offer an "instance description" that univokely specifies the instance w.r.t. that generator. Make then sure to pass the desired values for all the service arguments corresponding to the parameters needed by the selected generator. Notice that passing the very same configuration of values you get the very same instance. This is helpful since it guarantees the reproducibility of any experiment and the possibility to use and explore a same instance with different services of this problem.\n    [randgen_1] to get the instance produced by the pseudo-random generator `randgen_1`. In case you requested a double instance, the "instance descriptor"  for this generator comprises 7 required parameters: `m`, `n`, `MIN_VAL`, `MAX_VAL`, `seed`, `big_seed`, `path`. The service then generates and returns the pseudo-random instance randgen_1<m,n,MIN_VAL,MAX_VAL,seed,big_seed,path>. Otherwise, the "instance descriptor"  for this generator comprises 4 required parameters: `n`, `MIN_VAL`, `MAX_VAL`, `seed`. The service then generates and returns the pseudo-random instance randgen_1<n,MIN_VAL,MAX_VAL,seed>'
      instance_id:
        regex: ^([1-9][0-9]*)$
        regex-explained: any positive natural (in its decimal representation)
        regex-URL: 'https://extendsclass.com/regex/a55297b'
        default: 1
        explain:
      seq_len:
        regex: ^([1-9][0-9]{0,2}|1000)$
        default: 10
        explain:
      num_col:
        regex: ^.*$
        default: 4
        explain:
      mod:
        regex: ^.*$
        default: -1
        explain:
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        regex-explained: 'either the string "random_seed" or a decimal number of precisley 6 digits'
        regex-URL: 'https://extendsclass.com/regex/90e74ec'
        default: random_seed
        explain: 'When this argument is left to its default value (random_seed) then the service chooses a seed at random and communicates it to the user besides the generated pseudo-random instance. Otherwise, as seed, you can use any integer from 100000 to 999999.'
      instance_format:
        regex: ^(inline)$
        default: inline
        explain: Use this argument to choose the format of the .txt file containing the instance. You can also ask for the instance as already expressed within specific datafile formats that we have decided to support.
        explain1: '[inline] contains the representation of the collage by line.'
      silent:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file (>) you will get a valid instance file for the other services.'
      display:
        regex: ^(0|1)$
        default: 1
        explain: If this flag is set to 1 then the instance file is listed by the service.
      download:
        regex: ^(0|1)$
        default: 0
        explain: 'If this flag is set to 1 then the instance file is downloaded into the folder whose fullpath is specified by means of the -o flag (if this path is relative it homes from where the service call has been issued).'

###
# SERVIZIO EVAL_SOL
###
  eval_sol:
    description: 'this service evaluates your code which calculates the maximum reward collectable by a path descending in a triangle.'
    evaluator: [python, services/eval_sol_driver.py]
    files:
      - sourcecode
    args:
      goal:
        explain: 'set your goal (efficient includes also correct).'
        regex: ^(correct|time_at_most_2_exp_n|time_at_most_n_exp_2)$
        default: correct
      code_lang: 
        explain: 'the more we know about your bot the better we can estimate the efficiency of your algorithm.'
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: 'specify the numeric code (any integer in the interval [100000,999999]) to replicate the very same behaviour as in a previous call to this service. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and proceeds deterministically from that seed.'
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed


###
# ALTRO
###
  help:
    evaluator: [python, services/help/help_driver.py]
    args:
      page:
        regex: ^(approx_vc|service_1|help|synopsis)$
        default: help
      lang:
        regex: ^(en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
