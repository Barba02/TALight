# generator parameters: 

# n, m, MIN_VAL, MAX_VAL, seed, big_seed 
#     n (int) size of the small triangle
#     m (int) size of the big triangle
#     MIN_VAL (int) minimum element value in the triangle
#     MAX_VAL (int) maximum element value in the triangle
#     seed (int) seed generating the small triangle
#     big_seed (int) generating the big triangle

add_format: inline.txt

#collection: instances_hardcoded
#COPY: instances_hardcoded/instance_001.pyramid.txt
#COPY: instances_hardcoded/instance_001.in_lines.txt
#COPY: instances_hardcoded/instance_002.pyramid.txt
#COPY: instances_hardcoded/instance_002.in_lines.txt

collection: small_instances
#                randgen,    seq_len, num_col,  mod,  seed,   
GEN:  randgen_1_basic.py     10       7         2     123456       
GEN:  randgen_1_basic.py     10       7         2     345678        
GEN:  randgen_1_basic.py     10       7         2     134259       
GEN:  randgen_1_basic.py     10       7         2     743201       
GEN:  randgen_1_basic.py     10       7         2     129473      
GEN:  randgen_1_basic.py     10       7         2     372493      
GEN:  randgen_1_basic.py     10       7         2     194372     
GEN:  randgen_1_basic.py     10       7         2     329483
GEN:  randgen_1_basic.py     10       7         2     673210
GEN:  randgen_1_basic.py     10       7         2     382910

collection: medium_instances
#                randgen,    seq_len, num_col,  mod,  seed,   
GEN:  randgen_1_basic.py     50       35        2     538493  
GEN:  randgen_1_basic.py     50       35        2     309302   
GEN:  randgen_1_basic.py     50       35        2     494021     
GEN:  randgen_1_basic.py     50       35        2     458390  
GEN:  randgen_1_basic.py     50       35        2     203927  
GEN:  randgen_1_basic.py     50       35        2     148920    
GEN:  randgen_1_basic.py     50       35        2     484022      
GEN:  randgen_1_basic.py     50       35        2     329488      
GEN:  randgen_1_basic.py     50       35        2     644884     
GEN:  randgen_1_basic.py     50       35        2     100001     

collection: big_instances
#                randgen,    seq_len, num_col,  mod,  seed,   
GEN:  randgen_1_basic.py     200      150       2     434355        
GEN:  randgen_1_basic.py     200      150       2     556677      
GEN:  randgen_1_basic.py     200      150       2     124244     
GEN:  randgen_1_basic.py     200      150       2     167743  
GEN:  randgen_1_basic.py     200      150       2     124124   
GEN:  randgen_1_basic.py     200      150       2     454522    
GEN:  randgen_1_basic.py     200      150       2     774788       
GEN:  randgen_1_basic.py     200      150       2     456462        
GEN:  randgen_1_basic.py     200      150       2     968444       
GEN:  randgen_1_basic.py     200      150       2     464563     
  
collection: huge_instances
#                randgen,    seq_len, num_col,  mod,  seed,   
GEN:  randgen_1_basic.py     1000     256       2     645747  
GEN:  randgen_1_basic.py     1000     256       2     574453 
GEN:  randgen_1_basic.py     1000     256       2     256637   
GEN:  randgen_1_basic.py     1000     256       2     574732     
GEN:  randgen_1_basic.py     1000     256       2     124111   
GEN:  randgen_1_basic.py     1000     256       2     454363   
GEN:  randgen_1_basic.py     1000     256       2     444444     
GEN:  randgen_1_basic.py     1000     256       2     456567     
GEN:  randgen_1_basic.py     1000     256       2     968544   
GEN:  randgen_1_basic.py     1000     256       2     747474     

