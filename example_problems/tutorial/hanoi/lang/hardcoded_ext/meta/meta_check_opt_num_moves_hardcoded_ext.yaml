%YAML 1.2
---
public_folder: public
services:
check_one_sol:

check_opt_num_moves:
  description: this service checks what is the minimum possible number of moves in a valid solution for an Hanoi tower puzzle.
  evaluator: [python, services/check_opt_num_moves_server.py]
  args:
    v:      
      regex:  ^(classic|toddler|clockwise)$
      default: classic
    start:
      regex:  ^((A|B|C){0,1000}|all_A|all_B|all_C)$
      default: all_A
      explain: initial configuration of the puzzle
    final:
      regex:  ^^((A|B|C){0,1000}|all_A|all_B|all_C)$
      default: all_C
      explain: target configuration for the puzzle
    n:
      explain: the number of disks (required only when it can not be inferred from the initial or target configuration). If any of start or final are not in all_* form, then n is ignored.
      regex: ^(-1|[1-9][0-9]{0,2}|1000)$
      default: -1 # implicit
    answ:
      explain: what you conjecture to be the minimum number of moves needed to solve the puzzle.
      regex: ^(0|[1-9][0-9]{0,1000})$
    ok_if_congruent_modulus:
      regex: ^(0|[1-9][0-9]{0,10})$
      default: 0 #alternative: 1000000007
      explain: when n grows the number of needed moves can be huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers (or n is small). Otherwise, computing the number modulo <ok_if_congruent_modulus> will suffice in assessing you got the right ideas.  
    silent:
      regex: ^(0|1)$
      default: 0
      explain: if your solution is ok then the service runs silently; otherwise it explain what is the problem in your solution.
    feedback:
      regex: ^(yes_no|smaller_or_bigger|true_val)$
      default: yes_no
      explain: the options are as follows
      explain1: -yes_no= provide the minimum possible amount of feedback.
      explain2: -smaller_or_bigger= tells whether the minimum number of moves is smaller or bigger than what stated.
      explain3: -true_val= offers the length of an optimal solution.
    with_certificate:
      regex: ^(0|1)$
      default: 0
      explain: if your answ is a bigger number than optimal, the service provides you with an explict solution on less moves. On the contrary, you can use the service check_one_sol to ask us to check your super-optimal solution.
    lang:
      regex: ^(hardcoded|hardcoded_ext|en|it)$
      default: it
check_lower_bounds:

play_like:
gen_random_puzzle:
eval_opt_num_moves:

eval_sol:
synopsis:
...
