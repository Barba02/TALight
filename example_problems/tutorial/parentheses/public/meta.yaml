public_folder: public
services:
  check_one_sol:
    description: "this service checks whether an input string of '(' and ')' characters is a well formed formula of parentheses."
    evaluator: [python, services/check_one_sol_server.py]
    args:
      input_formula:
        regex:  ^(\(|\)){0,1000}$
      silent:
        explain: "if your formula is well formed then the service runs silently; otherwise it explains what is the problem in clear."
        regex: ^(0|1)$
        default: 0
      n:
        explain: "set this to prescribe the precise number of pairs of parentheses involved."
        regex: ^(free|0|[1-9][0-9]{0,1000})$
        default: free
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_num_sol:
    description: "call this service to check that the number of well formed formulas with <n_pairs> pairs of parenthes is what you think (<risp>)."
    evaluator: [python, services/check_num_sol_server.py]
    args:
      n_pairs:
        regex: ^(0|[1-9][0-9]{0,1}|100)$
      risp:
        regex: ^(0|[1-9][0-9]{0,50})$
        explain: "what you conjecture to be the number of well-formed formulas on <n_pairs> pairs of parentheses."
      ok_if_congruent_modulus:
        explain: "when n grows the number of well formed formulas gets huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers. Otherwise, computing the number modulo <ok_if_congruent_modulus> will suffice in assessing you got the right ideas."  
        regex: ^(0|[1-9][0-9]{0,10})$
        default: 0
#        default: 1000000007
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        explain: when the flag silent is set then the service runs silently unless your conjectured answer is wrong (or for wrong calls).
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_num_sol:
    evaluator: [python, services/eval_num_sol_server.py]
    args:
      answ_modulus:
        explain: when n grows the number of solutions gets huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers. Otherwise, computing the number modulo <answ_modulus> will suffice in assessing you got the right ideas.  
        regex: ^([1-9][0-9]{0,10}|0)$
        default: 0
#        default: 1000000007
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_sol_set:
    evaluator: [python, services/check_sol_set_server.py]
    args:
      feedback:
        regex: ^(yes_no|dispell_first_missing_till_already_present|tell_first_minimal_missing_prefix|give_first_missing|tell_prefix_of_missing_len_[1-9][0-9]{0,10})$
        default: yes_no
        explain: the options are as follows
        explain1: -yes_no= just tell me if I am missing one solution.
        explain2: -dispell_first_missing_till_already_present= please, of one solution I am missing, give me the longest prefix it has in common with a solution I have given.
        explain3: -tell_first_minimal_missing_prefix= please, of one solution I am missing, give me a long enough prefix so that if I complete it to a feasible solution I get a new one.
        explain4: -give_first_missing= just spoil me out a solution I have missed.
        explain5: -tell_prefix_of_missing_len_?= please, of one solution I am missing, give me the prefix of the specified length.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_sol_list:
    evaluator: [python, services/check_sol_list_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_closing_par
      feedback:
        regex: ^(yes_no|spot_first_wrong_consec|dispell_first_missing_till_already_present|tell_first_minimal_missing_prefix|give_first_missing|tell_prefix_of_missing_len_[1-9][0-9]{0,10})$
        default: yes_no
        explain: the options are as follows
        explain1: -yes_no= just tell me if I am missing one solution.
        explain2: -spot_first_wrong_consec= tell me between which two solutions I have given one is missing.
        explain3: -dispell_first_missing_till_already_present= please, of one solution I am missing, give me the longest prefix it has in common with a solution I have given.
        explain4: -tell_first_minimal_missing_prefix= please, of one solution I am missing, give me a long enough prefix so that if I complete it to a feasible solution I get a new one.
        explain5: -give_first_missing= just spoil me out a solution I have missed.
        explain6: -tell_prefix_of_missing_len_?= please, of one solution I am missing, give me the prefix of the specified length.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_next_sol:
    evaluator: [python, services/check_next_sol_server.py]
    args:
      current_sol:
        regex:  ^(\(|\)){0,1000}$
      next_sol:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      tell_maximal_correct_feedback:
        regex: ^(0|1)$
        default: 0
      silent:
        explain: if nothing is wrong then the service runs silently.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_next:
    evaluator: [python, services/eval_next_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^(random_seed|[1-9]|[0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_rank:
    evaluator: [python, services/check_rank_server.py]
    args:
      input_formula:
        regex:  ^(\(|\)){0,1000}$
      rank:
        regex: ^(0|[1-9]|[0-9]{0,300})$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_closing_par
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_unrank:
    evaluator: [python, services/check_unrank_server.py]
    args:
      input_rank:
        regex: ^(0|[1-9]|[0-9]{0,300})$
      formula:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_rank:
    evaluator: [python, services/eval_rank_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^(random_seed|[1-9]|[0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_unrank:
    evaluator: [python, services/eval_unrank_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^(random_seed|[1-9]|[0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  gimme_rank:
    evaluator: [python, services/gimme_rank_server.py]
    args:
      formula:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  gimme_unrank:
    evaluator: [python, services/gimme_unrank_server.py]
    args:
      n_pairs:
        regex: ^(0|[1-9][0-9]{0,1}|1000)$
      rank:
        regex: ^(0|[1-9]|[0-9]{0,1000})$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
  gimme_next_sol:
    evaluator: [python, services/gimme_next_sol_server.py]
    args:
      current_sol:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

