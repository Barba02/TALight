public_folder: public
services:
  check_is_eulerian:
    explain: This service will check your assertion that a directed graph (that you provide us) admits an eulerian walk (of the specified type).
    evaluator: [python,services/is_eulerian_server.py]
    args:     
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
      feedback:
        regex: ^(yes_no|with_YES_certificate)$
        default: yes_no
        explain: when the feedback parameter is set to "with_YES_certificate" and the graph admits an eulerian walk of type "walk_type" then the service returns you one such walk. Otherwise the service will only confirm you that such a walk exists, or deny your assertion.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
      eulerian:
        regex: ^1$
        default: 1
      MAXN:
        regex: ^100$
        default: 100
        explain: The number of nodes of your graph cannot exceed MAXN.
      MAXM:
        regex: ^1000$
        default: 1000
        explain: The number of arcs of your graph cannot exceed MAXM.
  check_is_not_eulerian:
    explain: This service will check your assertion that a directed graph (that you provide us) does NOT admit an eulerian walk of the specified type.
    evaluator: [python,services/is_eulerian_server.py]
    args:     
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
      feedback:
        regex: ^(yes_no|with_YES_certificate)$
        default: yes_no
        explain: when the feedback parameter is set to "with_YES_certificate" and the graph admits an eulerian walk of type "walk_type" then the service returns you one such walk. Otherwise the service will only confirm you that such a walk does NOT exists, or deny your assertion.
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
      eulerian:
        regex: ^0$
        default: 0
      MAXN:
        regex: ^100$
        default: 100
        explain: The number of nodes of your graph cannot exceed MAXN.
      MAXM:
        regex: ^1000$
        default: 1000
        explain: The number of arcs of your graph cannot exceed MAXM.
  check_eulerian_walk:
    explain: This service checks the validity of an eulerian walk for a graph. The service is given both the graph and the walk.
    evaluator: [python,services/check_eulerian_walk_server.py]
    args:
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
      feedback:
        regex: ^(yes_no|full)$
        default: full
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
      MAXN:
        regex: ^100$
        default: 100
        explain: The number of nodes of your graph cannot exceed MAXN.
      MAXM:
        regex: ^1000$
        default: 1000
        explain: The number of arcs of your graph cannot exceed MAXM.
  eval_eulerian_walk_checker:
    explain: "Given a directed graph and a candidate eulerian walk for it, can you decide whether the eulerian walk is valid?"
    evaluator: [python,services/eval_eulerian_walk_checker_server.py]
    args:
      seed:
        explain: "specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      goal:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_euler_dir:
    explain: "Given a directed graph, can you decide if it si eulerian? And can you do it efficiently?"
    evaluator: [python,services/eval_euler_dir_server.py]
    args:
      seed:
        explain: "specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      goal1:
        regex: ^(yes_no|with_yes_certificates)$
        default: yes_no
      goal2:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  trilly_decision:
    evaluator: [python, services/trilly_server.py]
    explain: "Trilly the fairy helps you understand whether a graph admits an eulerian walk. When you call this service a dialogue is set up where, after being given a graph G, you can call trilly to get her advice as follows: you specify one single arc of G (an ordered pair of nodes) and ask trilly whether the graph obtained from G with the removal of such an arc would admit an eulerian walk or not. You can call trilly as many times as you want but, in the end, you must tell whether G admits an eulerian walk or not."
    args:
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      num_calls:
        regex: ^(at_most_2|at_most_n|at_most_m|any)$
        default: any
        explain: Number of allowed Trilly calls.
      seed:
        explain: "specify the numeric code to reproduce the very same psudo-random instance G as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  trilly_construction:
    evaluator: [python, services/trilly_server.py]
    explain: "Trilly the fairy helps you construct an Eulerian walk within a graph that admits at least one. When you call this service a dialogue is set up where, after being given a graph G, you can call trilly to get her advice as follows: you specify one single arc of G (an ordered pair of nodes) and ask trilly to return you an eulerian walk of the graph obtained from G with the removal of such an arc. Trilly will either tell you that no such walk exists or return you one. You can call trilly as many times as you want but, in the end, you must provide an eulerian walk of G."
    args:
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      num_calls:
        regex: ^(at_most_1|at_most_2|at_most_n|at_most_m|any)$
        default: any
        explain1: "Number of allowed Trilly calls."
        explain2: Number of allowed Trilly calls.
      seed:
        explain: "specify the numeric code to reproduce the very same psudo-random instance G as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
