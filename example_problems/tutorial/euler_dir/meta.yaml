%YAML 1.2
---
public_folder: public
services:
# controllato: ok
  check_is_eulerian: 
    description: This service will check your assertion that a directed graph (that you provide us) admits an eulerian walk (of the specified type).
    evaluator: [python,services/is_eulerian_server.py]
    args:     
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
      feedback:
        regex: ^(yes_no|with_YES_certificate)$
        default: yes_no
        explain:  (we could then remove this argument. 2021-08-06, Romeo) when the feedback parameter is set to "with_YES_certificate" and the graph admits an eulerian walk of type "walk_type" then the service returns you one such walk. Otherwise the service will only confirm you that such a walk exists, or deny your assertion.
      eulerian:
        regex: ^1$
        default: 1
      MAXN:
        regex: ^100$
        default: 100
        explain: The number of nodes of your graph cannot exceed MAXN.
      MAXM:
        regex: ^1000$
        default: 1000
        explain: The number of arcs of your graph cannot exceed MAXM.
      check_my_YES_certificate:
        regex: ^(0|1)$
        default: 0
        explain: (introduced 2021-08-06, Romeo) when this flag is set to 1 then the service also receives an eulerian walk of type "walk_type" for the received graph, and checks the validity of this walk.
      check_my_NO_certificate:
        regex: ^0$
        default: 0
      gimme_your_YES_certificate:
        regex: ^(0|1)$
        default: 0
        explain: (introduced 2021-08-06, Romeo) when this flag is set to 1 and it is indeed true that the graph admits an eulerian walk of type "walk_type", then the service also returns one such walk.
      gimme_your_NO_certificate:
        regex: ^0$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      
# controllato: ok
  check_is_not_eulerian:
    description: This service will check your assertion that a directed graph (that you provide us) does NOT admit an eulerian walk of the specified type.
    evaluator: [python,services/is_eulerian_server.py]
    args:     
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
      feedback:
        regex: ^(yes_no|with_YES_certificate)$
        default: yes_no
        explain: (we could then remove this argument. 2021-08-06, Romeo) when the feedback parameter is set to "with_YES_certificate" and the graph admits an eulerian walk of type "walk_type" then the service returns you one such walk. Otherwise the service will only confirm you that such a walk does NOT exists, or deny your assertion.
      eulerian:
        regex: ^0$
        default: 0
      MAXN:
        regex: ^100$
        default: 100
        explain: The number of nodes of your graph cannot exceed MAXN.
      MAXM:
        regex: ^1000$
        default: 1000
        explain: The number of arcs of your graph cannot exceed MAXM.
      check_my_YES_certificate:
        regex: ^0$
        default: 0
      check_my_NO_certificate:
        regex: ^(0|1)$
        default: 0
        explain: "(introduced 2021-08-06, Romeo) when this flag is set to 1 then the service also receives a compact and convincing evidence for the non-existence of a walk of the prescribed type. This piece of evidence should have the form of a general argument that can be conveniently verified. When this flag is set to 1 the service also receives and checks this certificate. Since the form of the argument ought to be general/universal, it can be standardized and encoded. CAUTION: We hope you will first enquiry and conjecture yourself about what could be the form of this general argument/reason for non-existence (what are the necessary and sufficient conditions for the existence of such a walk?), and we have designed the materials of this problem as to support this main quest of you on this classical problem. However, you can also get essentially told about this form (spoiler) and get exposed to its specific encoding by calling this same service (possibly on another input graph) with the flag 'gimme_your_NO_certificate' set to 1. Decide yourself, with caution, the best timing for you (and your ultimate goals) to access the various services."   
      gimme_your_YES_certificate:
        regex: ^0$
        default: 0
      gimme_your_NO_certificate:
        regex: ^(0|1)$
        default: 0
        explain: (introduced 2021-08-06, Romeo) when this flag is set to 1 and it is indeed true that the graph admits no eulerian walk of type "walk_type", then the service also returns a compact and convincing evidence of non-existence that adheres to a general (standardized) argument that can be conveniently verified.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

# ok!
  check_eulerian_walk:
    description: (one could then remove, or just comment out, this whole service. 2021-08-06, Romeo) This service checks the validity of an eulerian walk for a graph. The service is given both the graph and the walk.
    evaluator: [python,services/check_eulerian_walk_server.py]
    args:
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
      feedback:
        regex: ^(yes_no|full)$
        default: full
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      MAXN:
        regex: ^100$
        default: 100
        explain: The number of nodes of your graph cannot exceed MAXN.
      MAXM:
        regex: ^1000$
        default: 1000
        explain: The number of arcs of your graph cannot exceed MAXM.
  # controllato
  eval_eulerian_walk_checker:
    description: "Let's invert our roles! Given a directed graph and a candidate eulerian walk for it, can you check whether the given eulerian walk is valid for the given directed graph?"
    evaluator: [python,services/eval_eulerian_walk_checker_server.py]
    args:
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
        explain: (introduced 2021-08-06, Romeo)
      seed:
        explain: "specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
# corretto
  eval_eulerian_recognize:
    description: "Given a directed graph, can you decide whether it contains an eulerian walk? And can you do it efficiently?"
    evaluator: [python,services/eval_eulerian_recognize_server.py]
    args:
      walk_type:
        regex: ^(open|closed|any)$
        default: closed
        explain: (introduced 2021-08-06, Romeo)
      seed:
        explain: "specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.  (in real√† n ed m non dovrebbe darli l'utente, per valutare non si usa una sola istanza ma diverse, scelte anche a seconda dei goal. 2021-08-06, Romeo)
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      goal1:
        regex: ^(yes_no|with_yes_certificates|with_no_certificates|with_both_certificates)$
        default: yes_no
        explain:  (ho aggiunto delle opzioni to this argument. 2021-08-06, Romeo)
      goal2:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
# ok
  trilly_decision:
    evaluator: [python, services/trilly_decision_server.py]
    description: "Trilly the fairy helps you understand whether a graph admits an eulerian walk. When you call this service a dialogue is set up where, after being given a graph G, you can call trilly to get her advice as follows: you specify one single arc of G (an ordered pair of nodes) and ask trilly whether the graph obtained from G with the removal of such an arc would admit an eulerian walk or not. You can call trilly as many times as you want but, in the end, you must tell whether G admits an eulerian walk or not."
    args:
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      num_calls:
        regex: ^(at_most_2|at_most_n|at_most_m|any)$
        default: any
        explain: Number of allowed Trilly calls.
      seed:
        explain: "specify the numeric code to reproduce the very same psudo-random instance G as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
# ok
  trilly_construction:
    evaluator: [python, services/trilly_construction_server.py]
    description: "Trilly the fairy helps you construct an Eulerian walk within a graph that admits at least one. When you call this service a dialogue is set up where, after being given a graph G, you can call trilly to get her advice as follows: you specify one single arc of G (an ordered pair of nodes) and ask trilly to return you an eulerian walk of the graph obtained from G with the removal of such an arc. Trilly will either tell you that no such a walk exists or return you one. You can call trilly as many times as you want but, in the end, you must provide an eulerian walk of G."
    args:
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of nodes for the random graph G that will be offered you.
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of arcs for the random graph G that will be offered you.
      num_calls:
        regex: ^(at_most_1|at_most_2|at_most_n|at_most_m|any)$
        default: any
        explain1: "Number of allowed Trilly calls."
        explain2: Number of allowed Trilly calls.
      seed:
        explain: "specify the numeric code to reproduce the very same psudo-random instance G as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
...
