%YAML 1.2
---
public_folder: public
services:
  decimal_to_binary:
    description: We give you a number (or you can choose it) in decimal form and you have to produce its binary representation.
    evaluator: [python,services/decimal_to_binary_driver.py]
    args:
      number:
        regex: ^(my|any)$
        default: any
        explain: the decimal number whose binary representation is sought for
      please_do_it_for_me:
        regex: ^(0|1)$
        default: 0
        explain: if this flag is set, and your solution is not correct, then we give you the correct one
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  min_num_steps:
    description: "Have you conquered the puzzle? We give you a random natural number (in its binary representation) and you are asked to tranform it to number 0 using a minimum number of steps. However, by setting the argument \\'number\\' to \\'my\\' you are let to also specify the starting number. If you have conquered the puzzle you can assess your solution by passing a bot implementing it to the service. Otherwise, the service can be used to support your quest."
    evaluator: [python, services/min_num_steps_driver.py]
    args:
      number:
        regex: ^(my|random)$
        default: random
        explain: "the options are as follows:"
        explain1: -random= the starting binary number is randomly generated by the service.
        explain2: -my= the service will ask you to propose the starting binary number.
      feedback:
        regex: ^(yes_no|smaller_or_bigger|true_val)$
        default: yes_no
        explain: "the options are as follows:"
        explain1: -yes_no= provides the minimum possible amount of feedback.
        explain2: -smaller_or_bigger= tells whether the minimum number of moves is smaller or bigger than what stated.
        explain3: -true_val= if your answer for the length of an optimal solution is wrong then the service tells you the correct answer.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  next_step:
    evaluator: [python, services/next_step_driver.py]
    description: We give you a random number (in its binary representation) and you have to insert which one is the optimal first move (the one that allows to get to 0 in a minimum number of moves).
    args:
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  oracle:
    description: As a further aid for your quest, you can ask to this oracle service what is the very first step to do in order to get to zero as fast as possible, starting from the binary number offered from you to the oracle.
    evaluator: [python, services/oracle_driver.py]
    args:
      binary_starting_number:
        regex: ^(lazy|0|1(0|1){0,10000})$
        default: lazy
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_driver.py]
    args:
      size:
        regex: ^(small|medium|large)$
        default: medium
      with_NO_cert:
        regex: ^(0|1)$
        default: 1
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main

##possibili altri servizi pi√π avanzati: dare la combinazione di mosse
...
