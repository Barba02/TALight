public_folder: public
services:
  decimal_to_binary:
    explain: "We give you a number(or you can choose it) in decimal form and you have to convert it in binary form."
    evaluator: [python,services/decimal_to_binary_server.py]
    args:
      number:
        regex: ^(my|any)$
        default: any
        explain: "Decimal number."
      please_do_it_for_me:
        regex: ^(0|1)$
        default: 0
        explain: "If your solution is not correct we give you the right one."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  total_steps:
    explain: "You are asked to tranform the binary number to 0 using a minimum number of steps."
    evaluator: [python, services/total_steps_server.py]
    args:
      number:
        regex: ^(my|any)$
        default: any
        explain: "Decimal number."

      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  next_step:
    evaluator: [python, services/next_step_server.py]
    explain: "We gave you a random number and you have to insert which is the right move."
    args:
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  trilly:
    explain: "You ask to trilly which is the best next step to do, giving her a binary number."
    evaluator: [python, services/trilly_server.py]
    args:
      b:
        regex: ^([0-1][0-1]{0,1000})$
        default: 101
        explain: "Binary numeber."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      size:
        regex: ^(small|medium|large)$
        default: medium
      with_NO_cert:
        regex: ^(0|1)$
        default: 1
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

##possibili altri servizi pi√π avanzati: dare la combinazione di mosse
