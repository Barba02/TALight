public_folder: public
services:
  #fatto - controllato: ok
  dec2opt:
    explains: "this service poses you an instance of the Knapsack problem in its decision form and remains available as an oracle for the Knapsack problem in its optimization form. You can call the oracle as many times as you want but are asked to ultimately answer yes or no for the single decision question posed by the server at the very start of the exchange."
    evaluator: [python, services/dec2opt_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|at_most_one_call)$
        default: correct
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  #fatto (sistemato) - controllato: ok
  opt2con:
    explains: "this service poses you an instance of the Knapsack problem in its optimization form and remains available as an oracle for the Knapsack problem in its construction form. You can call the oracle as many times as you want but are asked to ultimately answer with the optimum value for the single optimization question posed by the server at the very start of the exchange."
    evaluator: [python, services/opt2con_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|at_most_one_call)$
        default: correct
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  #fatto - controllato: ok
  dec2con:
    explains: "this service poses you an instance of the Knapsack problem in its decision form and remains available as an oracle for the Knapsack problem in its construction form. You can call the oracle as many times as you want but are asked to ultimately answer yes or no for the single decision question posed by the server at the very start of the exchange."
    evaluator: [python, services/dec2con_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|at_most_one_call)$
        default: correct
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  #da completare goal "at-most-opt-calls". - Il resto controllato: ok
  opt2dec:
    explains: "this service poses you an instance of the Knapsack problem in its optimization form and remains available as an oracle for the Knapsack problem in its decision form. You can call the oracle as many times as you want but are asked to ultimately answer with the optimum value for the single optimization question posed by the server at the very start of the exchange."
    evaluator: [python, services/opt2dec_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        explain: "the options are as follows: 
        explain1: [correct] we only check that your answer to the optimization problem is correct.
        explain2: [at_most_opt_calls] we check that your answer to the optimization problem is correct and that you do not make more than opt_calls to the oracle.
        explain3: [polynomial] when numbers are encoded by means of a positional notation, as we do, then the share value of natural numbers grows exponentially in the length of the strings encoding them. Therefore, the opt value might be exponentially big in the length of the string encoding the input. As such, in this context polynomial means polynomial in log opt. We are asking you to exhibit a polynomial reduction, not just a pseudo-polynomial one.
        "
        regex: ^(correct|at_most_opt_calls|polynomial)$
        default: correct
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  # fatto - controllato:ok
  con2opt:
    explains: "this service poses you an instance of the Knapsack problem in its construction form and remains available as an oracle for the Knapsack problem in its optimization form. You can call the oracle as many times as you want but are asked to ultimately yield an optimal solution for the single construction question posed by the server at the very start of the exchange."
    evaluator: [python, services/con2opt_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|number_of_calls_linear_in_n)$
        default: correct
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  #fatto - controllato: ok
  con2dec:
    explains: "this service poses you an instance of the Knapsack problem in its construction form and remains available as an oracle for the Knapsack problem in its decision form. You can call the oracle for the decision form as many times as you want but are asked to ultimately yield an optimal solution for the single construction question posed by the server at the very start of the exchange. Posing yourself a different set of goals, you might also ask for one single call to an oracle for the Knapsack problem in its optimization form (see the arguments of the service to know more)."
    evaluator: [python, services/con2dec_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|polynomial_dec_calls|at_most_n_dec_calls)$
        default: correct
      ask_for_one_opt_oracle_call:
        explain: "setting this flag to 1, your very first call to an oracle is interpreted as a call to an oracle for the Knapsack problem in its optimization form. By resorting on a suitable such call, you can reduce to at most n the calls to the decision oracle."
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
 # fatto - controllato:ok
  trilly:
    explain: "this service poses you an n elements instance of the Knapsack problem in its optimization form and remains available as an oracle for the Knapsack problem, again in its optimization form, but considering only instances on at most n-1 elements. You can call this oracle as many times as you want but are asked to ultimately yield an optimal solution for the single optimization question posed by the server at the very start of the exchange."
    evaluator: [python, services/trilly_server.py]
    args:
      size:
        regex: ^(small|large)$
        default: small
      seed:
        explain: "specify the numeric code to reproduce the very same behaviour as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)."
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      goal:
        regex: ^(correct|polynomial_calls|at_most_n_opt_calls|at_most_2_opt_calls)$
        default: correct
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
