public_folder: public
services:
  check_is_eulerian:
    explain: "This service will check your statement that a directed graph you provide us is Eulerian"
    evaluator: [python,services/is_eulerian_server.py]
    args:     
      n:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:
        regex: ^(yes)$
        default: yes
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_is_not_eulerian:
    explain: "This service will check your statement that a directed graph you provide us is not Eulerian"
    evaluator: [python,services/is_not_eulerian_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:
        regex: ^(no)$
        default: no
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_euler_dir:
    explain: "Given a directed graph, can you decide whether it is Eulerian? And can you do it efficiently?"
    evaluator: [python,services/eval_euler_dir_server.py]
    args:
      goal1:
        regex: ^(yes_no|with_yes_certificate)$
        default: yes_no
      goal2:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_YES_certificate:
    explain: "This service will check if the certificate of the directed graph you provide us is a yes certificate"
    evaluator: [python,services/check_YES_certificate_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      goal:
        regex: ^(correct)$
        default: correct
      feedback:
        regex: ^(none|full)$
        default: none
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_YES_certificate:
    explain: "Given a certificate and the directed graph, can you decide if the certificate is correct?"
    evaluator: [python,services/eval_YES_certificate_server.py]
    args:
      goal:
        regex: ^(correct)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

