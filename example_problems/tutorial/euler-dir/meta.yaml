public_folder: public
services:
  check_is_eulerian:
    explain: "This service will check your statement that a directed graph you provide us is Eulerian"
    evaluator: [python,services/is_eulerian_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:	
        regex: ^(yes)$
        default: yes
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      seed:
        regex: ^([1-9][0-9]{5,5}|lazy)$
        default: lazy
        explain: "Number of arcs."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_is_not_eulerian:
    explain: "This service will check your statement that a directed graph you provide us is not Eulerian"
    evaluator: [python,services/is_eulerian_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:	
        regex: ^(no)$
        default: no
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      seed:
        regex: ^([1-9][0-9]{5,5}|lazy)$
        default: lazy
        explain: "Number of arcs."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_euler_dir:
    explain: "Given a directed graph, can you decide whether it is Eulerian? And can you do it efficiently?"
    evaluator: [python,services/eval_euler_dir_server.py]
    args:
      goal1:
        regex: ^(yes_no|with_yes_certificates|well_characterized)$
        default: yes_no
      goal2:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_is_a_family_of_circuits:
    explain: "This service will check your statement that a directed graph you provide us is Eulerian"
    evaluator: [python,services/is_a_family_of_circuits_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:	
        regex: ^(yes)$
        default: yes
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      seed:
        regex: ^([1-9][0-9]{5,5}|lazy)$
        default: lazy
        explain: "Number of arcs."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_is_not_eulerian:
    explain: "This service will check your statement that a directed graph you provide us is not Eulerian"
    evaluator: [python,services/is_a_family_of_circuits_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:	
        regex: ^(no)$
        default: no
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      seed:
        regex: ^([1-9][0-9]{5,5}|lazy)$
        default: lazy
        explain: "Number of arcs."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_circuit_decomposition:
    explain: "Given a directed graph, can you decide whether its arc set can be decomposed into a family of directed circuits? And can you do it efficiently?"
    evaluator: [python,services/eval_euler_dir_server.py]
    args:
      goal1:
        regex: ^(yes_no|with_yes_certificates|well_characterized)$
        default: yes_no
      goal2:
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_is_a_family_of_node_disjoint_circuits:
    explain: "This service will check your statement that a directed graph you provide us is Eulerian"
    evaluator: [python,services/is_a_family_of_node_disjoint_circuits_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:	
        regex: ^(yes)$
        default: yes
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      seed:
        regex: ^([1-9][0-9]{5,5}|lazy)$
        default: lazy
        explain: "Number of arcs."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_is_not_eulerian:
    explain: "This service will check your statement that a directed graph you provide us is not Eulerian"
    evaluator: [python,services/is_a_family_of_node_disjoint_circuits_server.py]
    args:
      n:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of nodes."
      m:
        regex: ^([1-9][0-9]{0,1}|1000|lazy)$
        default: lazy
        explain: "Number of arcs."
      eulerian:	
        regex: ^(no)$
        default: no
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(yes_no|with_certificate)$
        default: yes_no
      seed:
        regex: ^([1-9][0-9]{5,5}|lazy)$
        default: lazy
        explain: "Number of arcs."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

