%YAML 1.2
---
public_folder: public
services:
  compact_solution:
    description: We give you a matrix and a sequence of switch rows/columns operations that leads to the all 0 matrix. You are required to shorten this sequence.
    evaluator: [python,services/compact_solution_driver.py]
    args:
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the pirellone.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the pirellone.
      goal:
        regex: ^(m_plus_n|m_plus_n_half|min)$
        default: m_plus_n
        explain: "Set an upper-bound on the length of your solution. The choiches are as follows:"
        explain1: "[m_plus_n]  yield a solution with at most m+n moves."
        explain2: "[m_plus_n_half]  yield a solution with at most (m+n)/2 moves."
        explain3: "[min]  yield a solution with the minimum possible number of moves."
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: Level of the exercise.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  order_of_rows_columns:
    description: You are asked to prove that the solvability of a 0/1-matrix is invariant under permutation of its rows (or columns). We give you a good 0/1-matrix and a sequence of switch row/column operations turnig it off (a certificate of goodness). We also give you a permutation of the rows and a permutation of the columns of the matrix. You are required to give us a certificate of goodness for the permuted matrix.
#    example: "rtal connect pirellone order_of_rows_columns -am=2 -an=3\\n>1 0 1\\n>0 1 0\\n<r1 c2\\n>2 1\\n> 3 2 1\\n< r2 c2"
    example1: 'rtal connect pirellone order_of_rows_columns -am=2 -an=3{chr(10)}{chr(13)}      > 1 0 1{chr(10)}{chr(13)}      > 0 1 0{chr(10)}{chr(13)}      < r1 c2'
    example2: 'rtal connect pirellone order_of_rows_columns -am=2 -an=3{chr(10)}{chr(13)}      > 2 1{chr(10)}{chr(13)}      > 3 2 1{chr(10)}{chr(13)}      < r2 c2'
    evaluator: [python, services/order_of_rows_columns_driver.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: Number of rows of the big matrix.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: Number of columns of the big matrix.
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  sub_closure:
    description: You are asked to prove that a 0/1-matrix containing a bad submatrix is also bad. We give you a good 0/1-matrix and a sequence of swich row/column operations turnig it off (a certificate of goodness). You are required to give us a certificate of goodness for a 0/1-submatrix specified by us.
    evaluator: [python, services/sub_closure_driver.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: Number of rows of the big matrix.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: Number of columns of the big matrix.
      submatrix_type:
        regex: ^(consecutive|any)$
        default: consecutive
        explain: Type of submatrix.
        explain1: "[consecutive]  the submatrix comprises the first m_small rows and the first n_small columns of the big matrix. See also the service order_of_rows_columns to see why this is actually a general consecutive submatrix."
        explain2: "[any]  the service server provides two random 0/1-vectors of length m and n, respectively. These characteristic vectors specify the rows and columns of the submatrix."
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_unsol:
    evaluator: [python, services/check_unsol_driver.py]
    description: You provide a matrix that you believe to be unsolvable (or minimal/minimum unsolvable). The service checks its unsolvability (or your stronger assertion). In case your matrix is not unsolvable, You can also check the minimality of your unsolvable matrix.
    args:
      assertion:
        regex: ^(any|minimal|minimum)$
        default: any
        explain: Set your goal. You can choose the type of unsolvability related to the size of the matrix.
      with_certificate:
        regex: ^(0|1)$
        default: 0
        explain: if this flag is set to 1 and your assertion is false, then the service offers evidence of the fault.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_sol:
    description: "The service checks your solution for an instance (either provided by you or generated at random). You can even call this service on an already encountered solvable random instance (also met with other services): a solvable random instance can be reconstructed from m, n, and its random seed."
    evaluator: [python, services/check_sol_driver.py]
    args:
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      coding:
        regex: ^(seq|subset)$
        default: seq
        explain: "[seq] list of commands for example r1 c3 r4, subset is two string of 1,0 as long as the number of rows and columns that indicate which switch is on or off."
        example: "[subset] r2 c4 r3 r1, subset: 1 0 1, 0 1 1 if the matrix is 3x3"
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_given_sol:
    evaluator: [python, services/eval_given_sol_driver.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the pirellone.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the pirellone.
      with_check_of_sol:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, for the yes instances, you should also provide a solution which will be checked by the service.
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_decision:
    evaluator: [python, services/eval_decision_driver.py]
    args:
      size:
        regex: ^(small|medium|large)$
        default: medium
      goal:
        regex: ^(correct|efficient)$
        default: correct
        explain: Set your goal (efficient includes also correct).
      with_check_of_sol:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, for the yes instances, you should also provide a solution which will be checked by the service.
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_sol:
    description: si basa su un dialogo dove il bot chiede il valore di alcune entris prima di tornar la soluzione.
    evaluator: [python, services/eval_sol_driver.py]
    args:
      goal:
        regex: ^(correct|polynomial_in_m|efficient|sub_linear)$
        default: correct
        explain: Set your goal from the following total order
        explain1: "[correct]  bla bla"
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  trilly:
    evaluator: [python, services/trilly_driver.py]
    description: Trilly the fairy helps you understand whether and how you can solve a 0/1-matrix. When you call this service a dialogue is set up where, after being told the number of rows and columns, you can either ask to switch the boolean values over entire rows or columns, query the current value of specific entries of the matrix, or ask Trilly how she would now act in order to turn off all of the entries in a submatrix of your choice (other than the whole matrix, of course; remember that Trilly is the tiny fairy). When the submatrix is unsolvable, Trilly will return a minimal unsolvable submatrix. In the end you must either turn off the entire matrix or claim the unsovability of the whole matrix. Try to use just one call, or just two calls to Trilly (these will be the most instructive). Also, when the whole matrix is unsolvable, try to claim the unsolvability of a minimal unsolvable submatrix rather then the unsolvability of the whole matrix.
    args:
      m:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of rows of the whole random matrix.
      n:
        regex: ^([1-9]|10|20|50|100|1000|10000)$
        default: 10
        explain: Choose the number of columns of the whole random matrix.
      trilly1:
        regex: ^(only_tells|tells_and_acts|only_acts)$
        default: only_acts
        explain: This parameter influences the behaviour of trilly when assigned a solvable submatrix. She can either suggest a set of moves that would turn it off, or just perform those moves, of perform those moves while spelling them out.
      trilly2:
        regex: ^(any_sol|dont_touch_first_submatrix_row)$
        default: any_sol
        explain: This parameter influences the behaviour of trilly when assigned a solvable submatrix. We can ask her to turn it off avoiding to invert the first row of the submatrix.
      num_calls:
        regex: ^(1|2|any)$
        default: 2
        explain: Number of allowed Trilly calls.
      num_queries:
        regex: ^([0-9]|10|20|50|100|1000|10000|10001|any)$
        default: any
        explain: Number of allowed entry queries.
      num_your_moves:
        regex: ^([0-9]|10|20|50|100|1000|10000|10001|any)$
        default: any
        explain: Number of your moves (those made by Trilly do not count).
      seed:
        explain: specify the numeric code (any integer in the interval [100000,999999]) to work with an already met pseudo-random instance. When this argument is left to its default value (random_seed) then the service chooses a seed at random, communicates it to the user, and works on the unique pseudo-random instance <m,n,seed>.
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
...
