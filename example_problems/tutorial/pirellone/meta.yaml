public_folder: public
services:
  compact_solution:
    explain: "We give you a matrix and a sequence of switch rows/columns operations that leads to the all 0 matrix. You are required to shorten this sequence."
    evaluator: [python,services/compact_solution_server.py]
    args:
      seed:
        explain: "Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run."
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: "Number of rows of the pirellone."
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: "Number of columns of the pirellone."
      goal:
        regex: ^(m_plus_n|m_plus_n_half|min)$
        default: m_plus_n
        explain: "set an upper-bound on the length of your solution."
      level:
        regex: ^(easy|medium|difficult)$
        default: medium
        explain: "Level of the exercise."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  sub_closure:
    explain: "You are asked to prove that a 0/1-matrix containing a bad 0/1-submatrix is also bad. We give you a good 0/1-matrix and a sequence of swich row/column operations turnig it off (a certificate of goodness). You are required to give us a certificate of goodness for a 0/1-submatrix specified by us."
    evaluator: [python, services/sub_closure_server.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: "Number of rows of the big matrix."
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: "Number of columns of the big matrix."
      submatrix_type:
        regex: ^(consecutive|any)$
        default: consecutive
        explain: "Type of submatrix. Consecutive is the matrix of first m rows and n column, any is a random submatrix."
      goal:
        regex: ^(any|min)$
        default: min
        explains: "set your goal. Here min includes also any: if you choose min then your solution should be shortest possibile, otherwise any solution that turn off all the lights is good."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_unsolvability:
    evaluator: [python, services/check_unsolvability_server.py]
    explain: "You can check if your matrix is unsolvable."
    args:
      goal:
        regex: ^(any|minimal|minimum)$
        default: any
        explains: "set your goal. You can choose the type of unsolvability related to the size of the matrix."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_sol:
    explain: "You can check a solution of yours for an instance (your or generated at random)."
    evaluator: [python, services/check_sol_server.py]
    args:
      instance:
        regex: ^(mine|random)$
        default: random
        explain: "Mine: i give my instace, random: random instance."
      seed:
        explain: "Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user). Otherwise, specify a numeric code to replicate the very same experiment as in a previous run."
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      coding:
        regex: ^(seq|subset)$
        default: seq
        explain: "seq: list of commands for example r1 c3 r4, subset is two string of 1,0 as long as the number of rows and columns that indicate which switch is on or off. "
        example: "seq: r2 c4 r3 r1, subset: 1 0 1, 0 1 1 if the matrix is 3x3 "
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      size:
        regex: ^(small|medium|large)$
        default: medium
        explain: "Choose the dimensions of the matrix to verify."
      goal:
        regex: ^(correct|efficient)$
        default: correct
        explains: "set your goal (efficient includes also correct)."
      code_lang:
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explains: "the more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  trilly:
    evaluator: [python, services/trilly_server.py]
    explain: "Trilly the fairy helps you understand whether and how you can solve a 0/1-matrix."
    args:
      size:
        regex: ^(small|medium|large|huge|unbearable)$
        default: medium
        explain: "You can choose the size of the random matrix."
      num_calls:
        regex: ^([1-9]{0,1})$
        default: 2
        explain: "Number of step to find the solution."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

