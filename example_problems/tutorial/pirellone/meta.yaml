public_folder: public
services:
  compact_solution:
    explain: "We give you a 0/1-matrix and a sequence of switch rows/columns operations that eventually lead to the all 0 matrix. You are required to shorten this sequence."
    evaluator: [python,services/compact_solution_server.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: "Number of rows of the pirellone."
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: "Number of columns of the pirellone."
      goal:
        regex: ^(m_plus_n|m_plus_n_half|min)$
        default: m_plus_n
      please_do_it_for_me:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  sub_closure:
    explain: "You are asked to prove that a 0/1-matrix containing a bad 0/1-submatrix is also bad. We give you a good 0/1-matrix and a sequence of swich row/cololum operations turnig it off (a certificate of goodness). You are required to give us a certificate of goodness for a 0/1-submatrix specified by us."
    evaluator: [python, services/sub_closure_server.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: "Number of rows of the big matrix."
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: "Number of columns of the big matrix."
      goal:
        regex: ^(any|min)$
        default: min
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_unsolvability:
    evaluator: [python, services/check_unsolvability_server.py]
    eplain: "You have to insert a matrix that you think is unsolvable."
    args:
      goal:
        regex: ^(any|minimal|minimum)$
        default: any
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_sol:
    explain: "You can check a solution of yours for an instance (yours or generated at random)."
    evaluator: [python, services/check_sol_server.py]
    args:
      instance:
        regex: ^(mine|random)$
        default: random
        explain: "Mine: i give my instace, random: random instance."
      seed:
        regex: ^(\d{3,8})$
        default: 000
      coding:
        regex: ^(seq|subset)$
        default: seq
        explain: "seq: list of commands for example r1 c3 r4, subset is two string of 1,0 that indicate which switch is on or off. "
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      size:
        regex: ^(small|medium|large)$
        default: medium
      with_NO_cert:
        regex: ^(0|1)$
        default: 1
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  trilly:
    evaluator: [python, services/trilly_server.py]
    args:
      size:
        regex: ^(small|medium|large|huge|unbearable)$
        default: medium
      num_calls:
        regex: ^([1-9]{0,1})$
        default: 2
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

