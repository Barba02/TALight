public_folder: public
services:
  compact_solution:
    explain: "We give you a matrix and a sequence of switch rows/columns operations that leads to the all 0 matrix. You are required to shorten this sequence."
    evaluator: [python,services/compact_solution_server.py]
    args:
      seed:
        regex: ^([1-9]\d{2,7}|any)$
        default: any
        explain: "Called with seed=any, the service chooses its seed at random (and communicates it to the user)"
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: "Number of rows of the pirellone."
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: "Number of columns of the pirellone."
      goal:
        regex: ^(m_plus_n|m_plus_n_half|min)$
        default: m_plus_n
        explain: "Length of your solution."
      please_do_it_for_me:
        regex: ^(0|1)$
        default: 0
        explain: "If your solution is not correct we give you the right one."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  sub_closure:
    explain: "You are asked to prove that a 0/1-matrix containing a bad 0/1-submatrix is also bad. We give you a good 0/1-matrix and a sequence of swich row/column operations turnig it off (a certificate of goodness). You are required to give us a certificate of goodness for a 0/1-submatrix specified by us."
    evaluator: [python, services/sub_closure_server.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: "Number of rows of the big matrix."
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: "Number of columns of the big matrix."
      submatrix_type:
        regex: ^(consecutive|any)$
        default: consecutive
        explain: "Type of submatrix. Consecutive is the matrix of first m rows and n column, any is a random submatrix."
      goal:
        regex: ^(any|min)$
        default: min
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_unsolvability:
    evaluator: [python, services/check_unsolvability_server.py]
    explain: "You can check if your matrix is unsolvable."
    args:
      goal:
        regex: ^(any|minimal|minimum)$
        default: any
        explain: "You can choose the type of unsolvability related to the size of the matrix."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  check_sol:
    explain: "You can check a solution of yours for an instance (yours or generated at random)."
    evaluator: [python, services/check_sol_server.py]
    args:
      instance:
        regex: ^(mine|random)$
        default: random
        explain: "Mine: i give my instace, random: random instance."
      seed:
        regex: ^([1-9]\d{2,7}|any)$
        default: any
        explain: "Called with seed=any, the service chooses its seed at random (and communicates it to the user)"
      coding:
        regex: ^(seq|subset)$
        default: seq
        explain: "seq: list of commands for example r1 c3 r4, subset is two string of 1,0 as long as the number of rows and columns that indicate which switch is on or off. "
        example: "seq: r2 c4 r3 r1, subset: 1 0 1, 0 1 1 if the matrix is 3x3 "
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_sol:
    evaluator: [python, services/eval_sol_server.py]
    args:
      size:
        regex: ^(small|medium|large)$
        default: medium
      goal:
        regex: ^(correct|efficient)$
        default: correct
      code_lang:
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  trilly:
    evaluator: [python, services/trilly_server.py]
    explain: "The fairy Trilly helps you to understand how you can solve a random matrix."
    args:
      size:
        regex: ^(small|medium|large|huge|unbearable)$
        default: medium
        explain: "You can choose the size of the random matrix."
      num_calls:
        regex: ^([1-9]{0,1})$
        default: 2
        explain: "Number of step to find the solution."
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
      lang:
        regex: ^(hardcoded|en|it)$
        default: it

