%YAML 1.2
---
public_folder: public
services:
  compact_solution:
  order_of_rows_columns:
    description: You are asked to prove that the solvability of a 0/1-matrix is invariant under permutation of its rows (or columns). We give you a good 0/1-matrix and a sequence of switch row/column operations turnig it off (a certificate of goodness). We also give you a permutation of the rows and a permutation of the columns of the matrix. You are required to give us a certificate of goodness for the permuted matrix.
    example: "rtal connect pirellone -am=2 -an=3"
    example1: "> 1 0 1"
    example2: "> 0 1 0"
    example3: "> r1 c2"
    example4: "> 2 1"
    example5: "> 3 2 1"
    example6: "< r2 c2"
    evaluator: [python, services/order_of_rows_columns_server.py]
    args:
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: Number of rows of the big matrix.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 10
        explain: Number of columns of the big matrix.
      seed:
        explain: specify the numeric code to reproduce the very same psudo-random instance as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  sub_closure:
  check_unsol:
  check_sol:
  eval_decision:
  eval_sol:
  trilly:
  synopsis:
...
