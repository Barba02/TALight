#!/usr/bin/env python3
from sys import stderr

from multilanguage import Env, Lang, TALcolors
from TALinputs import TALinput
from TALfiles import TALfilesHelper

from math_modeling import ModellingProblemHelper

import pirellone_lib as pl

# METADATA OF THIS TAL_SERVICE:
args_list = [
    ('source',str), #(catalogue|terminal|random)
    ('m',int),
    ('n',int),
    ('seed',int),
    ('instance_id',int),
    ('instance_format',str),
    ('instance_solvability',str),
    ('sol_format',str), #(only_val|seq|subset)
    ('download',bool),
]

ENV =Env(args_list)
TAc =TALcolors(ENV)
LANG=Lang(ENV, TAc, lambda fstring: eval(f"f'{fstring}'"), print_opening_msg = 'now')
TALf = TALfilesHelper(TAc, ENV)

# funzioni copiate da pirellone_lib
def is_solvable(pirellone, with_yes_certificate=False):
    """From a pirellone instance, this functions returns True if it is solvable, False otherwise."""
    opt_sol = pl.get_opt_sol_if_solvable(pirellone)
    solvable, _ = pl.check_sol(pirellone, opt_sol)
    if with_yes_certificate:
        return solvable, opt_sol if solvable else None
    else:
        return solvable

def get_opt_sol(pirellone):
    """Returns NO_SOL if the instance is unsolvable, otherwise the optimal solution."""
    is_solv, opt_sol = is_solvable(pirellone, with_yes_certificate=True)
    if is_solv:
        return opt_sol
    return 'NO SOLUTION'

# START CODING YOUR SERVICE:

extension=pl.format_name_to_file_extension(ENV['instance_format'], 'instance')
if TALf.exists_input_file('instance'):
    instance = pl.get_instance_from_str(TALf.input_file_as_str('instance'), instance_format=ENV["instance_format"])
    TAc.print(LANG.render_feedback("instance-successfully-loaded", 'The file you have associated to `instance` filehandler has been successfully loaded.'), "yellow", ["bold"])
    # print(instance)
elif ENV["source"] == 'terminal':
    TAc.print(LANG.render_feedback("waiting", f'#? waiting for the {ENV["m"]} lines of {ENV["n"]} elements (0 or 1).\nFormat: you have to enter the {ENV["m"]} lines (corresponding to the {ENV["m"]} rows of the Pirellone), where each of the {ENV["n"]} elements (0 or 1) must be separated by a space.\nAny line beggining with the "#" character is ignored.\nIf you prefer, you can use the "TA_send_txt_file.py" util here to send us the raw_instance of a file. Just plug in the util at the "rtal connect" command like you do with any other bot and let the util feed in the file for you rather than acting by copy and paste yourself.'), "yellow")
    instance = []
    for row in range (ENV['m']):
        TAc.print(LANG.render_feedback("new-row", f'Enter the row {row+1} of your Pirellone (given by {ENV["n"]} elements (0 or 1) separated by a space):'), "yellow", ["bold"])
        instance.append([int(e) for e in TALinput(str, regex=f"^(([a-zA-Z0-9])*)$", sep=' ', TAc=TAc)])
    solution=get_opt_sol(instance)
elif ENV["source"] != 'catalogue':
    # Get random instance
    assert ENV["source"] == 'random'
    if ENV['instance_solvability'] == 'solvable':
        ENV.arg['seed'] = pl.gen_instance_seed(solvable=True)
    elif ENV['instance_solvability'] == 'unsolvable':
        ENV.arg['seed'] = pl.gen_instance_seed(solvable=False)
    
    instance= pl.gen_instance(ENV['m'], ENV['n'], ENV['seed'])
    instance_str = pl.instance_to_str(instance, instance_format=ENV['instance_format'])
    output_filename = f"instance_{ENV['m']}_{ENV['n']}_{ENV['seed']}.{ENV['sol_format']}.txt"
    TAc.print(LANG.render_feedback("instance-generation-successful", f'The instance has been successfully generated by the pseudo-random generator {ENV["source"]} called with arguments:\n   seed={ENV["seed"]}\n   m={ENV["m"]}\n   n={ENV["n"]}'), "yellow", ["bold"])
else: # take instance from catalogue
    # Initialize ModellingProblemHelper
    mph = ModellingProblemHelper(TAc, ENV.INPUT_FILES, ENV.META_DIR)
    instance_str = mph.get_file_str_from_id(ENV['instance_id'], format_name=extension)
    instance = pl.get_instance_from_str(instance_str, instance_format=ENV['instance_format'])
    TAc.print(LANG.render_feedback("instance-from-catalogue-successful", f'The instance with instance_id={ENV["instance_id"]} has been successfully retrieved from the catalogue.'), "yellow", ["bold"])
    output_filename = f"instance_catalogue_{ENV['instance_id']}.{ENV['sol_format']}.txt"

m=len(instance)
n=len(instance[1])
solution=get_opt_sol(instance)

TAc.print(LANG.render_feedback("this-is-the-instance", 'This is the instance:'), "white", ["bold"])
TAc.print(pl.instance_to_str(instance, instance_format=ENV['instance_format']), "white", ["bold"])


if ENV["sol_format"] == 'only_val':
    only_val=len(pl.subset_to_seq(solution)) if solution!='NO SOLUTION' else solution
    TAc.print(LANG.render_feedback("solution-val-title", f"The number of switches you need to push is:"), "green", ["bold"])
    TAc.print(LANG.render_feedback("solution-only_val", f'{only_val}'), "white", ["reverse"])
    if ENV["download"]:
        TALf.str2output_file(only_val,f'opt_val.txt')
else:
    TAc.print(LANG.render_feedback("solution-title", f"An optimal solution to this instance is:"), "green", ["bold"])
    if ENV["sol_format"] == 'seq':
        sol=pl.seq_to_str(pl.subset_to_seq(solution))
        TAc.print(LANG.render_feedback("solution-seq", sol), "white", ["reverse"])
        if ENV["download"]:
            TALf.str2output_file(sol,output_filename)
    elif ENV["sol_format"] == 'subset':
        TAc.print(LANG.render_feedback("solution-subset", f'{pl.subset_to_str(solution)}'), "white", ["reverse"])
        if ENV["download"]:
            TALf.str2output_file(pl.subset_to_str(solution),output_filename)
    
exit(0)
