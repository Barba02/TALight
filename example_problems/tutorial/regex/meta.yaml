public_folder: public
services:
  TAL_recognizes:
    explain: "Submit a regular expression r and a string s over the same alphabet. The service recognizes whether s belongs to the language described by r."
    evaluator: [python,services/TAL_recognizes_server.py]
    args:
      s:
        regex: ^(lazy|([a-z]|[A-Z]){0,100})$
        default: lazy
      r:
        regex: ^(lazy|([a-z]|[A-Z]|\*|\+|\(|\)){0,100})$
        default: lazy
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  you_recognize:
    explain: "We give you a regular expression r and a string s over the same alphabet. Your aim is to recognize whether s belongs to the language described by r. You have control on the size of the instance (r,s) by means of parameters m and n. The instance is pseudo-random and fully spcifified by m,n, and the seed."
    evaluator: [python,services/TAL_you_recognize_server.py]
    args:
      seed:
        regex: ^([1-9]\d{2,7}|any)$
        default: any
        explain: "Called with seed=any, the service chooses its seed at random (and communicates it to the user)"
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 12
        explain: "Length of the regular expression r."
      n:
        regex: ^([1-9][0-9]{0,4})$
        default: 20
        explain: "Length of the string s."
      feedback:
        regex: ^(yes_no|with_construction_of_s)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_recognize:
    explain: "This service assesses the correctness and efficiency of your machinery to recognize whether s in L_r."
    evaluator: [python,services/eval_recognize_server.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^([1-9]\d{2,7}|any)$
        default: any
        explain: "Called with seed=any, the service chooses its seed at random (and communicates it to the user)"
      code_lang:
        regex: ^(CIF|python|java|nodejs|compiled)$
        default: CIF
        explain: "You can specify the language/framework that you used."
      feedback:
        regex: ^(yes_no|with_construction_of_s)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_regex2NFA:
    explain: "This service assesses the correctness and efficiency of your machinery to compute the non-deterministic automaton for a regex given in input."
    evaluator: [python,services/eval_regex2NFA.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^([1-9]\d{2,7}|any)$
        default: any
        explain: "Called with seed=any, the service chooses its seed at random (and communicates it to the user)"
      code_lang:
        regex: ^(CIF|python|java|nodejs|compiled)$
        default: CIF
        explain: "You can specify the language/framework that you used."
      feedback:
        regex: ^(yes_no|correct_NDF_when_wrong)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
  eval_NFA2DFA:
    explain: "This service assesses the correctness and efficiency of your machinery to yield a deterministic automaton equivalent to a non-deterministic automaton given in input."
    evaluator: [python,services/eval_NFA2DFA.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^([1-9]\d{2,7}|any)$
        default: any
        explain: "Called with seed=any, the service chooses its seed at random (and communicates it to the user)"
      code_lang:
        regex: ^(CIF|python|java|nodejs|compiled)$
        default: CIF
        explain: "You can specify the language/framework that you used."
      feedback:
        regex: ^(yes_no|correct_DFA_when_wrong)$
        default: yes_no
      lang:
        regex: ^(hardcoded|en|it)$
        default: it
