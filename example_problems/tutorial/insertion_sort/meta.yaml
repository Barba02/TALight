%YAML 1.2
---
public_folder: public
description: hey mama come mi diverto
services:
  log_debug_your_insertion_sort_bot:
    description: |+
     This service is meant to supervision and validate your understanding and/or implementation of the InsertionSort algorithm while also supporting the authonomous discovery of this classical algorithm. The idea is to consider the InsertionSort algorithm as a recipt for operating an abstract InsertionSortMachine offering a restricted set of possible primitive operations on an expandable internal array (where the already sorted integers are stored) and a temporary buffer (where to load a new incoming integer). Upon execution of each one of these primitive operations, the abstract machine yields a predetermined log line that unambiguosly represents what has happened. The possible operations of the abstract InsertionSortMachine can be inferred by the list of the possible log lines (one for every operation):  
        LOG_load_next_input_element_in_tmp_buffer (got <val>)
        LOG_flush_tmp_buffer_ele_in_pos <i>
        LOG_clone_to_its_right_ele_in_pos <i>
        LOG_compare_ele_in_tmp_buffer_with_ele_in_pos <i> (got <outcome>)
        LOG_output_final_sorted_array <final_array>
     The service validates your correct understanding/implementation of the InsertionSort algorithm by checking the coherence of the resulting sequence of log lines. In case of any anomaly, the service signals it and bails out asap.
     The goal of your recipt is to yield a sorted array. The abstract machine is designed in such a way that, at every given moment, there exists a unique recipt for operating it while guaranteeing the ultimate achievement of this goal whatever these elements turn out to be in the future of the online process. This unique corrept operational flow is the InsertionSort algorithm archetype.
     Therefore, your log lines can be checked step-by-step to correspond to the steps of an always-correct sorting algorithm operating the InsertionSortMachine. This means that when trying to operate this machine the problem solver is bound to discover the logic of the InsertionSort algorithm (even without any prior knowledge about this classic algorithm). 
     You can find examples of coherent log sequences in the `examples` public folder (public means that it is contained in the archive `insertion_sort.tar` that you get by issuing `rtal get insertion_sort`). These logs might clarify several points but, when entirely correct, are partially spoilering since they are produced by the InsertionSortMachine when operated according to the InsertionSort algorithm, whereas we insist on that this service has the potential to fully support an exercise where the problem-solver is asked to discover on its own the logic of the InsertionSort algorithm.
     Another way to infer the set of operations and functioning of the abstract InsertionSortMachine is by reading the description/implementation of the class `InsertionSortMachine` in the public library `insertion_sort_machine_lib.py`. Again, public means that you get it by issuing `rtal get insertion_sort`. Right now, the `insertion_sort.tar` archive downloaded in this way will contain this python implementation, but if you work out implementations in other languages or other additions/improvements you can contribute them to the TALight open source project.
     You can call this service by issuing `rtal connect insertion_sort log_debug_your_insertion_sort_bot` and then inserting the lines of log one by one or even in group (by copy&paste). However, you are also given the possibility to plug in (and hence validate) a bot of yours meant to implement the InsertionSort algorithm according to the abstract InsertionSortMachine model and sending the required log lines to stdout. The service will only receive what your bot sends to stdout and considers only the lines prefixed by "LOG_", all other lines are ignored. What sent to stderr will appear on the terminal but will not go through rtal and the service server.
     When implementing your bot we suggest you to rest on an abstract InsertionSortMachine implementation library like `insertion_sort_machine_lib.py`. In this way, all logs will be produced for free as a byproduct meanwhile your bot only needs to operate the machine. Indeed, if you implement the InsertionSort algorithm as a recipt for operating the InsertionSortMachine then insertion_sort_machine_lib.py will take full care of the log messages.
     By a bot we mean any executable command that you managed to make executable on your local machine. In order to plug in your bot in a call to the service just issue something like:
        rtal connect -e insertion_sort log_debug_your_insertion_sort_bot -- fullname_of_your_executable_Insertion_Sort_bot example_array_of_ints.txt other_arguments_to_your_bot
     For example, on our local machine this could be:
        rtal connect -e insertion_sort log_debug_your_insertion_sort_bot --  python bots/test_bot.py examples/inputs/array_of_9_ints.txt
     where `python bots/test_bot.py` (or just `bots/test_bot.py` on Mac or Unix) on our local machine would launch a process taking in the array of integers contained in the file passed as first argument and process it according to the InsertionSort algorithm implemented with reference to the abstract InsertionSortMachine in insertion_sort_machine_lib.py.
     You could also call the service as follows:
        rtal connect insertion_sort -a interactive log_debug_your_insertion_sort_bot --  bots/test_bot.py examples/inputs/array_of_9_ints.txt wait_for_prompt
     Here we see that this process (our bot) can take two arguments. With this second argument we command the bot to wait for a prompt before printing each line (see the intended use of the `wait_for_prompt` argument in our example bot and in the insertion_sort_machine_lib.py). As seen in the previous example, you can do without this more refined synchronization, and then even avoid plugging in your bot and just paste in the log lines it produces. In fact, once you have realized and experimented what can be done with direct interaction with the service, you can make your own authonomous decisions on how to organize your bot so that its interaction with the service is functional for your puposes.
     For example, your bot is expected to read the elements to be sorted from a file, however: (1) the input vector could actually be hardcoded in your bot; (2) the format with which you store input vectors into a file is ultimately your own businness. If you prefer to adhere to our format for this (so that you can use our files) you can take as your reference the file `array_of_4_ints.txt` in the `examples` folder. This file comprises two lines:
       -the first line contains the number <n> of integers to be sorted. 
       -the second line contains <n> integer numbers separated by spaces.
     However, the format of this file and the way you organize the way your bot takes in the input array (as long as you do not require it from stdin, which is assigned to rtal when the bot is plugged in) is not a service\'s businness, you have freedom.
     Similarly, the use of the InsertionSortMachine is not mandatory (thus you can write you bot also in languages for which this class/library has not been offered yet) but then you must take inspiration either from a correct log file example or from insertion_sort_machine_lib.py, which you can also reimplement in another language and possibly contribute to this open source TALight project.
     What is mandatory, if you want to make use of this service, is that your bot, meanwhile getting the elements one by one and accomodating them to their currently proper place inside the array of collected elements, also sends to `stdout`  the correct log line whenever the abstract InsertionSortMachine performs a basic operation.
     If you write your bot in python, then you can conveniently use the class InsertionSortMachine implemented in the `insertion_sort_machine_lib.py` library.
     In any case, your bot will run on your local machine, operating on the instance contained in the `example_array_of_ints.txt` file (or any other file you might prefer), and a log about its working will be sent to `stdout`.
     It is important to know that you can launch and test your bot in separate; then, when you plug it into the service using the `rtal` command as shown above, the stdout of your bot will be sent directly to the service (and the stdout of the service goes to the stdin of your bot). The purpose of the service is to validate the correctness of your implementation of the Insertion Sort algorithm by accessing its log messages.
    example1: [to directly edit or paste in your log lines into the service, '\n     rtal connect insertion_sort log_debug_your_insertion_sort_bot']
    example2: [to plug in yout bot in the service, '\n     rtal connect -e insertion_sort log_debug_your_insertion_sort_bot -- fullname_of_your_executable_Insertion_Sort_bot example_array_of_ints.txt other_arguments_to_your_bot']
    example3: [example, '\n     rtal connect insertion_sort -ainteractive log_debug_your_insertion_sort_bot -- ../bots/test_bot.py ../examples/inputs/array_of_3_ints.txt  wait_for_prompt']
    evaluator: [python3, services/log_debug_your_insertion_sort_bot_driver.py]
    args:
      interactive:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then the LOG lines are checked one by one.
      feedback:
        regex: ^(only_signal_first_error|also_tell_what_expected_instead)$
        default: only_signal_first_error
        explain: "choose the feedback level. Options are as follows:"
        explain1: "[only_signal_first_error]  stops with a parsing error message at the very first unexpected log info."
        explain2: "[also_tell_what_expected_instead]  stops at the very first unexpected log info but also explain what would have been the correct one. (On the very fist line of log, the log is not univocal and only a general explanation on the format is given, with example)"
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  remote_insertion_sort_api:
    description: |+
     In a call to this service you plug in your insertion_sort bot remotely running on an instance of us. Your bot will access the array to be sorted only through the following primitives
        CMD_LOAD_NEXT_INPUT_ELEMENT_IN_TMP_BUFFER [the server answers 1 if the operation is successfull and 0 when there are no other input elements]
        CMD_FLUSH_TMP_BUFFER_ELE_IN_POS <i>
        CMD_CLONE_TO_ITS_RIGHT_ELE_IN_POS <i>
        CMD_COMPARE_ELE_IN_TMP_BUFFER_WITH_ELE_IN_POS <i> [the server answers < or >= ]
        CMD_OUTPUT_FINAL_SORTED_ARRAY
     the service will ignore all lines not beginning with the prefix "CMD_", and will ultimately tell whether the array is sorted but also confirm whether the algorithm executed was the Insertion Sort algorithm or signal the very first discrepancy in behaviour.
    evaluator: [python3, services/remote_insertion_sort_api_driver.py]
    args:
      goal:
        regex: ^(just_simulate_the_process|correctly_sort_the_array)$
        default: correctly_sort_the_array
      feedback:
        regex: ^(only_signal_first_error|signal_first_error_and_castigate|dry_castigate|signal_first_error_and_tell_what_expected_instead)$
        default: signal_first_error_and_tell_what_expected_instead
        explain: "choose the feedback level. Options are as follows:"
        explain1: "[only_signal_first_error]  stops at the very first unexpected behavior, signalling it as the first error in the algorithm expressed by your bot."
        explain2: "[signal_first_error_and_castigate]  signal the very first unexpected behavior and continue the interaction in order to conduct the sorting bot to the eventual failure in achieving the intended goal."
        explain3: "[dry_castigate]  stops with an error message at the very first unexpected behavior for the intended goal."
        explain4: "[signal_first_error_and_tell_what_expected_instead]  signals the very first unexpected behavior and also explain what would have been the correct one. Then proceed in order to conduct the sorting bot to the eventual failure in achieving the intended goal."
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
...
