%YAML 1.2
---
public_folder: public
services:
  append_1:
    description: Given a binary string of 0s and 1s, append a 1 to the end of the tape.
    evaluator: [python, services/append_1/append_1_driver.py]
    args:
      seed:
        explain: Specifies the numeric code (any integer in the range [0, 100000]) to use with a pre-written pseudorandom instance.
        regex: ^(random_seed|100000|\d{1,5})$
        default: random_seed
      lang:
        regex: ^(en|it)$
        default: it
  check_1:
    description: Given a binary string of 0s and 1s, append a 0 to the end of the tape if there were no 1s, otherwise append a 1.
    evaluator: [python, services/append_1/check_1_driver.py]
    args:
      seed:
        explain: Specifies the numeric code (any integer in the range [0, 100000]) to use with a pre-written pseudorandom instance.
        regex: ^(random_seed|100000|\d{1,5})$
        default: random_seed
      lang:
        regex: ^(en|it)$
        default: it
  change_bin:
    description: Given a binary string of 0s and 1s, invert the value of all the bits.
    evaluator: [python, services/change_bin/change_bin_driver.py]
    args:
      seed:
        explain: Specifies the numeric code (any integer in the range [0, 100000]) to use with a pre-written pseudorandom instance.
        regex: ^(random_seed|100000|\d{1,5})$
        default: random_seed
      lang:
        regex: ^(en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    description: "The synopsis of the service is used by the problem solver to explore the services of a TALight problem, including the synopsis itself (as you are doing now). Information on each service is taken from the meta.yaml file that defines the interface of the problem. This is the same file that establishes the contract between the rtal client and the rtald server, or even the contract between a problem creator who designs the problem and a problem creator who implements its services. Actually, meta.yaml is a symbolic link that points to the metafile set as default by whoever distributed the problem on the server from which you are receiving this information; however, using the metafile argument it is possible to request other metafiles, possibly offering the same information in other languages. Instead, the lang argument only influences the language used to format these specific problem information on this tab. At the end of this help sheet for the service synopsis itself, as well as for any other service tab, you will find a handy list of all the available services for the specific problem (currently, %(problem)s): if you want to learn more about one of them, specify its name in the 'service' argument in the next service call for synopsis."
    args:
      service:
      regex: ^(synopsis|check|oracle|[a-zA-Z0-9_]+)$
      default: synopsis
      explain: Any string without spaces but used to specify one of the services of the problem %(problem)s.
    metafile:
      regex: ^(default|en|it|[a-zA-Z0-9_]+)$
      default: default
    lang:
      regex: ^(hardcoded|hardcoded_ext|en|it|[a-zA-Z0-9_]+)$
      default: en
...