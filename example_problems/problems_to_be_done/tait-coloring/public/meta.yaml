public_folder: public
services:
  play:
    evaluator: [python, services/make_triangular/python/simple/make_triangular_server.py]
    args:
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

1. dato un grafo planare 3-connesso G, dire quanti archi t devono essere aggiunti a G per ottenere un grafo planare triangolato e semplice. (il server lo fà | il server lo verifica)

--> 2. Costruttore di un G4' dato G4. (il server lo fà | il server lo verifica)

3. Dati G4' e una 4-colorazione di G4' ottenere una 4-colorazione di G4.

4. Costruttore di G3 dato G4'. (il server lo fà | il server lo verifica)

2+3. Direttamente G4 --> G3. (il server lo fà | il server lo verifica)

5. Dati G4' e  G3, un edge-coloring di G3, e un colore C in {1,2,3} ottenere una 2-colorazione delle facce del planar embedding di G3 tale che ogni due facce adiacenti abbiano colore opposto se e solo se l'arco di bordo tra di loro è diverso da C. (Per rappresentare questo coloring, conviene pensare di colorare i nodi di G4 dato che sono in corrispondenza biunivoca delle facce di G3 che altrimenti non vorremmo dover gestire). (il server lo fà | il server lo verifica)

6. Dati G4' e  G3, un edge-coloring di G3, ottenere una 4-colorazione delle facce del planar embedding di G3 tale che ogni due facce adiacenti abbiano colore diverso. (Come sopra, usiamo i nodi di G4' come nomi delle facce nel planar embedding di G3). (il server lo fà | il server lo verifica)

7. Dati G4' e  G3, un edge-coloring di G3, ottenere una 4-colorazione di G4'
