public_folder: public
services:
  check_a_sol:
    evaluator: [python, services/check_a_sol_server.py]
    args:
      input_formula:
        regex:  ^(\(|\)){0,1000}$
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(en|it)$
        default: it
  check_num_sol:
    evaluator: [python, services/check_num_sol_server.py]
    args:
      num_pairs:
        regex: ^(0|[1-9][0-9]{0,1}|100)$
      risp:
        regex: ^(0|[1-9][0-9]{0,50})$
      ok_if_congruent_modulus:
        regex: ^(0|[1-9][0-9]{0,10})$
#        default: 0
        default: 1000000007
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(en|it)$
        default: it
  evaluate_num_sol:
    evaluator: [python, services/evaluate_num_sol_server.py]
    args:
      answ_modulus:
        regex: ^([1-9][0-9]{0,10})$
#        default: 0
        default: 1000000007
      lang:
        regex: ^(en|it)$
        default: it
  check_solutions_set:
    evaluator: [python, services/check_solutions_set_server.py]
    args:
      feedback:
        regex: ^(yes_no|tell_a_minimal_missing_prefix|give_one_missing)$
        default: yes_no
      lang:
        regex: ^(en|it)$
        default: it
  check_solutions_list:
    evaluator: [python, services/check_solutions_list_server.py]
    args:
      num_pairs:
        regex: ^([1-9]|1[0-9]{0,1}|20)$
        default: 5
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      feedback:
        regex: ^(yes_no|spot_first_wrong_consec|tell_first_minimal_missing_prefix|give_first_missing)$
        default: yes_no
      lang:
        regex: ^(en|it)$
        default: it
  check_next_sol_gen:
    evaluator: [python, services/check_next_sol_gen_server.py]
    args:
      current_sol:
        regex:  ^(\(|\)){0,1000}$
      next_sol:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      tell_maximal_correct_feedback:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(en|it)$
        default: it
  evaluate_next_sol_gen:
    evaluator: [python, services/evaluate_next_sol_gen_server.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(en|it)$
        default: it
  check_rank_of_sol:
    evaluator: [python, services/check_rank_of_sol.py]
    args:
      one_formula:
        regex:  ^(\(|\)){0,1000}$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(en|it)$
        default: it
  check_sol_of_rank:
    evaluator: [python, services/check_sol_of_rank.py]
    args:
      num_pairs:
        regex: ^([1-9][0-9]{0,1}|100)$
      rank:
        regex: ^([1-9]|1[0-9]{0,1}|20)$
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(en|it)$
        default: it
  evaluate_rank_of_sol:
    evaluator: [python, services/evaluate_rank_of_sol.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(en|it)$
        default: it
  evaluate_sol_of_rank:
    evaluator: [python, services/evaluate_sol_of_rank.py]
    args:
      sorting_criterion:
        regex: ^(loves_opening_par|loves_closing_par)$
        default: loves_opening_par
      lang:
        regex: ^(en|it)$
        default: it
