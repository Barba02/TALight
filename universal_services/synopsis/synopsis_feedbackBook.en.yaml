%YAML 1.2
---
open-channel: '# I will serve: problem={problem}, service={service}\n#  with arguments: '
feedback_source: '# The phrases used in this call of service {service} come from the file \''{service}_feedbackBook.{ENV["lang"]}.yaml\'' placed in the \''lang\'' folder of problem {problem}.'

# NOW THE PROBLEM SERVICE SPECIFIC SECTION:

ruamel-missing: 'Internal error (if you are invoking a cloud service, please, report it to those responsible for the service hosted; otherwise, install the python package \''ruamel\'' on your machine).'
ruamel-required: ' the service \''synopsis\'' needs to read the .yaml files of the problem in order to provide you with the information required. If \''ruamel\'' is not installed in the environment where the \''rtald\'' daemon runs, the service \''synopsis\'' can not perform.'
operation-necessary: ' This operation is necessary. The synopsis service aborts and drops the channel.'
metafile-unparsable: 'Internal error (if you are invoking a cloud service, please, report it to those responsible for the service hosted; otherwise, signal it to the problem maker unless you have altered the file yourself): The file \''{meta_yaml_file}\'' could not be loaded as a .yaml file.'
operation-not-necessary: ' We overcome this problem by resorting on the information hardcoded within the meta.yaml file of the problem. Hope that getting this information is good enough for you (usually the hardcoded messages are not less updated than their customizations).'
metafile-missing: 'Internal error (if you are invoking a cloud service, please, report it to those responsible for the service hosted; otherwise, signal it to the problem maker unless you have altered the file yourself): The required yaml file of problem "{problem}" could not be accessed for the required information. File not found: \''{meta_yaml_file}\'''
wrong-service-name: '\nSorry, you asked information about {ENV["service"]} which however does not appear among the services currently supported for problem "{problem}".'
service-of: '   (service of the "{problem}" problem)'
info-source: ' [the problem specific information for this SYNOPSIS help sheet is gathered from the .yaml file \''{meta_yaml_file}\'']'
the-num-arguments: '\nThe service {ENV["service"]} has {len(meta_yaml_book["services"][ENV["service"]]["args"])} arguments:'
description: Description
example: Example
explanation: Explanation
regex-cloud-resource: '\nThe arguments of all TALight services take in as possible values only simple strings that can be streamed from the \''rtal\'' client to the \''rtald\'' daemon (and finally acquired as environment variables). For each argument, the family of allowed string values is described by means of a regex. If the correct interpretation of the regex confuses you, then take profit of the online support at \''https://extendsclass.com/regex-tester.html\''.\n'
index-help-pages: 'Index of the Help Pages:'
list-services: 'List of all services for problem "{problem}":'
