%YAML 1.2
---
- {
too-few-lines: "Your file has only {i-1} lines instead of {N}.",
wrong-line-length-single-newline-char: "Disregarding its single newline character, the {i}-th line of your file has {len(risp_line)} characters instead of {N}.",
wrong-line-length-more-newline-chars: "Disregarding its {len(risp_line_full)-len(risp_line)} newline characters, the {i}-th line of your file has {len(risp_line)} characters instead of {N}.",
wrong-char-bool: "The {j}-th character of the {i}-th line in your file is neither a 0 nor a 1, but a {risp_line[j-1]}.",
wrong0-answ: "The {j}-th character of the {i}-th line in your file is a {risp_line[j-1]}, however the {i}x{j}-board is tilable.",
wrong1-answ: "The {j}-th character of the {i}-th line in your file is a {risp_line[j-1]}, however the {i}x{j}-board is not tilable.",
perfect1-1-lesson: "A board with one single row (m=1) is tilable if and only if it has an even number of columns.",
perfect1-1-challenge: "What about boards with 2 rows (m=2)? This is the qustion in the next subtask.",
perfect1-2-lesson: "You got it how it works with boards of at most two rows.",
perfect1-2-challenge: "By symmetry, you alredy know the truth also for boards of at most two coumns. Can you generalize this to arbitrary mxn-grids?",
perfect1-3-lesson: "You achieved the good characterization. It could be xpressed as follows:\n\n   the mxn-board is tilable if and only if at least one among m and n is even.",
perfect1-3-challenge: "Goal 2 asks you to produce a proof/evidence of the 'if' side of the good characterization above stated/conjectured. Try to obtain compelling evidence by offering tilings. Clarly, a finite number of tilings will never suffice to make a proof, but you have a proof if you find a general construction method.\n Goal 3 concerns the 'only if' side and is not supported by our authomatic feedback services. It is important and pertinent to comprehend the reason why:\n   whereas a natural way to certify tilability (i.e., providing a tiling) is by necessity defined together with the very problem (the problem is naturally in NP), and as such a compact and efficient language to convince for the 'yes' is given at the very start, no language to asses the 'n√≤' has been ever agreed upon. In the statement of the problem there is no implicit or explicit agreement or suggestion on how to prove that a tiling does not exists. A way to convince of the 'no' a super-human mathematician like King Artur must exists for sure for every problem in P (and this one is). However, if we had proposed it here we would have spoiled the problem. With other problems in P we could have done without spoilering the problem entirely. And for NP-complete problems we know such language can not exist unless NP=coNP.",
goal2-task3: "{sys.argv[0]} called with option goal={args.goal} and option subtask={args.subtask}. However goal={args.goal} has no subtask={args.subtask}.",
out-of-range-m-n: "The submitted file states m={m} and n={n}. Both parameters should be in the range [0,20]",
wrong-char-card-point: "The {j}-th character of the {i}-th line in your file is not among 'N','S','W','E'. It is a '{risp_line[j-1]}'.",
wrong-S: "Your tiling is faulty: The {j}-th character of the {i}-th line in your file is an 'S'. This can not be since there is not an 'N' above it.",
wrong-E: "Your tiling is faulty: Your tiling is faulty: The {j}-th character of the {i}-th line in your file is an 'E'. This can not be since there is not a 'W' at its left.",
wrong-W: "Your tiling is faulty: Your tiling is faulty: The {j}-th character of the {i}-th line in your file is a 'W'. This can not be since there is not an 'E' at its right.",
wrong-N: "Your tiling is faulty: Your tiling is faulty: The {j}-th character of the {i}-th line in your file is an 'N'. This can not be since there is not an 'S' below it.",
perfect2-challenge: None,
}
